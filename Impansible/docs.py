amodules_docs={'_accelerate': 'Get Azure Container Instance facts\n\nArguments: name, resource_group, tags\n\nRemoved keyword',
 '_aci_intf_policy_fc': 'Manage Fibre Channel interface policies (fc:IfPol)\n\nArguments: state, fc_policy, port_mode, description\n\nManage ACI Fiber Channel interface policies on Cisco ACI fabrics.',
 '_aci_intf_policy_l2': 'Manage Layer 2 interface policies (l2:IfPol)\n\nArguments: state, description, vepa, vlan_scope, l2_policy, qinq\n\nManage Layer 2 interface policies on Cisco ACI fabrics.',
 '_aci_intf_policy_lldp': 'Manage LLDP interface policies (lldp:IfPol)\n\nArguments: receive_state, lldp_policy, transmit_state, description, state\n\nManage LLDP interface policies on Cisco ACI fabrics.',
 '_aci_intf_policy_mcp': 'Manage MCP interface policies (mcp:IfPol)\n\nArguments: state, admin_state, description, mcp\n\nManage MCP interface policies on Cisco ACI fabrics.',
 '_aci_intf_policy_port_channel': 'Manage port channel interface policies (lacp:LagPol)\n\nArguments: graceful_convergence, description, load_defer, symmetric_hash, suspend_individual, state, mode, min_links, port_channel, fast_select, max_links\n\nManage port channel interface policies on Cisco ACI fabrics.',
 '_aci_intf_policy_port_security': 'Manage port security (l2:PortSecurityPol)\n\nArguments: port_security, port_security_timeout, max_end_points, description, state\n\nManage port security on Cisco ACI fabrics.',
 '_acme_account_facts': "Retrieves information on ACME accounts\n\nArguments: retrieve_orders\n\nAllows to retrieve information on accounts a CA supporting the L(ACME protocol,https://tools.ietf.org/html/rfc8555), such as L(Let's Encrypt,https://letsencrypt.org/).\nThis module only works with the ACME v2 protocol.",
 '_ali_instance_facts': 'Gather information on instances of Alibaba Cloud ECS.\n\nArguments: instance_names, instance_tags, instance_ids, availability_zone\n\nThis module fetches data from the Open API in Alicloud. The module must be called from within the ECS instance itself.\nThis module was called C(ali_instance_facts) before Ansible 2.9. The usage did not change.',
 '_aos_asn_pool': 'Manage SPAN source groups (span:SrcGrp)\n\nArguments: state, admin_state, description, dst_group, tenant, src_group\n\nRemoved keyword',
 '_aos_blueprint': 'Run arbitrary command on Cisco NXOS devices\n\nArguments: retries, commands, wait_for, match, interval\n\nRemoved keyword',
 '_aos_blueprint_param': 'Get Azure Cosmos DB Account facts\n\nArguments: resource_group, tags, name, retrieve_keys, retrieve_connection_strings\n\nRemoved keyword',
 '_aos_blueprint_virtnet': 'Edit Meraki MX content filtering policies\n\nArguments: subset, blocked_urls, auth_key, blocked_categories, state, category_list_size, net_name, allowed_urls, net_id\n\nRemoved keyword',
 '_aos_device': 'Manage  NetApp cDOT luns\n\nArguments: force_remove, name, flexvol_name, size_unit, vserver, state, force_resize, force_remove_fenced, size\n\nRemoved keyword',
 '_aos_external_router': 'Manage iSCSI targets with Open-iSCSI\n\nArguments: auto_node_startup, target, show_nodes, node_auth, node_pass, discover, portal, login, node_user, port\n\nRemoved keyword',
 '_aos_ip_pool': 'Retrieve information about the oVirt/RHV API\n\nArguments: \n\nRemoved keyword',
 '_aos_logical_device': "Attach/Detach Volumes from OpenStack VM's\n\nArguments: volume, device, state, server, availability_zone\n\nRemoved keyword",
 '_aos_logical_device_map': 'Manage Direct Connect virtual interfaces.\n\nArguments: vlan, name, virtual_interface_id, id_to_associate, customer_address, state, amazon_address, authentication_key, bgp_asn, cidr, address_type, virtual_gateway_id, public\n\nRemoved keyword',
 '_aos_login': 'Module to manage power management of hosts in oVirt/RHV\n\nArguments: username, password, name, order, port, state, address, encrypt_options, type, options\n\nRemoved keyword',
 '_aos_rack_type': 'Manage logging on network devices\n\nArguments: aggregate, state, name, level, dest, facility\n\nRemoved keyword',
 '_aos_template': 'Manage peers for routing generic message protocol messages\n\nArguments: ratio, name, connection_mode, partition, auto_init_interval, state, auto_init, transport_config, number_of_connections, type, pool, description\n\nRemoved keyword',
 '_aws_acm_facts': 'Retrieve certificate information from AWS Certificate Manager service\n\nArguments: domain_name, statuses\n\nRetrieve information for ACM certificates\nThis module was called C(aws_acm_facts) before Ansible 2.9. The usage did not change.',
 '_aws_az_facts': 'Gather information about availability zones in AWS.\n\nArguments: filters\n\nGather information about availability zones in AWS.\nThis module was called C(aws_az_facts) before Ansible 2.9. The usage did not change.',
 '_aws_caller_facts': 'Get information about the user and account being used to make AWS calls.\n\nArguments: \n\nThis module returns information about the account and user / role from which the AWS access tokens originate.\nThe primary use of this is to get the account id for templating into ARNs or similar to avoid needing to specify this information in inventory.\nThis module was called C(aws_caller_facts) before Ansible 2.9. The usage did not change.',
 '_aws_kms_facts': 'Gather information about AWS KMS keys\n\nArguments: pending_deletion, filters\n\nGather information about AWS KMS keys including tags and grants\nThis module was called C(aws_kms_facts) before Ansible 2.9. The usage did not change.',
 '_aws_region_facts': 'Gather information about AWS regions.\n\nArguments: filters\n\nGather information about AWS regions.\nThis module was called C(aws_region_facts) before Ansible 2.9. The usage did not change.',
 '_aws_s3_bucket_facts': 'Lists S3 buckets in AWS\n\nArguments: \n\nLists S3 buckets in AWS\nThis module was called C(aws_s3_bucket_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(aws_s3_bucket_info) module no longer returns C(ansible_facts)!',
 '_aws_sgw_facts': 'Fetch AWS Storage Gateway information\n\nArguments: gather_local_disks, gather_file_shares, gather_tapes, gather_volumes\n\nFetch AWS Storage Gateway information\nThis module was called C(aws_sgw_facts) before Ansible 2.9. The usage did not change.',
 '_aws_waf_facts': 'Retrieve information for WAF ACLs, Rule , Conditions and Filters.\n\nArguments: name, waf_regional\n\nRetrieve information for WAF ACLs, Rule , Conditions and Filters.\nThis module was called C(aws_waf_facts) before Ansible 2.9. The usage did not change.',
 '_azure': "Filters for WebTrends in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_webtrends_filter, https, ssl_verify, password, host, vdom\n\nRemoved keyword",
 '_azure_rm_aks_facts': 'Get Azure Kubernetes Service facts\n\nArguments: show_kubeconfig, name, resource_group, tags\n\nGet facts for a specific Azure Kubernetes Service or all Azure Kubernetes Services.',
 '_azure_rm_aksversion_facts': 'Get available kubernetes versions supported by Azure Kubernetes Service\n\nArguments: version, location\n\nGet available kubernetes versions supported by Azure Kubernetes Service.',
 '_azure_rm_applicationsecuritygroup_facts': 'Get Azure Application Security Group facts\n\nArguments: name, resource_group, tags\n\nGet facts of Azure Application Security Group.',
 '_azure_rm_appserviceplan_facts': 'Get azure app service plan facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific app service plan or all app service plans in a resource group, or all app service plan in current subscription.',
 '_azure_rm_automationaccount_facts': 'Get Azure automation account facts\n\nArguments: list_usages, list_statistics, list_keys, name, resource_group, tags\n\nGet facts of automation account.',
 '_azure_rm_autoscale_facts': 'Get Azure Auto Scale Setting facts\n\nArguments: name, resource_group, tags\n\nGet facts of Auto Scale Setting.',
 '_azure_rm_availabilityset_facts': 'Get Azure Availability Set facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific availability set or all availability sets.',
 '_azure_rm_cdnendpoint_facts': 'Get Azure CDN endpoint facts\n\nArguments: profile_name, name, resource_group, tags\n\nGet facts for a specific Azure CDN endpoint or all Azure CDN endpoints.',
 '_azure_rm_cdnprofile_facts': 'Get Azure CDN profile facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific Azure CDN profile or all CDN profiles.',
 '_azure_rm_containerinstance_facts': 'Get Azure Container Instance facts\n\nArguments: name, resource_group, tags\n\nGet facts of Container Instance.',
 '_azure_rm_containerregistry_facts': 'Get Azure Container Registry facts\n\nArguments: retrieve_credentials, name, resource_group, tags\n\nGet facts for Container Registry.',
 '_azure_rm_cosmosdbaccount_facts': 'Get Azure Cosmos DB Account facts\n\nArguments: resource_group, tags, name, retrieve_keys, retrieve_connection_strings\n\nGet facts of Azure Cosmos DB Account.',
 '_azure_rm_deployment_facts': 'Get Azure Deployment facts\n\nArguments: name, resource_group\n\nGet facts of Azure Deployment.',
 '_azure_rm_devtestlab_facts': 'Get Azure DevTest Lab facts\n\nArguments: name, resource_group, tags\n\nGet facts of Azure DevTest Lab.',
 '_azure_rm_devtestlabarmtemplate_facts': 'Get Azure DevTest Lab ARM Template facts\n\nArguments: artifact_source_name, lab_name, name, resource_group\n\nGet facts of Azure DevTest Lab ARM Template.',
 '_azure_rm_devtestlabartifact_facts': 'Get Azure DevTest Lab Artifact facts\n\nArguments: artifact_source_name, lab_name, name, resource_group\n\nGet facts of Azure DevTest Lab Artifact.',
 '_azure_rm_devtestlabartifactsource_facts': 'Get Azure DevTest Lab Artifact Source facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure DevTest Lab Artifact Source.',
 '_azure_rm_devtestlabcustomimage_facts': 'Get Azure DevTest Lab Custom Image facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure Azure DevTest Lab Custom Image.',
 '_azure_rm_devtestlabenvironment_facts': 'Get Azure Environment facts\n\nArguments: lab_name, user_name, name, resource_group, tags\n\nGet facts of Azure Environment.',
 '_azure_rm_devtestlabpolicy_facts': 'Get Azure DTL Policy facts\n\nArguments: policy_set_name, lab_name, name, resource_group, tags\n\nGet facts of Azure DTL Policy.',
 '_azure_rm_devtestlabschedule_facts': 'Get Azure Schedule facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure Schedule.',
 '_azure_rm_devtestlabvirtualmachine_facts': 'Get Azure DevTest Lab Virtual Machine facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure DevTest Lab Virtual Machine.',
 '_azure_rm_devtestlabvirtualnetwork_facts': 'Get Azure DevTest Lab Virtual Network facts\n\nArguments: lab_name, name, resource_group\n\nGet facts of Azure DevTest Lab Virtual Network.',
 '_azure_rm_dnsrecordset_facts': 'Get DNS Record Set facts\n\nArguments: zone_name, top, relative_name, resource_group, record_type\n\nGet facts for a specific DNS Record Set in a Zone, or a specific type in all Zones or in one Zone etc.',
 '_azure_rm_dnszone_facts': 'Get DNS zone facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific DNS zone or all DNS zones within a resource group.',
 '_azure_rm_functionapp_facts': 'Get Azure Function App facts\n\nArguments: name, resource_group, tags\n\nGet facts for one Azure Function App or all Function Apps within a resource group.',
 '_azure_rm_hdinsightcluster_facts': 'Get Azure HDInsight Cluster facts\n\nArguments: name, resource_group, tags\n\nGet facts of Azure HDInsight Cluster.',
 '_azure_rm_image_facts': 'Get facts about azure custom images\n\nArguments: name, resource_group, tags\n\nList azure custom images. The images can be listed where scope of listing can be based on subscription, resource group, name or tags.',
 '_azure_rm_loadbalancer_facts': 'Get load balancer facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific load balancer or all load balancers.',
 '_azure_rm_lock_facts': 'Manage Azure locks\n\nArguments: name, resource_group, managed_resource_id\n\nCreate, delete an Azure lock.',
 '_azure_rm_loganalyticsworkspace_facts': 'Get facts of Azure Log Analytics workspaces\n\nArguments: show_management_groups, show_shared_keys, name, resource_group, tags, show_intelligence_packs, show_usages\n\nGet, query Azure Log Analytics workspaces.',
 '_azure_rm_managed_disk': 'Manage Azure Manage Disks\n\nArguments: attach_caching, disk_size_gb, name, resource_group, tags, source_uri, storage_account_type, state, managed_by, location, os_type, zone, create_option\n\nCreate, update and delete an Azure Managed Disk.',
 '_azure_rm_managed_disk_facts': 'Get managed disk facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific managed disk or all managed disks.',
 '_azure_rm_manageddisk_facts': 'Get managed disk facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific managed disk or all managed disks.',
 '_azure_rm_mariadbconfiguration_facts': 'Get Azure MariaDB Configuration facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MariaDB Configuration.',
 '_azure_rm_mariadbdatabase_facts': 'Get Azure MariaDB Database facts\n\nArguments: resource_group, server_name, name\n\nGet facts of MariaDB Database.',
 '_azure_rm_mariadbfirewallrule_facts': 'Get Azure MariaDB Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MariaDB Firewall Rule.',
 '_azure_rm_mariadbserver_facts': 'Get Azure MariaDB Server facts\n\nArguments: name, resource_group, tags\n\nGet facts of MariaDB Server.',
 '_azure_rm_mysqlconfiguration_facts': 'Get Azure MySQL Configuration facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MySQL Configuration.',
 '_azure_rm_mysqldatabase_facts': 'Get Azure MySQL Database facts\n\nArguments: resource_group, server_name, name\n\nGet facts of MySQL Database.',
 '_azure_rm_mysqlfirewallrule_facts': 'Get Azure MySQL Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MySQL Firewall Rule.',
 '_azure_rm_mysqlserver_facts': 'Get Azure MySQL Server facts\n\nArguments: name, resource_group, tags\n\nGet facts of MySQL Server.',
 '_azure_rm_networkinterface_facts': 'Get network interface facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific network interface or all network interfaces within a resource group.',
 '_azure_rm_postgresqlconfiguration_facts': 'Get Azure PostgreSQL Configuration facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure PostgreSQL Configuration.',
 '_azure_rm_postgresqldatabase_facts': 'Get Azure PostgreSQL Database facts\n\nArguments: resource_group, server_name, name\n\nGet facts of PostgreSQL Database.',
 '_azure_rm_postgresqlfirewallrule_facts': 'Get Azure PostgreSQL Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure PostgreSQL Firewall Rule.',
 '_azure_rm_postgresqlserver_facts': 'Get Azure PostgreSQL Server facts\n\nArguments: name, resource_group, tags\n\nGet facts of PostgreSQL Server.',
 '_azure_rm_publicipaddress_facts': 'Get public IP facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific public IP or all public IPs within a resource group.',
 '_azure_rm_rediscache_facts': 'Get Azure Cache for Redis instance facts\n\nArguments: return_access_keys, name, resource_group, tags\n\nGet facts for Azure Cache for Redis instance.',
 '_azure_rm_resource_facts': 'Generic facts of Azure resources\n\nArguments: resource_type, resource_name, subresource, resource_group, provider, url, api_version\n\nObtain facts of any resource using Azure REST API.\nThis module gives access to resources that are not supported via Ansible modules.\nRefer to U(https://docs.microsoft.com/en-us/rest/api/) regarding details related to specific resource REST API.',
 '_azure_rm_resourcegroup_facts': 'Get resource group facts\n\nArguments: list_resources, name, tags\n\nGet facts for a specific resource group or all resource groups.',
 '_azure_rm_roleassignment_facts': 'Gets Azure Role Assignment facts\n\nArguments: scope, role_definition_id, name, assignee\n\nGets facts of Azure Role Assignment.',
 '_azure_rm_roledefinition_facts': 'Get Azure Role Definition facts\n\nArguments: scope, role_name, type, id\n\nGet facts of Azure Role Definition.',
 '_azure_rm_routetable_facts': 'Get route table facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific route table or all route table in a resource group or subscription.',
 '_azure_rm_securitygroup_facts': 'Get security group facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific security group or all security groups within a resource group.',
 '_azure_rm_servicebus_facts': 'Get servicebus facts\n\nArguments: topic, name, resource_group, tags, type, namespace, show_sas_policies\n\nGet facts for a specific servicebus or all servicebus in a resource group or subscription.',
 '_azure_rm_sqldatabase_facts': 'Get Azure SQL Database facts\n\nArguments: name, resource_group, elastic_pool_name, server_name, tags\n\nGet facts of Azure SQL Database.',
 '_azure_rm_sqlfirewallrule_facts': 'Get Azure SQL Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of SQL Firewall Rule.',
 '_azure_rm_sqlserver_facts': 'Get SQL Server facts\n\nArguments: resource_group, server_name\n\nGet facts of SQL Server.',
 '_azure_rm_storageaccount_facts': 'Get storage account facts\n\nArguments: tags, show_connection_string, name, resource_group, show_blob_cors\n\nGet facts for one storage account or all storage accounts within a resource group.',
 '_azure_rm_subnet_facts': 'Get Azure Subnet facts\n\nArguments: virtual_network_name, name, resource_group\n\nGet facts of Azure Subnet.',
 '_azure_rm_trafficmanagerendpoint_facts': 'Get Azure Traffic Manager endpoint facts\n\nArguments: profile_name, type, name, resource_group\n\nGet facts for a specific Traffic Manager endpoints or all endpoints  in a Traffic Manager profile.',
 '_azure_rm_trafficmanagerprofile_facts': 'Get Azure Traffic Manager profile facts\n\nArguments: name, resource_group, tags\n\nGet facts for a Azure specific Traffic Manager profile or all Traffic Manager profiles.',
 '_azure_rm_virtualmachine_extension': 'Managed Azure Virtual Machine extension\n\nArguments: publisher, virtual_machine_extension_type, name, resource_group, settings, state, location, protected_settings, type_handler_version, auto_upgrade_minor_version, virtual_machine_name\n\nCreate, update and delete Azure Virtual Machine Extension.\nNote that this module was called M(azure_rm_virtualmachine_extension) before Ansible 2.8. The usage did not change.',
 '_azure_rm_virtualmachine_facts': 'Get virtual machine facts\n\nArguments: name, resource_group, tags\n\nGet facts for one or all virtual machines in a resource group.',
 '_azure_rm_virtualmachine_scaleset': 'Manage Azure virtual machine scale sets\n\nArguments: load_balancer, application_gateway, virtual_network_resource_group, resource_group, virtual_network_name, image, upgrade_policy, zones, managed_disk_type, ssh_public_keys, enable_accelerated_networking, tier, vm_size, ssh_password_enabled, remove_on_absent, capacity, name, overprovision, admin_username, short_hostname, state, subnet_name, location, single_placement_group, custom_data, security_group, os_type, os_disk_caching, data_disks, admin_password\n\nCreate and update a virtual machine scale set.\nNote that this module was called M(azure_rm_virtualmachine_scaleset) before Ansible 2.8. The usage did not change.',
 '_azure_rm_virtualmachine_scaleset_facts': 'Get Virtual Machine Scale Set facts\n\nArguments: tags, name, resource_group, format\n\nGet facts for a virtual machine scale set.\nNote that this module was called M(azure_rm_virtualmachine_scaleset_facts) before Ansible 2.8. The usage did not change.',
 '_azure_rm_virtualmachineextension_facts': 'Get Azure Virtual Machine Extension facts\n\nArguments: virtual_machine_name, name, resource_group, tags\n\nGet facts of Azure Virtual Machine Extension.',
 '_azure_rm_virtualmachineimage_facts': 'Get virtual machine image facts\n\nArguments: sku, publisher, version, location, offer\n\nGet facts for virtual machine images.',
 '_azure_rm_virtualmachinescaleset_facts': 'Get Virtual Machine Scale Set facts\n\nArguments: tags, name, resource_group, format\n\nGet facts for a virtual machine scale set.\nNote that this module was called M(azure_rm_virtualmachine_scaleset_facts) before Ansible 2.8. The usage did not change.',
 '_azure_rm_virtualmachinescalesetextension_facts': 'Get Azure Virtual Machine Scale Set Extension facts\n\nArguments: vmss_name, name, resource_group\n\nGet facts of Azure Virtual Machine Scale Set Extension.',
 '_azure_rm_virtualmachinescalesetinstance_facts': 'Get Azure Virtual Machine Scale Set Instance facts\n\nArguments: instance_id, vmss_name, resource_group, tags\n\nGet facts of Azure Virtual Machine Scale Set VMs.',
 '_azure_rm_virtualnetwork_facts': 'Get virtual network facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific virtual network or all virtual networks within a resource group.',
 '_azure_rm_virtualnetworkpeering_facts': 'Get facts of Azure Virtual Network Peering\n\nArguments: virtual_network, name, resource_group\n\nGet facts of Azure Virtual Network Peering.',
 '_azure_rm_webapp_facts': 'Get Azure web app facts\n\nArguments: resource_group, name, return_publish_profile, tags\n\nGet facts for a specific web app or all web app in a resource group, or all web app in current subscription.',
 '_bigip_asm_policy': 'Manage BIG-IP ASM policies\n\nArguments: state, name, file, active, partition, template\n\nManage BIG-IP ASM policies.',
 '_bigip_device_facts': 'Collect information from F5 BIG-IP devices\n\nArguments: gather_subset\n\nCollect information from F5 BIG-IP devices.\nThis module was called C(bigip_device_facts) before Ansible 2.9. The usage did not change.',
 '_bigip_facts': 'Collect facts from F5 BIG-IP devices\n\nArguments: filter, include, session\n\nCollect facts from F5 BIG-IP devices via iControl SOAP API',
 '_bigip_gtm_facts': 'Collect facts from F5 BIG-IP GTM devices\n\nArguments: filter, include\n\nCollect facts from F5 BIG-IP GTM devices.',
 '_bigip_iapplx_package': 'Manages Javascript LX packages on a BIG-IP\n\nArguments: state, package\n\nManages Javascript LX packages on a BIG-IP. This module will allow you to deploy LX packages to the BIG-IP and manage their lifecycle.',
 '_bigip_security_address_list': 'Manage address lists on BIG-IP AFM\n\nArguments: geo_locations, addresses, name, address_ranges, address_lists, fqdns, partition, state, description\n\nManages the AFM address lists on a BIG-IP. This module can be used to add and remove address list entries.',
 '_bigip_security_port_list': 'Manage port lists on BIG-IP AFM\n\nArguments: state, name, port_ranges, description, partition, port_lists, ports\n\nManages the AFM port lists on a BIG-IP. This module can be used to add and remove port list entries.',
 '_bigip_traffic_group': 'Manages traffic groups on BIG-IP\n\nArguments: ha_order, name, auto_failback_time, partition, ha_group, auto_failback, state, ha_load_factor, mac_address\n\nSupports managing traffic groups and their attributes on a BIG-IP.',
 '_bigiq_device_facts': 'Collect information from F5 BIG-IQ devices\n\nArguments: gather_subset\n\nCollect information from F5 BIG-IQ devices.\nThis module was called C(bigiq_device_facts) before Ansible 2.9. The usage did not change.',
 '_cl_bond': "Certificate Revocation List as a PEM file in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, vpn_certificate_crl, ssl_verify, password, vdom\n\nRemoved keyword",
 '_cl_bridge': 'Gather information about application ELBs in AWS\n\nArguments: names, load_balancer_arns\n\nRemoved keyword',
 '_cl_img_install': 'Gather information about DigitalOcean regions\n\nArguments: \n\nRemoved keyword',
 '_cl_interface': 'Create and remove a bcf switch.\n\nArguments: name, access_token, state, mac, controller, leaf_group, validate_certs, fabric_role\n\nRemoved keyword',
 '_cl_interface_policy': 'register a task definition in ecs\n\nArguments: family, task_role_arn, force_create, execution_role_arn, network_mode, state, containers, volumes, memory, revision, cpu, arn, launch_type\n\nRemoved keyword',
 '_cl_license': 'Get IoT Hub facts\n\nArguments: show_stats, name, resource_group, tags, show_quota_metrics, test_route_message, list_consumer_groups, list_keys, show_endpoint_health\n\nRemoved keyword',
 '_cl_ports': "Global configuration objects that can be configured independently for all VDOMs or for the defined VDOM scope in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, system_vdom_exception\n\nRemoved keyword",
 '_cloudformation_facts': 'Obtain information about an AWS CloudFormation stack\n\nArguments: stack_events, all_facts, stack_resources, stack_template, stack_name, stack_policy\n\nGets information about an AWS CloudFormation stack\nThis module was called C(cloudformation_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(cloudformation_info) module no longer returns C(ansible_facts)!',
 '_cloudfront_facts': 'Obtain facts about an AWS CloudFront distribution\n\nArguments: list_streaming_distributions, origin_access_identity_config, invalidation, domain_name_alias, list_invalidations, origin_access_identity_id, list_distributions_by_web_acl_id, origin_access_identity, streaming_distribution_config, all_lists, list_distributions, summary, web_acl_id, streaming_distribution, distribution_id, distribution_config, invalidation_id, distribution, list_origin_access_identities\n\nGets information about an AWS CloudFront distribution\nThis module was called C(cloudfront_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(cloudfront_info) module no longer returns C(ansible_facts)!',
 '_cloudwatchlogs_log_group_facts': 'get information about log_group in CloudWatchLogs\n\nArguments: log_group_name\n\nLists the specified log groups. You can list all your log groups or filter the results by prefix.\nThis module was called C(cloudwatchlogs_log_group_facts) before Ansible 2.9. The usage did not change.',
 '_cs_instance_facts': 'Gathering facts from the API of instances from Apache CloudStack based clouds.\n\nArguments: project, account, domain, name\n\nGathering facts from the API of an instance.',
 '_cs_nic': 'REST API configuration for Cisco Intersight\n\nArguments: update_method, query_params, state, resource_path, api_body\n\nRemoved keyword',
 '_cs_zone_facts': 'Gathering facts of zones from Apache CloudStack based clouds.\n\nArguments: name\n\nGathering facts from the API of a zone.\nSets Ansible facts accessible by the key C(cloudstack_zone) and since version 2.6 also returns results.',
 '_digital_ocean': "Create/delete a droplet/SSH_key in DigitalOcean\n\nArguments: unique_name, virtio, region_id, backups_enabled, user_data, image_id, wait_timeout, api_token, ssh_pub_key, wait, name, size_id, id, state, command, ssh_key_ids, ipv6, private_networking\n\nCreate/delete a droplet in DigitalOcean and optionally wait for it to be 'running', or deploy an SSH key.",
 '_digital_ocean_account_facts': 'Gather information about DigitalOcean User account\n\nArguments: \n\nThis module can be used to gather information about User account.\nThis module was called C(digital_ocean_account_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_certificate_facts': 'Gather information about DigitalOcean certificates\n\nArguments: certificate_id\n\nThis module can be used to gather information about DigitalOcean provided certificates.\nThis module was called C(digital_ocean_certificate_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_domain_facts': 'Gather information about DigitalOcean Domains\n\nArguments: domain_name\n\nThis module can be used to gather information about DigitalOcean provided Domains.\nThis module was called C(digital_ocean_domain_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_firewall_facts': 'Gather information about DigitalOcean firewalls\n\nArguments: name\n\nThis module can be used to gather information about DigitalOcean firewalls.\nThis module was called C(digital_ocean_firewall_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_floating_ip_facts': 'DigitalOcean Floating IPs information\n\nArguments: \n\nThis module can be used to fetch DigitalOcean Floating IPs information.\nThis module was called C(digital_ocean_floating_ip_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_image_facts': 'Gather information about DigitalOcean images\n\nArguments: image_type\n\nThis module can be used to gather information about DigitalOcean provided images.\nThese images can be either of type C(distribution), C(application) and C(private).\nThis module was called C(digital_ocean_image_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_load_balancer_facts': 'Gather information about DigitalOcean load balancers\n\nArguments: load_balancer_id\n\nThis module can be used to gather information about DigitalOcean provided load balancers.\nThis module was called C(digital_ocean_load_balancer_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_region_facts': 'Gather information about DigitalOcean regions\n\nArguments: \n\nThis module can be used to gather information about regions.\nThis module was called C(digital_ocean_region_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_size_facts': 'Gather information about DigitalOcean Droplet sizes\n\nArguments: \n\nThis module can be used to gather information about droplet sizes.\nThis module was called C(digital_ocean_size_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_snapshot_facts': 'Gather information about DigitalOcean Snapshot\n\nArguments: snapshot_type, snapshot_id\n\nThis module can be used to gather information about snapshot information based upon provided values such as droplet, volume and snapshot id.\nThis module was called C(digital_ocean_snapshot_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_sshkey_facts': 'DigitalOcean SSH keys facts\n\nArguments: \n\nFetch DigitalOcean SSH keys facts.',
 '_digital_ocean_tag_facts': 'Gather information about DigitalOcean tags\n\nArguments: tag_name\n\nThis module can be used to gather information about DigitalOcean provided tags.\nThis module was called C(digital_ocean_tag_facts) before Ansible 2.9. The usage did not change.',
 '_digital_ocean_volume_facts': 'Gather information about DigitalOcean volumes\n\nArguments: region_name\n\nThis module can be used to gather information about DigitalOcean provided volumes.\nThis module was called C(digital_ocean_volume_facts) before Ansible 2.9. The usage did not change.',
 '_docker': 'Manage bits and pieces of XML files or strings\n\nArguments: xpath, set_children, attribute, pretty_print, print_match, namespaces, insertafter, path, count, xmlstring, insertbefore, strip_cdata_tags, input_type, add_children, value, content, state, backup\n\nRemoved keyword',
 '_docker_image_facts': 'Inspect docker images\n\nArguments: name\n\nProvide one or more image names, and the module will inspect each, returning an array of inspection results.\nIf an image does not exist locally, it will not appear in the results. If you want to check whether an image exists locally, you can call the module with the image name, then check whether the result list is empty (image does not exist) or has one element (the image exists locally).\nThe module will not attempt to pull images from registries. Use M(docker_image) with I(source) set to C(pull) to ensure an image is pulled.',
 '_docker_service': 'Manage multi-container Docker applications with Docker Compose.\n\nArguments: files, project_name, project_src, hostname_check, recreate, dependencies, remove_images, services, pull, definition, scale, nocache, remove_orphans, restarted, state, remove_volumes, stopped, build, timeout\n\nUses Docker Compose to start, shutdown and scale services.\nWorks with compose versions 1 and 2.\nConfiguration can be read from a C(docker-compose.yml) or C(docker-compose.yaml) file or inline using the I(definition) option.\nSee the examples for more details.\nSupports check mode.\nThis module was called C(docker_service) before Ansible 2.8. The usage did not change.',
 '_ec2_ami_facts': 'Gather information about ec2 AMIs\n\nArguments: image_ids, owners, describe_image_attributes, filters, executable_users\n\nGather information about ec2 AMIs\nThis module was called C(ec2_ami_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_ami_find': 'Manage an Azure Container Instance\n\nArguments: registry_username, name, resource_group, dns_name_label, force_update, restart_policy, state, registry_password, registry_login_server, location, os_type, ip_address, ports, containers\n\nRemoved keyword',
 '_ec2_ami_search': 'Create or delete a Rackspace Cloud Monitoring check for an existing entity.\n\nArguments: entity_id, check_type, target_alias, state, label, disabled, target_hostname, period, details, timeout, monitoring_zones_poll, metadata\n\nRemoved keyword',
 '_ec2_asg_facts': 'Gather information about ec2 Auto Scaling Groups (ASGs) in AWS\n\nArguments: name, tags\n\nGather information about ec2 Auto Scaling Groups (ASGs) in AWS\nThis module was called C(ec2_asg_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_customer_gateway_facts': 'Gather information about customer gateways in AWS\n\nArguments: customer_gateway_ids, filters\n\nGather information about customer gateways in AWS\nThis module was called C(ec2_customer_gateway_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_eip_facts': 'List EC2 EIP details\n\nArguments: filters\n\nList details of EC2 Elastic IP addresses.\nThis module was called C(ec2_eip_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_elb_facts': 'Gather information about EC2 Elastic Load Balancers in AWS\n\nArguments: names\n\nGather information about EC2 Elastic Load Balancers in AWS\nThis module was called C(ec2_elb_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_eni_facts': 'Gather information about ec2 ENI interfaces in AWS\n\nArguments: filters\n\nGather information about ec2 ENI interfaces in AWS\nThis module was called C(ec2_eni_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_facts': 'Create and remove a bigmon out-of-band policy.\n\nArguments: policy_description, name, access_token, start_time, state, priority, action, controller, duration, validate_certs, delivery_packet_count\n\nRemoved keyword',
 '_ec2_group_facts': 'Gather information about ec2 security groups in AWS.\n\nArguments: filters\n\nGather information about ec2 security groups in AWS.\nThis module was called C(ec2_group_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_instance_facts': 'Gather information about ec2 instances in AWS\n\nArguments: instance_ids, filters\n\nGather information about ec2 instances in AWS\nThis module was called C(ec2_instance_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_lc_facts': 'Gather information about AWS Autoscaling Launch Configurations\n\nArguments: sort, sort_end, sort_order, name, sort_start\n\nGather information about AWS Autoscaling Launch Configurations\nThis module was called C(ec2_lc_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_placement_group_facts': 'List EC2 Placement Group(s) details\n\nArguments: names\n\nList details of EC2 Placement Group(s).\nThis module was called C(ec2_placement_group_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_remote_facts': 'Manage logging on network devices\n\nArguments: aggregate, state, name, level, dest, facility, size\n\nRemoved keyword',
 '_ec2_snapshot_facts': 'Gather information about ec2 volume snapshots in AWS\n\nArguments: restorable_by_user_ids, snapshot_ids, filters, owner_ids\n\nGather information about ec2 volume snapshots in AWS\nThis module was called C(ec2_snapshot_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vol_facts': 'Gather information about ec2 volumes in AWS\n\nArguments: filters\n\nGather information about ec2 volumes in AWS\nThis module was called C(ec2_vol_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc': 'Adds, removes or changes procedural languages with a PostgreSQL database\n\nArguments: lang, ssl_mode, force_trust, ca_cert, cascade, session_role, db, login_unix_socket, state, trust, fail_on_drop\n\nRemoved keyword',
 '_ec2_vpc_dhcp_option_facts': 'Gather information about dhcp options sets in AWS\n\nArguments: dhcp_options_ids, filters\n\nGather information about dhcp options sets in AWS\nThis module was called C(ec2_vpc_dhcp_option_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_endpoint_facts': 'Retrieves AWS VPC endpoints details using AWS methods.\n\nArguments: query, vpc_endpoint_ids, filters\n\nGets various details related to AWS VPC Endpoints\nThis module was called C(ec2_vpc_endpoint_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_igw_facts': 'Gather information about internet gateways in AWS\n\nArguments: filters, internet_gateway_ids\n\nGather information about internet gateways in AWS.\nThis module was called C(ec2_vpc_igw_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_nacl_facts': 'Gather information about Network ACLs in an AWS VPC\n\nArguments: nacl_ids, filters\n\nGather information about Network ACLs in an AWS VPC\nThis module was called C(ec2_vpc_nacl_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_nat_gateway_facts': 'Retrieves AWS VPC Managed Nat Gateway details using AWS methods.\n\nArguments: nat_gateway_ids, filters\n\nGets various details related to AWS VPC Managed Nat Gateways\nThis module was called C(ec2_vpc_nat_gateway_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_net_facts': 'Gather information about ec2 VPCs in AWS\n\nArguments: vpc_ids, filters\n\nGather information about ec2 VPCs in AWS\nThis module was called C(ec2_vpc_net_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_peering_facts': 'Retrieves AWS VPC Peering details using AWS methods.\n\nArguments: peer_connection_ids, filters\n\nGets various details related to AWS VPC Peers\nThis module was called C(ec2_vpc_peering_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_route_table_facts': 'Gather information about ec2 VPC route tables in AWS\n\nArguments: filters\n\nGather information about ec2 VPC route tables in AWS\nThis module was called C(ec2_vpc_route_table_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_subnet_facts': 'Gather information about ec2 VPC subnets in AWS\n\nArguments: subnet_ids, filters\n\nGather information about ec2 VPC subnets in AWS\nThis module was called C(ec2_vpc_subnet_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_vgw_facts': 'Gather information about virtual gateways in AWS\n\nArguments: vpn_gateway_ids, filters\n\nGather information about virtual gateways in AWS.\nThis module was called C(ec2_vpc_vgw_facts) before Ansible 2.9. The usage did not change.',
 '_ec2_vpc_vpn_facts': 'Gather information about VPN Connections in AWS.\n\nArguments: filters, vpn_connection_ids\n\nGather information about VPN Connections in AWS.\nThis module was called C(ec2_vpc_vpn_facts) before Ansible 2.9. The usage did not change.',
 '_ecs_service_facts': 'list or describe services in ecs\n\nArguments: cluster, details, service, events\n\nLists or describes services in ecs.\nThis module was called C(ecs_service_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ecs_service_info) module no longer returns C(ansible_facts)!',
 '_ecs_taskdefinition_facts': 'describe a task definition in ecs\n\nArguments: task_definition\n\nDescribes a task definition in ecs.',
 '_efs_facts': 'Get information about Amazon EFS file systems\n\nArguments: id, targets, name, tags\n\nThis module can be used to search Amazon EFS file systems.\nThis module was called C(efs_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(efs_info) module no longer returns C(ansible_facts)!',
 '_elasticache_facts': 'Retrieve information for AWS Elasticache clusters\n\nArguments: name\n\nRetrieve information from AWS Elasticache clusters\nThis module was called C(elasticache_facts) before Ansible 2.9. The usage did not change.',
 '_elb_application_lb_facts': 'Gather information about application ELBs in AWS\n\nArguments: names, load_balancer_arns\n\nGather information about application ELBs in AWS\nThis module was called C(elb_application_lb_facts) before Ansible 2.9. The usage did not change.',
 '_elb_classic_lb_facts': 'Gather information about EC2 Elastic Load Balancers in AWS\n\nArguments: names\n\nGather information about EC2 Elastic Load Balancers in AWS\nThis module was called C(elb_classic_lb_facts) before Ansible 2.9. The usage did not change.',
 '_elb_target_facts': 'Gathers which target groups a target is associated with.\n\nArguments: instance_id, get_unused_target_groups\n\nThis module will search through every target group in a region to find which ones have registered a given instance ID or IP.\nThis module was called C(elb_target_facts) before Ansible 2.9. The usage did not change.',
 '_elb_target_group_facts': 'Gather information about ELB target groups in AWS\n\nArguments: collect_targets_health, target_group_arns, load_balancer_arn, names\n\nGather information about ELB target groups in AWS\nThis module was called C(elb_target_group_facts) before Ansible 2.9. The usage did not change.',
 '_eos_interface': 'Manage Interface on Arista EOS network devices\n\nArguments: neighbors, rx_rate, name, enabled, mtu, delay, state, aggregate, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on Arista EOS network devices.',
 '_eos_l2_interface': 'Manage L2 interfaces on Arista EOS network devices.\n\nArguments: native_vlan, access_vlan, state, trunk_allowed_vlans, name, aggregate, mode\n\nThis module provides declarative management of L2 interfaces on Arista EOS network devices.',
 '_eos_l3_interface': 'Manage L3 interfaces on Arista EOS network devices.\n\nArguments: aggregate, state, ipv4, name, ipv6\n\nThis module provides declarative management of L3 interfaces on Arista EOS network devices.',
 '_eos_linkagg': 'Manage link aggregation groups on Arista EOS network devices\n\nArguments: purge, state, group, mode, members, min_links, aggregate\n\nThis module provides declarative management of link aggregation groups on Arista EOS network devices.',
 '_eos_vlan': 'Manage VLANs on Arista EOS network devices\n\nArguments: delay, name, interfaces, purge, associated_interfaces, state, aggregate, vlan_id\n\nThis module provides declarative management of VLANs on Arista EOS network devices.',
 '_foreman': 'Manage Foreman Resources\n\nArguments: username, verify_ssl, params, password, server_url, entity\n\nAllows the management of Foreman resources inside your Foreman server.',
 '_gcdns_record': 'Creates or removes resource records in Google Cloud DNS\n\nArguments: zone_id, zone, record, service_account_email, ttl, pem_file, record_data, state, credentials_file, project_id, type, overwrite\n\nCreates or removes resource records in Google Cloud DNS.',
 '_gcdns_zone': 'Creates or removes zones in Google Cloud DNS\n\nArguments: state, description, zone, credentials_file, service_account_email, project_id, pem_file\n\nCreates or removes managed zones in Google Cloud DNS.',
 '_gce': 'create or terminate GCE instances\n\nArguments: disks, num_instances, ip_forward, image, service_account_permissions, pem_file, instance_names, machine_type, external_projects, name, disk_size, network, zone, external_ip, service_account_email, tags, persistent_boot_disk, disk_auto_delete, preemptible, state, credentials_file, subnetwork, project_id, image_family, metadata\n\nCreates or terminates Google Compute Engine (GCE) instances.  See U(https://cloud.google.com/compute) for an overview. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.',
 '_gcp_backend_service': 'Create or Destroy a Backend Service.\n\nArguments: protocol, enable_cdn, service_account_email, state, backends, port_name, timeout, credentials_file, healthchecks, backend_service_name, project_id\n\nCreate or Destroy a Backend Service.  See U(https://cloud.google.com/compute/docs/load-balancing/http/backend-service) for an overview. Full install/configuration instructions for the Google Cloud modules can be found in the comments of ansible/test/gce_tests.py.',
 '_gcp_bigquery_dataset_facts': 'Gather info for GCP Dataset\n\nArguments: \n\nGather info for GCP Dataset\nThis module was called C(gcp_bigquery_dataset_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_bigquery_table_facts': 'Gather info for GCP Table\n\nArguments: dataset\n\nGather info for GCP Table\nThis module was called C(gcp_bigquery_table_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_cloudbuild_trigger_facts': 'Gather info for GCP Trigger\n\nArguments: \n\nGather info for GCP Trigger\nThis module was called C(gcp_cloudbuild_trigger_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_address_facts': 'Gather info for GCP Address\n\nArguments: region, filters\n\nGather info for GCP Address\nThis module was called C(gcp_compute_address_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_backend_bucket_facts': 'Gather info for GCP BackendBucket\n\nArguments: filters\n\nGather info for GCP BackendBucket\nThis module was called C(gcp_compute_backend_bucket_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_backend_service_facts': 'Gather info for GCP BackendService\n\nArguments: filters\n\nGather info for GCP BackendService\nThis module was called C(gcp_compute_backend_service_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_disk_facts': 'Gather info for GCP Disk\n\nArguments: filters, zone\n\nGather info for GCP Disk\nThis module was called C(gcp_compute_disk_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_firewall_facts': 'Gather info for GCP Firewall\n\nArguments: filters\n\nGather info for GCP Firewall\nThis module was called C(gcp_compute_firewall_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_forwarding_rule_facts': 'Gather info for GCP ForwardingRule\n\nArguments: region, filters\n\nGather info for GCP ForwardingRule\nThis module was called C(gcp_compute_forwarding_rule_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_global_address_facts': 'Gather info for GCP GlobalAddress\n\nArguments: filters\n\nGather info for GCP GlobalAddress\nThis module was called C(gcp_compute_global_address_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_global_forwarding_rule_facts': 'Gather info for GCP GlobalForwardingRule\n\nArguments: filters\n\nGather info for GCP GlobalForwardingRule\nThis module was called C(gcp_compute_global_forwarding_rule_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_health_check_facts': 'Gather info for GCP HealthCheck\n\nArguments: filters\n\nGather info for GCP HealthCheck\nThis module was called C(gcp_compute_health_check_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_http_health_check_facts': 'Gather info for GCP HttpHealthCheck\n\nArguments: filters\n\nGather info for GCP HttpHealthCheck\nThis module was called C(gcp_compute_http_health_check_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_https_health_check_facts': 'Gather info for GCP HttpsHealthCheck\n\nArguments: filters\n\nGather info for GCP HttpsHealthCheck\nThis module was called C(gcp_compute_https_health_check_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_image_facts': 'Gather info for GCP Image\n\nArguments: filters\n\nGather info for GCP Image\nThis module was called C(gcp_compute_image_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_instance_facts': 'Gather info for GCP Instance\n\nArguments: filters, zone\n\nGather info for GCP Instance\nThis module was called C(gcp_compute_instance_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_instance_group_facts': 'Gather info for GCP InstanceGroup\n\nArguments: filters, zone\n\nGather info for GCP InstanceGroup\nThis module was called C(gcp_compute_instance_group_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_instance_group_manager_facts': 'Gather info for GCP InstanceGroupManager\n\nArguments: filters, zone\n\nGather info for GCP InstanceGroupManager\nThis module was called C(gcp_compute_instance_group_manager_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_instance_template_facts': 'Gather info for GCP InstanceTemplate\n\nArguments: filters\n\nGather info for GCP InstanceTemplate\nThis module was called C(gcp_compute_instance_template_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_interconnect_attachment_facts': 'Gather info for GCP InterconnectAttachment\n\nArguments: region, filters\n\nGather info for GCP InterconnectAttachment\nThis module was called C(gcp_compute_interconnect_attachment_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_network_facts': 'Gather info for GCP Network\n\nArguments: filters\n\nGather info for GCP Network\nThis module was called C(gcp_compute_network_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_region_disk_facts': 'Gather info for GCP RegionDisk\n\nArguments: region, filters\n\nGather info for GCP RegionDisk\nThis module was called C(gcp_compute_region_disk_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_route_facts': 'Gather info for GCP Route\n\nArguments: filters\n\nGather info for GCP Route\nThis module was called C(gcp_compute_route_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_router_facts': 'Gather info for GCP Router\n\nArguments: region, filters\n\nGather info for GCP Router\nThis module was called C(gcp_compute_router_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_ssl_certificate_facts': 'Gather info for GCP SslCertificate\n\nArguments: filters\n\nGather info for GCP SslCertificate\nThis module was called C(gcp_compute_ssl_certificate_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_ssl_policy_facts': 'Gather info for GCP SslPolicy\n\nArguments: filters\n\nGather info for GCP SslPolicy\nThis module was called C(gcp_compute_ssl_policy_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_subnetwork_facts': 'Gather info for GCP Subnetwork\n\nArguments: region, filters\n\nGather info for GCP Subnetwork\nThis module was called C(gcp_compute_subnetwork_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_target_http_proxy_facts': 'Gather info for GCP TargetHttpProxy\n\nArguments: filters\n\nGather info for GCP TargetHttpProxy\nThis module was called C(gcp_compute_target_http_proxy_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_target_https_proxy_facts': 'Gather info for GCP TargetHttpsProxy\n\nArguments: filters\n\nGather info for GCP TargetHttpsProxy\nThis module was called C(gcp_compute_target_https_proxy_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_target_pool_facts': 'Gather info for GCP TargetPool\n\nArguments: region, filters\n\nGather info for GCP TargetPool\nThis module was called C(gcp_compute_target_pool_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_target_ssl_proxy_facts': 'Gather info for GCP TargetSslProxy\n\nArguments: filters\n\nGather info for GCP TargetSslProxy\nThis module was called C(gcp_compute_target_ssl_proxy_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_target_tcp_proxy_facts': 'Gather info for GCP TargetTcpProxy\n\nArguments: filters\n\nGather info for GCP TargetTcpProxy\nThis module was called C(gcp_compute_target_tcp_proxy_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_target_vpn_gateway_facts': 'Gather info for GCP TargetVpnGateway\n\nArguments: region, filters\n\nGather info for GCP TargetVpnGateway\nThis module was called C(gcp_compute_target_vpn_gateway_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_url_map_facts': 'Gather info for GCP UrlMap\n\nArguments: filters\n\nGather info for GCP UrlMap\nThis module was called C(gcp_compute_url_map_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_compute_vpn_tunnel_facts': 'Gather info for GCP VpnTunnel\n\nArguments: region, filters\n\nGather info for GCP VpnTunnel\nThis module was called C(gcp_compute_vpn_tunnel_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_container_cluster_facts': 'Gather info for GCP Cluster\n\nArguments: location\n\nGather info for GCP Cluster\nThis module was called C(gcp_container_cluster_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_container_node_pool_facts': 'Gather info for GCP NodePool\n\nArguments: cluster, location\n\nGather info for GCP NodePool\nThis module was called C(gcp_container_node_pool_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_dns_managed_zone_facts': 'Gather info for GCP ManagedZone\n\nArguments: dns_name\n\nGather info for GCP ManagedZone\nThis module was called C(gcp_dns_managed_zone_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_dns_resource_record_set_facts': 'Gather info for GCP ResourceRecordSet\n\nArguments: managed_zone\n\nGather info for GCP ResourceRecordSet\nThis module was called C(gcp_dns_resource_record_set_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_forwarding_rule': 'Create, Update or Destroy a Forwarding_Rule.\n\nArguments: forwarding_rule_name, port_range, state, protocol, target, address, region\n\nCreate, Update or Destroy a Forwarding_Rule. See U(https://cloud.google.com/compute/docs/load-balancing/http/target-proxies) for an overview. More details on the Global Forwarding_Rule API can be found at U(https://cloud.google.com/compute/docs/reference/latest/globalForwardingRules) More details on the Forwarding Rules API can be found at U(https://cloud.google.com/compute/docs/reference/latest/forwardingRules)',
 '_gcp_healthcheck': 'Create, Update or Destroy a Healthcheck.\n\nArguments: healthcheck_name, healthcheck_type, check_interval, service_account_email, healthy_threshold, service_account_permissions, unhealthy_threshold, host_header, state, timeout, credentials_file, project_id, port, request_path\n\nCreate, Update or Destroy a Healthcheck. Currently only HTTP and HTTPS Healthchecks are supported. Healthchecks are used to monitor individual instances, managed instance groups and/or backend services. Healtchecks are reusable.\nVisit U(https://cloud.google.com/compute/docs/load-balancing/health-checks) for an overview of Healthchecks on GCP.\nSee U(https://cloud.google.com/compute/docs/reference/latest/httpHealthChecks) for API details on HTTP Healthchecks.\nSee U(https://cloud.google.com/compute/docs/reference/latest/httpsHealthChecks) for more details on the HTTPS Healtcheck API.',
 '_gcp_iam_role_facts': 'Gather info for GCP Role\n\nArguments: \n\nGather info for GCP Role\nThis module was called C(gcp_iam_role_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_iam_service_account_facts': 'Gather info for GCP ServiceAccount\n\nArguments: \n\nGather info for GCP ServiceAccount\nThis module was called C(gcp_iam_service_account_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_pubsub_subscription_facts': 'Gather info for GCP Subscription\n\nArguments: \n\nGather info for GCP Subscription\nThis module was called C(gcp_pubsub_subscription_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_pubsub_topic_facts': 'Gather info for GCP Topic\n\nArguments: \n\nGather info for GCP Topic\nThis module was called C(gcp_pubsub_topic_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_redis_instance_facts': 'Gather info for GCP Instance\n\nArguments: region\n\nGather info for GCP Instance\nThis module was called C(gcp_redis_instance_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_resourcemanager_project_facts': 'Gather info for GCP Project\n\nArguments: \n\nGather info for GCP Project\nThis module was called C(gcp_resourcemanager_project_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_sourcerepo_repository_facts': 'Gather info for GCP Repository\n\nArguments: \n\nGather info for GCP Repository\nThis module was called C(gcp_sourcerepo_repository_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_spanner_database_facts': 'Gather info for GCP Database\n\nArguments: instance\n\nGather info for GCP Database\nThis module was called C(gcp_spanner_database_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_spanner_instance_facts': 'Gather info for GCP Instance\n\nArguments: \n\nGather info for GCP Instance\nThis module was called C(gcp_spanner_instance_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_sql_database_facts': 'Gather info for GCP Database\n\nArguments: instance\n\nGather info for GCP Database\nThis module was called C(gcp_sql_database_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_sql_instance_facts': 'Gather info for GCP Instance\n\nArguments: \n\nGather info for GCP Instance\nThis module was called C(gcp_sql_instance_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_sql_user_facts': 'Gather info for GCP User\n\nArguments: instance\n\nGather info for GCP User\nThis module was called C(gcp_sql_user_facts) before Ansible 2.9. The usage has not changed.',
 '_gcp_target_proxy': 'Create, Update or Destroy a Target_Proxy.\n\nArguments: target_proxy_type, target_proxy_name, url_map_name\n\nCreate, Update or Destroy a Target_Proxy. See U(https://cloud.google.com/compute/docs/load-balancing/http/target-proxies) for an overview. More details on the Target_Proxy API can be found at U(https://cloud.google.com/compute/docs/reference/latest/targetHttpProxies#resource-representations).',
 '_gcp_tpu_node_facts': 'Gather info for GCP Node\n\nArguments: zone\n\nGather info for GCP Node',
 '_gcp_url_map': 'Create, Update or Destroy a Url_Map.\n\nArguments: default_service, host_rules, url_map_name, path_matchers\n\nCreate, Update or Destroy a Url_Map. See U(https://cloud.google.com/compute/docs/load-balancing/http/url-map) for an overview. More details on the Url_Map API can be found at U(https://cloud.google.com/compute/docs/reference/latest/urlMaps#resource).',
 '_gcpubsub_facts': 'List Topics/Subscriptions and Messages from Google PubSub.\n\nArguments: topic, state, view\n\nList Topics/Subscriptions from Google PubSub.  Use the gcpubsub module for topic/subscription management. See U(https://cloud.google.com/pubsub/docs) for an overview.\nThis module was called C(gcpubsub_facts) before Ansible 2.9. The usage did not change.',
 '_gcspanner': 'Create and Delete Instances/Databases on Spanner\n\nArguments: instance_id, state, instance_display_name, database_name, configuration, force_instance_delete, node_count\n\nCreate and Delete Instances/Databases on Spanner. See U(https://cloud.google.com/spanner/docs) for an overview.',
 '_github_hooks': 'Manages GitHub service hooks.\n\nArguments: repo, oauthkey, user, content_type, action, validate_certs, hookurl\n\nAdds service hooks and removes service hooks that have an error status.',
 '_github_webhook_facts': 'Query information about GitHub webhooks\n\nArguments: github_url, token, password, user, repository\n\nQuery information about GitHub webhooks\nThis module was called C(github_webhook_facts) before Ansible 2.9. The usage did not change.',
 '_gitlab_hooks': 'Manages GitLab project hooks.\n\nArguments: hook_validate_certs, hook_url, job_events, tag_push_events, note_events, state, project, issues_events, token, push_events, merge_requests_events, api_token, pipeline_events, wiki_page_events\n\nAdds, updates and removes project hook',
 '_gluster_heal_facts': 'Gather information on self-heal or rebalance status\n\nArguments: name, status_filter\n\nGather facts about either self-heal or rebalance status.\nThis module was called C(gluster_heal_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(gluster_heal_info) module no longer returns C(ansible_facts)!',
 '_hcloud_datacenter_facts': 'Gather info about the Hetzner Cloud datacenters.\n\nArguments: id, name\n\nGather info about your Hetzner Cloud datacenters.\nThis module was called C(hcloud_datacenter_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_datacenter_facts). Note that the M(hcloud_datacenter_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_datacenter_info)!',
 '_hcloud_floating_ip_facts': 'Gather infos about the Hetzner Cloud Floating IPs.\n\nArguments: label_selector, id\n\nGather facts about your Hetzner Cloud Floating IPs.\nThis module was called C(hcloud_floating_ip_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_floating_ip_facts). Note that the M(hcloud_floating_ip_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_floating_ip_info)!',
 '_hcloud_image_facts': 'Gather infos about your Hetzner Cloud images.\n\nArguments: label_selector, type, id, name\n\nGather infos about your Hetzner Cloud images.\nThis module was called C(hcloud_location_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_location_facts). Note that the M(hcloud_image_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_image_info)!',
 '_hcloud_location_facts': 'Gather infos about your Hetzner Cloud locations.\n\nArguments: id, name\n\nGather infos about your Hetzner Cloud locations.\nThis module was called C(hcloud_location_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_location_facts). Note that the M(hcloud_location_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_location_info)!',
 '_hcloud_server_facts': 'Gather infos about your Hetzner Cloud servers.\n\nArguments: label_selector, id, name\n\nGather infos about your Hetzner Cloud servers.\nThis module was called C(hcloud_server_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_server_facts). Note that the M(hcloud_server_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_server_info)!',
 '_hcloud_server_type_facts': 'Gather infos about the Hetzner Cloud server types.\n\nArguments: id, name\n\nGather infos about your Hetzner Cloud server types.\nThis module was called C(hcloud_server_type_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_server_type_facts). Note that the M(hcloud_server_type_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_server_type_info)!',
 '_hcloud_ssh_key_facts': 'Gather infos about your Hetzner Cloud ssh_keys.\n\nArguments: label_selector, id, name, fingerprint\n\nGather facts about your Hetzner Cloud ssh_keys.\nThis module was called C(hcloud_ssh_key_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_ssh_key_facts). Note that the M(hcloud_ssh_key_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_ssh_key_info)!',
 '_hcloud_volume_facts': 'Gather infos about your Hetzner Cloud volumes.\n\nArguments: label_selector, id, name\n\nGather infos about your Hetzner Cloud volumes.',
 '_hpilo_facts': 'Gather information through an HP iLO interface\n\nArguments: host, password, ssl_version, login\n\nThis module gathers information on a specific system using its HP iLO interface. These information includes hardware and network related information useful for provisioning (e.g. macaddress, uuid).\nThis module requires the C(hpilo) python module.\nThis module was called C(hpilo_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(hpilo_info) module no longer returns C(ansible_facts)!',
 '_iam_cert_facts': 'Retrieve the information of a server certificate\n\nArguments: name\n\nRetrieve the attributes of a server certificate\nThis module was called C(iam_server_certificate_facts) before Ansible 2.9. The usage did not change.',
 '_iam_mfa_device_facts': 'List the MFA (Multi-Factor Authentication) devices registered for a user\n\nArguments: user_name\n\nList the MFA (Multi-Factor Authentication) devices registered for a user\nThis module was called C(iam_mfa_device_facts) before Ansible 2.9. The usage did not change.',
 '_iam_role_facts': 'Gather information on IAM roles\n\nArguments: name, path_prefix\n\nGathers information about IAM roles\nThis module was called C(iam_role_facts) before Ansible 2.9. The usage did not change.',
 '_iam_server_certificate_facts': 'Retrieve the information of a server certificate\n\nArguments: name\n\nRetrieve the attributes of a server certificate\nThis module was called C(iam_server_certificate_facts) before Ansible 2.9. The usage did not change.',
 '_idrac_redfish_facts': 'Manages servers through iDRAC using Dell Redfish APIs\n\nArguments: category, username, command, timeout, baseuri, password\n\nBuilds Redfish URIs locally and sends them to remote iDRAC controllers to get information back.\nFor use with Dell iDRAC operations that require Redfish OEM extensions\nThis module was called C(idrac_redfish_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(idrac_redfish_info) module no longer returns C(ansible_facts)!',
 '_intersight_facts': 'Gather information about Intersight\n\nArguments: server_names\n\nGathers information about servers in L(Cisco Intersight,https://intersight.com).\nThis module was called C(intersight_facts) before Ansible 2.9. The usage did not change.',
 '_ios_interface': 'Manage Interface on Cisco IOS network devices\n\nArguments: neighbors, rx_rate, name, duplex, enabled, mtu, delay, state, aggregate, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on Cisco IOS network devices.',
 '_ios_l2_interface': 'Manage Layer-2 interface on Cisco IOS devices.\n\nArguments: native_vlan, access_vlan, name, trunk_vlans, state, trunk_allowed_vlans, mode, aggregate\n\nThis module provides declarative management of Layer-2 interfaces on Cisco IOS devices.',
 '_ios_l3_interface': 'Manage Layer-3 interfaces on Cisco IOS network devices.\n\nArguments: aggregate, state, ipv4, name, ipv6\n\nThis module provides declarative management of Layer-3 interfaces on IOS network devices.',
 '_ios_vlan': 'Manage VLANs on IOS network devices\n\nArguments: delay, name, interfaces, purge, associated_interfaces, state, aggregate, vlan_id\n\nThis module provides declarative management of VLANs on Cisco IOS network devices.',
 '_iosxr_interface': 'Manage Interface on Cisco IOS XR network devices\n\nArguments: rx_rate, name, duplex, enabled, mtu, delay, active, state, aggregate, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on Cisco IOS XR network devices.',
 '_jenkins_job_facts': 'Get information about Jenkins jobs\n\nArguments: name, color, glob, url, token, user, password, validate_certs\n\nThis module can be used to query information about which Jenkins jobs which already exists.\nThis module was called C(jenkins_job_info) before Ansible 2.9. The usage did not change.',
 '_junos_interface': 'Manage Interface on Juniper JUNOS network devices\n\nArguments: neighbors, rx_rate, name, duplex, enabled, mtu, delay, aggregate, state, active, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on Juniper JUNOS network devices.',
 '_junos_l2_interface': 'Manage Layer-2 interface on Juniper JUNOS network devices\n\nArguments: native_vlan, access_vlan, filter_output, name, filter_input, trunk_vlans, enhanced_layer, aggregate, state, mode, active, unit, description\n\nThis module provides declarative management of Layer-2 interface on Juniper JUNOS network devices.',
 '_junos_l3_interface': 'Manage L3 interfaces on Juniper JUNOS network devices\n\nArguments: filter_output, name, filter6_input, filter_input, aggregate, state, ipv4, ipv6, active, unit, filter6_output\n\nThis module provides declarative management of L3 interfaces on Juniper JUNOS network devices.',
 '_junos_linkagg': 'Manage link aggregation groups on Juniper JUNOS network devices\n\nArguments: description, device_count, aggregate, state, mode, members, min_links, active, name\n\nThis module provides declarative management of link aggregation groups on Juniper JUNOS network devices.',
 '_junos_lldp': 'Manage LLDP configuration on Juniper JUNOS network devices\n\nArguments: active, state, interval, hold_multiplier, transmit_delay\n\nThis module provides declarative management of LLDP service on Juniper JUNOS network devices.',
 '_junos_lldp_interface': 'Manage LLDP interfaces configuration on Juniper JUNOS network devices\n\nArguments: active, state, name\n\nThis module provides declarative management of LLDP interfaces configuration on Juniper JUNOS network devices.',
 '_junos_vlan': 'Manage VLANs on Juniper JUNOS network devices\n\nArguments: filter_output, name, interfaces, filter_input, aggregate, state, l3_interface, active, vlan_id, description\n\nThis module provides declarative management of VLANs on Juniper JUNOS network devices.',
 '_k8s_facts': 'Describe Kubernetes (K8s) objects\n\nArguments: kind, field_selectors, name, namespace, label_selectors, api_version\n\nUse the OpenShift Python client to perform read operations on K8s objects.\nAccess to the full range of K8s APIs.\nAuthenticate using either a config file, certificates, password or token.\nSupports check mode.\nThis module was called C(k8s_facts) before Ansible 2.9. The usage did not change.',
 '_k8s_raw': 'Manage Kubernetes (K8s) objects\n\nArguments: append_hash, merge_type, wait_sleep, wait_condition, wait_timeout, apply, validate, wait\n\nUse the OpenShift Python client to perform CRUD operations on K8s objects.\nPass the object definition from a source file or inline. See examples for reading files and using Jinja templates or vault-encrypted files.\nAccess to the full range of K8s APIs.\nUse the M(k8s_info) module to obtain a list of items about an object of type C(kind)\nAuthenticate using either a config file, certificates, password or token.\nSupports check mode.',
 '_katello': 'Manage Katello Resources\n\nArguments: username, server_url, entity, verify_ssl, params, action, password, task_timeout\n\nAllows the management of Katello resources inside your Foreman server.',
 '_kubernetes': 'Manages log destinations on a BIG-IP.\n\nArguments: protocol, description, pool_settings, transport_profile, syslog_format, forward_to, address, server_ssl_profile, port, pool, name, syslog_settings, partition, template_delete_delay, state, distribution, type, template_retransmit_interval\n\nRemoved keyword',
 '_lambda_facts': 'Gathers AWS Lambda function details as Ansible facts\n\nArguments: query, event_source_arn, function_name\n\nGathers various details related to Lambda functions, including aliases, versions and event source mappings. Use module M(lambda) to manage the lambda function itself, M(lambda_alias) to manage function aliases and M(lambda_event) to manage lambda event source mappings.',
 '_letsencrypt': "Create SSL/TLS certificates with the ACME protocol\n\nArguments: force, account_email, dest, remaining_days, challenge, fullchain_dest, modify_account, agreement, data, retrieve_all_alternates, terms_agreed, csr, chain_dest, deactivate_authzs\n\nCreate and renew SSL/TLS certificates with a CA supporting the L(ACME protocol,https://tools.ietf.org/html/rfc8555), such as L(Let's Encrypt,https://letsencrypt.org/) or L(Buypass,https://www.buypass.com/). The current implementation supports the C(http-01), C(dns-01) and C(tls-alpn-01) challenges.\nTo use this module, it has to be executed twice. Either as two different tasks in the same run or during two runs. Note that the output of the first run needs to be recorded and passed to the second run as the module argument C(data).\nBetween these two tasks you have to fulfill the required steps for the chosen challenge by whatever means necessary. For C(http-01) that means creating the necessary challenge file on the destination webserver. For C(dns-01) the necessary dns record has to be created. For C(tls-alpn-01) the necessary certificate has to be created and served. It is I(not) the responsibility of this module to perform these steps.\nFor details on how to fulfill these challenges, you might have to read through L(the main ACME specification,https://tools.ietf.org/html/rfc8555#section-8) and the L(TLS-ALPN-01 specification,https://www.rfc-editor.org/rfc/rfc8737.html#section-3). Also, consider the examples provided for this module.\nThe module includes experimental support for IP identifiers according to the L(RFC 8738,https://www.rfc-editor.org/rfc/rfc8738.html).",
 '_memset_memstore_facts': 'Retrieve Memstore product usage information.\n\nArguments: api_key, name\n\nRetrieve Memstore product usage information.\nThis module was called C(memset_memstore_facts) before Ansible 2.9. The usage did not change.',
 '_memset_server_facts': 'Retrieve server information.\n\nArguments: api_key, name\n\nRetrieve server information.\nThis module was called C(memset_server_facts) before Ansible 2.9. The usage did not change.',
 '_na_cdot_aggregate': 'Manage NetApp cDOT aggregates.\n\nArguments: state, name, disk_count\n\nCreate or destroy aggregates on NetApp cDOT.',
 '_na_cdot_license': 'Manage NetApp cDOT protocol and feature licenses\n\nArguments: remove_expired, serial_number, licenses, remove_unused\n\nAdd or remove licenses on NetApp ONTAP.',
 '_na_cdot_lun': 'Manage  NetApp cDOT luns\n\nArguments: force_remove, name, flexvol_name, size_unit, vserver, state, force_resize, force_remove_fenced, size\n\nCreate, destroy, resize luns on NetApp cDOT.',
 '_na_cdot_qtree': 'Manage qtrees\n\nArguments: vserver, state, name, flexvol_name\n\nCreate or destroy Qtrees.',
 '_na_cdot_svm': 'Manage NetApp cDOT svm\n\nArguments: state, root_volume, root_volume_aggregate, name, root_volume_security_style\n\nCreate or destroy svm on NetApp cDOT',
 '_na_cdot_user': 'useradmin configuration and management\n\nArguments: vserver, application, state, role_name, name, authentication_method, set_password\n\nCreate or destroy users.',
 '_na_cdot_user_role': 'useradmin configuration and management\n\nArguments: vserver, access_level, state, name, command_directory_name\n\nCreate or destroy user roles',
 '_na_cdot_volume': 'Manage NetApp cDOT volumes\n\nArguments: export_policy, name, size_unit, vserver, state, junction_path, snapshot_policy, online, infinite, aggregate_name, size\n\nCreate or destroy volumes on NetApp cDOT',
 '_na_ontap_gather_facts': 'NetApp information gatherer\n\nArguments: state, gather_subset\n\nThis module allows you to gather various information about ONTAP configuration',
 '_net_banner': 'Manage multiline banners on network devices\n\nArguments: text, state, banner\n\nThis will configure both login and motd banners on network devices. It allows playbooks to add or remove banner text from the active running configuration.',
 '_net_interface': 'Manage Interface on network devices\n\nArguments: rx_rate, name, duplex, enabled, mtu, delay, purge, state, aggregate, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on network devices.',
 '_net_l2_interface': 'Manage Layer-2 interface on network devices\n\nArguments: native_vlan, access_vlan, name, trunk_vlans, state, trunk_allowed_vlans, mode, aggregate\n\nThis module provides declarative management of Layer-2 interface on network devices.',
 '_net_l3_interface': 'Manage L3 interfaces on network devices\n\nArguments: purge, state, name, ipv6, aggregate, ipv4\n\nThis module provides declarative management of L3 interfaces on network devices.',
 '_net_linkagg': 'Manage link aggregation groups on network devices\n\nArguments: purge, state, name, members, min_links, aggregate, mode\n\nThis module provides declarative management of link aggregation groups on network devices.',
 '_net_lldp': 'Manage LLDP service configuration on network devices\n\nArguments: state\n\nThis module provides declarative management of LLDP service configuration on network devices.',
 '_net_lldp_interface': 'Manage LLDP interfaces configuration on network devices\n\nArguments: aggregate, purge, state, name\n\nThis module provides declarative management of LLDP interfaces configuration on network devices.',
 '_net_logging': 'Manage logging on network devices\n\nArguments: purge, aggregate, state, name, level, dest, facility\n\nThis module provides declarative management of logging on network devices.',
 '_net_static_route': 'Manage static IP routes on network appliances (routers, switches et. al.)\n\nArguments: purge, state, next_hop, aggregate, mask, prefix, admin_distance\n\nThis module provides declarative management of static IP routes on network appliances (routers, switches et. al.).',
 '_net_system': 'Manage the system attributes on network devices\n\nArguments: state, lookup_source, name_servers, domain_search, hostname, domain_name\n\nThis module provides declarative management of node system attributes on network devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 '_net_user': 'Manage the aggregate of local users on network device\n\nArguments: update_password, configured_password, aggregate, name, purge, privilege, state, role, nopassword, sshkey\n\nThis module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.',
 '_net_vlan': 'Manage VLANs on network devices\n\nArguments: purge, state, name, aggregate, interfaces, vlan_id\n\nThis module provides declarative management of VLANs on network devices.',
 '_net_vrf': 'Manage VRFs on network devices\n\nArguments: aggregate, purge, interfaces, name, state\n\nThis module provides declarative management of VRFs on network devices.',
 '_netscaler': 'Gather info for GCP TargetHttpsProxy\n\nArguments: filters\n\nRemoved keyword',
 '_nginx_status_facts': 'Retrieve nginx status facts.\n\nArguments: url, timeout\n\nGathers facts from nginx from an URL having C(stub_status) enabled.',
 '_nxos_interface': 'Manages physical attributes of interfaces.\n\nArguments: neighbors, description, ip_forward, interface_type, rx_rate, admin_state, aggregate, speed, tx_rate, name, fabric_forwarding_anycast_gateway, duplex, mtu, delay, state, mode\n\nManages physical attributes of interfaces of NX-OS switches.',
 '_nxos_ip_interface': 'NetApp E-Series set or update the password for a storage array.\n\nArguments: ssid, name, new_password, api_password, current_password, api_username, validate_certs, set_admin, api_url\n\nRemoved keyword',
 '_nxos_l2_interface': 'Manage Layer-2 interface on Cisco NXOS devices.\n\nArguments: native_vlan, access_vlan, name, trunk_vlans, state, trunk_allowed_vlans, mode, aggregate\n\nThis module provides declarative management of Layer-2 interface on Cisco NXOS devices.',
 '_nxos_l3_interface': 'Manage L3 interfaces on Cisco NXOS network devices\n\nArguments: aggregate, state, ipv4, name, ipv6\n\nThis module provides declarative management of L3 interfaces on Cisco NXOS network devices.',
 '_nxos_linkagg': 'Manage link aggregation groups on Cisco NXOS devices.\n\nArguments: force, purge, state, mode, members, min_links, aggregate, group\n\nThis module provides declarative management of link aggregation groups on Cisco NXOS devices.',
 '_nxos_mtu': 'Manage AWS API Gateway APIs\n\nArguments: swagger_file, state, swagger_text, swagger_dict, deploy_desc, api_id, stage\n\nRemoved keyword',
 '_nxos_portchannel': 'Manage a datastore on ESXi host\n\nArguments: datacenter_name, vmfs_version, nfs_path, nfs_ro, state, esxi_hostname, datastore_type, nfs_server, vmfs_device_name, datastore_name\n\nRemoved keyword',
 '_nxos_switchport': 'NetApp ONTAP LIF configuration\n\nArguments: force_subnet_association, failover_policy, netmask, address, home_port, is_auto_revert, protocols, is_dns_update_enabled, firewall_policy, home_node, dns_domain_name, listen_for_dns_query, admin_status, vserver, state, role, subnet_name, interface_name\n\nRemoved keyword',
 '_nxos_vlan': 'Manages VLAN resources and attributes.\n\nArguments: purge, vlan_state, name, interfaces, mapped_vni, delay, associated_interfaces, state, admin_state, mode, aggregate, vlan_range, vlan_id\n\nManages VLAN configurations on NX-OS switches.',
 '_oc': 'copies an EC2 snapshot and returns the new Snapshot ID.\n\nArguments: description, tags, encrypted, kms_key_id, wait_timeout, source_region, source_snapshot_id, wait\n\nRemoved keyword',
 '_one_image_facts': 'Gather information on OpenNebula images\n\nArguments: api_username, api_password, ids, name, api_url\n\nGather information on OpenNebula images.\nThis module was called C(one_image_facts) before Ansible 2.9. The usage did not change.',
 '_onepassword_facts': 'Gather items from 1Password\n\nArguments: cli_path, search_terms, auto_login\n\nM(onepassword_info) wraps the C(op) command line utility to fetch data about one or more 1Password items.\nA fatal error occurs if any of the items being searched for can not be found.\nRecommend using with the C(no_log) option to avoid logging the values of the secrets being retrieved.\nThis module was called C(onepassword_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(onepassword_info) module no longer returns C(ansible_facts)! You must now use the C(register) option to use the facts in other tasks.',
 '_oneview_datacenter_facts': 'Retrieve information about the OneView Data Centers\n\nArguments: name, options\n\nRetrieve information about the OneView Data Centers.\nThis module was called C(oneview_datacenter_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_datacenter_info) module no longer returns C(ansible_facts)!',
 '_oneview_enclosure_facts': 'Retrieve information about one or more Enclosures\n\nArguments: name, options\n\nRetrieve information about one or more of the Enclosures from OneView.\nThis module was called C(oneview_enclosure_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_enclosure_info) module no longer returns C(ansible_facts)!',
 '_oneview_ethernet_network_facts': 'Retrieve the information about one or more of the OneView Ethernet Networks\n\nArguments: name, options\n\nRetrieve the information about one or more of the Ethernet Networks from OneView.\nThis module was called C(oneview_ethernet_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_ethernet_network_info) module no longer returns C(ansible_facts)!',
 '_oneview_fc_network_facts': 'Retrieve the information about one or more of the OneView Fibre Channel Networks\n\nArguments: name\n\nRetrieve the information about one or more of the Fibre Channel Networks from OneView.\nThis module was called C(oneview_fc_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_fc_network_info) module no longer returns C(ansible_facts)!',
 '_oneview_fcoe_network_facts': 'Retrieve the information about one or more of the OneView FCoE Networks\n\nArguments: name\n\nRetrieve the information about one or more of the FCoE Networks from OneView.\nThis module was called C(oneview_fcoe_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_fcoe_network_info) module no longer returns C(ansible_facts)!',
 '_oneview_logical_interconnect_group_facts': 'Retrieve information about one or more of the OneView Logical Interconnect Groups\n\nArguments: name\n\nRetrieve information about one or more of the Logical Interconnect Groups from OneView\nThis module was called C(oneview_logical_interconnect_group_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_logical_interconnect_group_info) module no longer returns C(ansible_facts)!',
 '_oneview_network_set_facts': 'Retrieve information about the OneView Network Sets\n\nArguments: name, options\n\nRetrieve information about the Network Sets from OneView.\nThis module was called C(oneview_network_set_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_network_set_info) module no longer returns C(ansible_facts)!',
 '_oneview_san_manager_facts': 'Retrieve information about one or more of the OneView SAN Managers\n\nArguments: provider_display_name, params\n\nRetrieve information about one or more of the SAN Managers from OneView\nThis module was called C(oneview_san_manager_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_san_manager_info) module no longer returns C(ansible_facts)!',
 '_online_server_facts': 'Gather facts about Online servers.\n\nArguments: \n\nGather facts about the servers.\nU(https://www.online.net/en/dedicated-server)',
 '_online_user_facts': 'Gather facts about Online user.\n\nArguments: \n\nGather facts about the user.',
 '_openshift_raw': 'Manage Kubernetes (K8s) objects\n\nArguments: append_hash, merge_type, wait_sleep, wait_condition, wait_timeout, apply, validate, wait\n\nUse the OpenShift Python client to perform CRUD operations on K8s objects.\nPass the object definition from a source file or inline. See examples for reading files and using Jinja templates or vault-encrypted files.\nAccess to the full range of K8s APIs.\nUse the M(k8s_info) module to obtain a list of items about an object of type C(kind)\nAuthenticate using either a config file, certificates, password or token.\nSupports check mode.',
 '_openshift_scale': 'Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.\n\nArguments: \n\nSimilar to the kubectl scale command. Use to set the number of replicas for a Deployment, ReplicaSet, or Replication Controller, or the parallelism attribute of a Job. Supports check mode.',
 '_os_flavor_facts': 'Retrieve information about one or more flavors\n\nArguments: vcpus, limit, name, availability_zone, ram, ephemeral\n\nRetrieve information about available OpenStack instance flavors. By default, information about ALL flavors are retrieved. Filters can be applied to get information for only matching flavors. For example, you can filter on the amount of RAM available to the flavor, or the number of virtual CPUs available to the flavor, or both. When specifying multiple filters, *ALL* filters must match on a flavor before that flavor is returned as a fact.\nThis module was called C(os_flavor_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_flavor_info) module no longer returns C(ansible_facts)!',
 '_os_image_facts': 'Retrieve information about an image within OpenStack.\n\nArguments: image, properties, availability_zone\n\nRetrieve information about a image image from OpenStack.\nThis module was called C(os_image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_image_info) module no longer returns C(ansible_facts)!',
 '_os_keystone_domain_facts': 'Retrieve information about one or more OpenStack domains\n\nArguments: name, filters, availability_zone\n\nRetrieve information about a one or more OpenStack domains\nThis module was called C(os_keystone_domain_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_keystone_domain_info) module no longer returns C(ansible_facts)!',
 '_os_networks_facts': 'Retrieve information about one or more OpenStack networks.\n\nArguments: name, filters, availability_zone\n\nRetrieve information about one or more networks from OpenStack.\nThis module was called C(os_networks_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_networks_info) module no longer returns C(ansible_facts)!',
 '_os_port_facts': 'Retrieve information about ports within OpenStack.\n\nArguments: port, filters, availability_zone\n\nRetrieve information about ports from OpenStack.\nThis module was called C(os_port_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_port_info) module no longer returns C(ansible_facts)!',
 '_os_project_facts': 'Retrieve information about one or more OpenStack projects\n\nArguments: domain, name, filters, availability_zone\n\nRetrieve information about a one or more OpenStack projects\nThis module was called C(os_project_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_project_info) module no longer returns C(ansible_facts)!',
 '_os_server_actions': 'Gathers Vertica database facts.\n\nArguments: login_user, cluster, db, port, login_password\n\nRemoved keyword',
 '_os_server_facts': 'Retrieve information about one or more compute instances\n\nArguments: detailed, server, filters, all_projects, availability_zone\n\nRetrieve information about server instances from OpenStack.\nThis module was called C(os_server_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_server_info) module no longer returns C(ansible_facts)!',
 '_os_subnets_facts': 'Retrieve information about one or more OpenStack subnets.\n\nArguments: name, filters, availability_zone\n\nRetrieve information about one or more subnets from OpenStack.\nThis module was called C(os_subnets_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_subnets_info) module no longer returns C(ansible_facts)!',
 '_os_user_facts': 'Retrieve information about one or more OpenStack users\n\nArguments: domain, name, filters, availability_zone\n\nRetrieve information about a one or more OpenStack users\nThis module was called C(os_user_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_user_info) module no longer returns C(ansible_facts)!',
 '_osx_say': 'Makes a computer to speak.\n\nArguments: msg, voice\n\nmakes a computer speak! Amuse your friends, annoy your coworkers!',
 '_ovirt_affinity_label_facts': 'Retrieve information about one or more oVirt/RHV affinity labels\n\nArguments: host, name, vm\n\nRetrieve information about one or more oVirt/RHV affinity labels.\nThis module was called C(ovirt_affinity_label_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_affinity_label_info) module no longer returns C(ansible_facts)!',
 '_ovirt_api_facts': 'Retrieve information about the oVirt/RHV API\n\nArguments: \n\nRetrieve information about the oVirt/RHV API.\nThis module was called C(ovirt_api_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_api_info) module no longer returns C(ansible_facts)!',
 '_ovirt_cluster_facts': 'Retrieve information about one or more oVirt/RHV clusters\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV clusters.\nThis module was called C(ovirt_cluster_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_cluster_info) module no longer returns C(ansible_facts)!',
 '_ovirt_datacenter_facts': 'Retrieve information about one or more oVirt/RHV datacenters\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV datacenters.\nThis module was called C(ovirt_datacenter_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_datacenter_info) module no longer returns C(ansible_facts)!',
 '_ovirt_disk_facts': 'Retrieve information about one or more oVirt/RHV disks\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV disks.\nThis module was called C(ovirt_disk_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_disk_info) module no longer returns C(ansible_facts)!',
 '_ovirt_event_facts': 'This module can be used to retrieve information about one or more oVirt/RHV events\n\nArguments: headers, search, query, max, from_, wait, case_sensitive\n\nRetrieve information about one or more oVirt/RHV events.\nThis module was called C(ovirt_event_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_event_info) module no longer returns C(ansible_facts)!',
 '_ovirt_external_provider_facts': 'Retrieve information about one or more oVirt/RHV external providers\n\nArguments: type, name\n\nRetrieve information about one or more oVirt/RHV external providers.\nThis module was called C(ovirt_external_provider_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_external_provider_info) module no longer returns C(ansible_facts)!',
 '_ovirt_group_facts': 'Retrieve information about one or more oVirt/RHV groups\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV groups.\nThis module was called C(ovirt_group_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_group_info) module no longer returns C(ansible_facts)!',
 '_ovirt_host_facts': 'Retrieve information about one or more oVirt/RHV hosts\n\nArguments: all_content, pattern, cluster_version\n\nRetrieve information about one or more oVirt/RHV hosts.\nThis module was called C(ovirt_host_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_host_info) module no longer returns C(ansible_facts)!',
 '_ovirt_host_storage_facts': 'Retrieve information about one or more oVirt/RHV HostStorages (applicable only for block storage)\n\nArguments: fcp, host, iscsi\n\nRetrieve information about one or more oVirt/RHV HostStorages (applicable only for block storage).\nThis module was called C(ovirt_host_storage_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_host_storage_info) module no longer returns C(ansible_facts)!',
 '_ovirt_network_facts': 'Retrieve information about one or more oVirt/RHV networks\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV networks.\nThis module was called C(ovirt_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_network_info) module no longer returns C(ansible_facts)!',
 '_ovirt_nic_facts': 'Retrieve information about one or more oVirt/RHV virtual machine network interfaces\n\nArguments: vm, name\n\nRetrieve information about one or more oVirt/RHV virtual machine network interfaces.\nThis module was called C(ovirt_nic_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_nic_info) module no longer returns C(ansible_facts)!',
 '_ovirt_permission_facts': 'Retrieve information about one or more oVirt/RHV permissions\n\nArguments: namespace, group_name, authz_name, user_name\n\nRetrieve information about one or more oVirt/RHV permissions.\nThis module was called C(ovirt_permission_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_permission_info) module no longer returns C(ansible_facts)!',
 '_ovirt_quota_facts': 'Retrieve information about one or more oVirt/RHV quotas\n\nArguments: name, data_center\n\nRetrieve information about one or more oVirt/RHV quotas.\nThis module was called C(ovirt_quota_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_quota_info) module no longer returns C(ansible_facts)!',
 '_ovirt_scheduling_policy_facts': 'Retrieve information about one or more oVirt scheduling policies\n\nArguments: id, name\n\nRetrieve information about one or more oVirt scheduling policies.\nThis module was called C(ovirt_scheduling_policy_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_scheduling_policy_info) module no longer returns C(ansible_facts)!',
 '_ovirt_snapshot_facts': 'Retrieve information about one or more oVirt/RHV virtual machine snapshots\n\nArguments: description, vm, snapshot_id\n\nRetrieve information about one or more oVirt/RHV virtual machine snapshots.\nThis module was called C(ovirt_snapshot_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_snapshot_info) module no longer returns C(ansible_facts)!',
 '_ovirt_storage_domain_facts': 'Retrieve information about one or more oVirt/RHV storage domains\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV storage domains.\nThis module was called C(ovirt_storage_domain_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_storage_domain_info) module no longer returns C(ansible_facts)!',
 '_ovirt_storage_template_facts': 'Retrieve information about one or more oVirt/RHV templates relate to a storage domain.\n\nArguments: unregistered, storage_domain, max\n\nRetrieve information about one or more oVirt/RHV templates relate to a storage domain.\nThis module was called C(ovirt_storage_template_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_storage_template_info) module no longer returns C(ansible_facts)!',
 '_ovirt_storage_vm_facts': 'Retrieve information about one or more oVirt/RHV virtual machines relate to a storage domain.\n\nArguments: unregistered, storage_domain, max\n\nRetrieve information about one or more oVirt/RHV virtual machines relate to a storage domain.\nThis module was called C(ovirt_storage_vm_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_storage_vm_info) module no longer returns C(ansible_facts)!',
 '_ovirt_tag_facts': 'Retrieve information about one or more oVirt/RHV tags\n\nArguments: host, name, vm\n\nRetrieve information about one or more oVirt/RHV tags.\nThis module was called C(ovirt_tag_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_tag_info) module no longer returns C(ansible_facts)!',
 '_ovirt_template_facts': 'Retrieve information about one or more oVirt/RHV templates\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV templates.\nThis module was called C(ovirt_template_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_template_info) module no longer returns C(ansible_facts)!',
 '_ovirt_user_facts': 'Retrieve information about one or more oVirt/RHV users\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV users.\nThis module was called C(ovirt_user_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_user_info) module no longer returns C(ansible_facts)!',
 '_ovirt_vm_facts': 'Retrieve information about one or more oVirt/RHV virtual machines\n\nArguments: all_content, pattern, case_sensitive, next_run, max\n\nRetrieve information about one or more oVirt/RHV virtual machines.\nThis module was called C(ovirt_vm_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_vm_info) module no longer returns C(ansible_facts)!',
 '_ovirt_vmpool_facts': 'Retrieve information about one or more oVirt/RHV vmpools\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV vmpools.\nThis module was called C(ovirt_vmpool_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_vmpool_info) module no longer returns C(ansible_facts)!',
 '_panos_admin': 'Add or modify PAN-OS user accounts password.\n\nArguments: commit, role, admin_password, admin_username\n\nPanOS module that allows changes to the user account passwords by doing API calls to the Firewall using pan-api as the protocol.',
 '_panos_admpwd': 'change admin password of PAN-OS device using SSH with SSH key\n\nArguments: username, newpassword, key_filename, ip_address\n\nChange the admin password of PAN-OS via SSH using a SSH key for authentication.\nUseful for AWS instances where the first login should be done via SSH.',
 '_panos_cert_gen_ssh': 'generates a self-signed certificate using SSH protocol with SSH key\n\nArguments: password, rsa_nbits, cert_cn, cert_friendly_name, key_filename, ip_address, signed_by\n\nThis module generates a self-signed certificate that can be used by GlobalProtect client, SSL connector, or\notherwise. Root certificate must be preset on the system first. This module depends on paramiko for ssh.',
 '_panos_check': 'check if PAN-OS device is ready for configuration\n\nArguments: interval, timeout\n\nCheck if PAN-OS device is ready for being configured (no pending jobs).\nThe check could be done once or multiple times until the device is ready.',
 '_panos_commit': "commit firewall's candidate configuration\n\nArguments: username, description, commit_vsys, interval, sync, timeout, commit_changes_by, password, ip_address\n\nPanOS module that will commit firewall's candidate configuration on\nthe device. The new configuration will become active immediately.",
 '_panos_dag': 'create a dynamic address group\n\nArguments: commit, dag_name, dag_filter\n\nCreate a dynamic address group object in the firewall used for policy rules',
 '_panos_dag_tags': "Create tags for DAG's on PAN-OS devices.\n\nArguments: devicegroup, description, commit, tag_names, operation, api_key, ip_to_register\n\nCreate the ip address to tag associations. Tags will in turn be used to create DAG's",
 '_panos_import': 'import file on PAN-OS devices\n\nArguments: category, url, validate_certs, file\n\nImport file on PAN-OS device',
 '_panos_interface': 'configure data-port network interface for DHCP\n\nArguments: create_default_route, zone_name, if_name, commit\n\nConfigure data-port (DP) network interface for DHCP. By default DP interfaces are static.',
 '_panos_lic': 'apply authcode to a device/instance\n\nArguments: force, auth_code\n\nApply an authcode to a device.\nThe authcode should have been previously registered on the Palo Alto Networks support portal.\nThe device should have Internet access.',
 '_panos_loadcfg': 'load configuration on PAN-OS device\n\nArguments: commit, file\n\nLoad configuration on PAN-OS device',
 '_panos_match_rule': 'Test for match against a security rule on PAN-OS devices or Panorama management console.\n\nArguments: username, category, destination_ip, protocol, vsys_id, destination_port, password, ip_address, to_interface, rule_type, source_zone, source_ip, source_user, application, destination_zone, source_port, api_key\n\nSecurity policies allow you to enforce rules and take action, and can be as general or specific as needed.',
 '_panos_mgtconfig': 'configure management settings of device\n\nArguments: panorama_secondary, commit, dns_server_primary, dns_server_secondary, panorama_primary\n\nConfigure management settings of device',
 '_panos_nat_policy': 'Get virtual network facts\n\nArguments: name, resource_group, tags\n\nRemoved keyword',
 '_panos_nat_rule': 'create a policy NAT rule\n\nArguments: username, snat_bidirectional, devicegroup, description, dnat_port, destination_ip, snat_interface_address, rule_name, snat_address_type, operation, password, ip_address, to_interface, dnat_address, snat_type, service, snat_static_address, source_zone, source_ip, snat_dynamic_address, tag_name, destination_zone, commit, api_key, snat_interface\n\n- Create a policy nat rule. Keep in mind that we can either end up configuring source NAT, destination NAT, or both. Instead of splitting it into two we will make a fair attempt to determine which one the user wants.\n',
 '_panos_object': 'create/read/update/delete object in PAN-OS or Panorama\n\nArguments: username, static_value, description, color, address, services, devicegroup, destination_port, password, ip_address, operation, servicegroup, api_key, protocol, addressobject, tag_name, serviceobject, source_port, address_type, dynamic_value, addressgroup\n\nPolicy objects form the match criteria for policy rules and many other functions in PAN-OS. These may include address object, address groups, service objects, service groups, and tag.',
 '_panos_op': 'execute arbitrary OP commands on PANW devices (e.g. show interface all)\n\nArguments: username, cmd, password, api_key, ip_address\n\nThis module will allow user to pass and execute any supported OP command on the PANW device.',
 '_panos_pg': 'create a security profiles group\n\nArguments: wildfire, data_filtering, file_blocking, pg_name, vulnerability, spyware, url_filtering, virus, commit\n\nCreate a security profile group',
 '_panos_query_rules': 'PANOS module that allows search for security rules in PANW NGFW devices.\n\nArguments: username, destination_ip, api_key, protocol, source_zone, source_ip, application, tag_name, destination_zone, source_port, devicegroup, destination_port, password, ip_address\n\n- Security policies allow you to enforce rules and take action, and can be as general or specific as needed. The policy rules are compared against the incoming traffic in sequence, and because the first rule that matches the traffic is applied, the more specific rules must precede the more general ones.\n',
 '_panos_restart': 'restart a device\n\nArguments: \n\nRestart a device',
 '_panos_sag': 'Create a static address group.\n\nArguments: devicegroup, description, tags, sag_name, sag_match_filter, commit, operation, api_key\n\nCreate a static address group object in the firewall used for policy rules.',
 '_panos_security_policy': "Concentrator configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vpn_ipsec_concentrator, https, ssl_verify, password, vdom\n\nRemoved keyword",
 '_panos_security_rule': 'Create security rule policy on PAN-OS devices or Panorama management console.\n\nArguments: wildfire_analysis, username, destination_ip, source_zone, devicegroup, data_filtering, spyware, hip_profiles, file_blocking, antivirus, log_start, operation, password, ip_address, description, category, rule_name, log_end, service, application, rule_type, vulnerability, source_ip, source_user, url_filtering, tag_name, destination_zone, group_profile, action, commit, api_key\n\nSecurity policies allow you to enforce rules and take action, and can be as general or specific as needed. The policy rules are compared against the incoming traffic in sequence, and because the first rule that matches the traffic is applied, the more specific rules must precede the more general ones.',
 '_panos_set': 'Execute arbitrary commands on a PAN-OS device using XPath and element\n\nArguments: username, xpath, command, password, ip_address, element\n\nRun an arbitrary \'xapi\' command taking an XPath (i.e get) or XPath and element (i.e set).\nSee https://github.com/kevinsteves/pan-python/blob/master/doc/pan.xapi.rst for details\nRuns a \'set\' command by default\nThis should support _all_ commands that your PAN-OS device accepts vi it\'s cli\ncli commands are found as\nOnce logged in issue \'debug cli on\'\nEnter configuration mode by issuing \'configure\'\nEnter your set (or other) command, for example \'set deviceconfig system timezone Australia/Melbourne\'\nreturns\n"<request cmd="set" obj="/config/devices/entry[@name=\'localhost.localdomain\']/deviceconfig/system" cookie=XXXX><timezone>Australia/Melbourne</timezone></request>\n\nThe \'xpath\' is  "/config/devices/entry[@name=\'localhost.localdomain\']/deviceconfig/system"\nThe \'element\' is "<timezone>Australia/Melbourne</timezone>"',
 '_pn_cluster': 'CLI command to create/delete a cluster.\n\nArguments: pn_name, pn_cluster_node1, pn_clipassword, pn_cliusername, pn_validate, state, pn_cliswitch, pn_cluster_node2\n\nExecute cluster-create or cluster-delete command.\nA cluster allows two switches to cooperate in high-availability (HA) deployments. The nodes that form the cluster must be members of the same fabric. Clusters are typically used in conjunction with a virtual link aggregation group (VLAG) that allows links physically connected to two separate switches appear as a single trunk to a third device. The third device can be a switch,server, or any Ethernet device.',
 '_pn_ospf': 'CLI command to add/remove ospf protocol to a vRouter.\n\nArguments: state, pn_vrouter_name, pn_clipassword, pn_ospf_area, pn_cliswitch, pn_network_ip, pn_cliusername\n\nExecute vrouter-ospf-add, vrouter-ospf-remove command.\nThis command adds/removes Open Shortest Path First(OSPF) routing protocol to a virtual router(vRouter) service.',
 '_pn_ospfarea': 'CLI command to add/remove ospf area to/from a vrouter.\n\nArguments: pn_ospf_area, pn_clipassword, pn_vrouter_name, pn_cliusername, pn_prefix_listin, state, pn_prefix_listout, pn_stub_type, pn_cliswitch, pn_quiet\n\nExecute vrouter-ospf-add, vrouter-ospf-remove command.\nThis command adds/removes Open Shortest Path First(OSPF) area to/from a virtual router(vRouter) service.',
 '_pn_show': 'Run show commands on nvOS device.\n\nArguments: pn_parameters, pn_options, pn_clipassword, pn_cliswitch, pn_command, pn_cliusername\n\nExecute show command in the nodes and returns the results read from the device.',
 '_pn_trunk': 'CLI command to create/delete/modify a trunk.\n\nArguments: pn_unknown_mcast_level, pn_jumbo, pn_name, pn_lacp_fallback_timeout, pn_unknown_ucast_level, pn_lacp_timeout, pn_loopback, pn_speed, pn_edge_switch, pn_host, pn_port_macaddr, pn_lacp_fallback, pn_routing, pn_clipassword, pn_mirror_receive, pn_egress_rate_limit, pn_cliusername, pn_lacp_mode, state, pn_ports, pn_lacp_priority, pn_broadcast_level, pn_pause, pn_cliswitch, pn_loopvlans, pn_description\n\nExecute trunk-create or trunk-delete command.\nTrunks can be used to aggregate network links at Layer 2 on the local switch. Use this command to create a new trunk.',
 '_pn_vlag': 'CLI command to create/delete/modify vlag.\n\nArguments: pn_name, pn_lacp_fallback, pn_lacp_fallback_timeout, pn_clipassword, pn_lacp_timeout, state, pn_cliusername, pn_lacp_mode, pn_failover_action, pn_peer_port, pn_peer_switch, pn_port, pn_cliswitch, pn_mode\n\nExecute vlag-create/vlag-delete/vlag-modify command.\nA virtual link aggregation group (VLAG) allows links that are physically connected to two different Pluribus Networks devices to appear as a single trunk to a third device. The third device can be a switch, server, or any Ethernet device. A VLAG can provide Layer 2 multipathing, which allows you to create redundancy by increasing bandwidth, enabling multiple parallel paths between nodes and loadbalancing traffic where alternative paths exist.',
 '_pn_vlan': 'CLI command to create/delete a VLAN.\n\nArguments: pn_scope, pn_clipassword, pn_cliusername, pn_vlanid, state, pn_ports, pn_untagged_ports, pn_cliswitch, pn_stats, pn_description\n\nExecute vlan-create or vlan-delete command.\nVLANs are used to isolate network traffic at Layer 2.The VLAN identifiers 0 and 4095 are reserved and cannot be used per the IEEE 802.1Q standard. The range of configurable VLAN identifiers is 2 through 4092.',
 '_pn_vrouter': 'CLI command to create/delete/modify a vrouter.\n\nArguments: pn_name, pn_rip_redistribute, pn_bgp_options, pn_router_id, pn_vrrp_track_port, pn_ospf_options, pn_bgp_as, pn_ospf_redistribute, pn_clipassword, pn_bgp_redistribute, pn_router_type, pn_hw_vrrp_id, pn_vnet, pn_cliusername, pn_service_state, state, pn_service_type, pn_cliswitch, pn_bgp_max_paths\n\nExecute vrouter-create, vrouter-delete, vrouter-modify command.\nEach fabric, cluster, standalone switch, or virtual network (VNET) can provide its tenants with a virtual router (vRouter) service that forwards traffic between networks and implements Layer 3 protocols.\nC(vrouter-create) creates a new vRouter service.\nC(vrouter-delete) deletes a vRouter service.\nC(vrouter-modify) modifies a vRouter service.',
 '_pn_vrouterbgp': 'CLI command to add/remove/modify vrouter-bgp.\n\nArguments: pn_max_prefix, pn_route_mapout, pn_neighbor, pn_vrouter_name, pn_override_capability, pn_route_mapin, pn_soft_reconfig, pn_ebgp, pn_prefix_listin, pn_bfd, pn_password, pn_route_reflector, pn_keepalive, pn_max_prefix_warn, pn_multiprotocol, pn_clipassword, pn_default_originate, pn_cliusername, pn_weight, pn_prefix_listout, state, pn_remote_as, pn_cliswitch, pn_holdtime, pn_next_hop_self\n\nExecute vrouter-bgp-add, vrouter-bgp-remove, vrouter-bgp-modify command.\nEach fabric, cluster, standalone switch, or virtual network (VNET) can provide its tenants with a vRouter service that forwards traffic between networks and implements Layer 4 protocols.',
 '_pn_vrouterif': 'CLI command to add/remove/modify vrouter-interface.\n\nArguments: pn_nic_enable, pn_vrouter_name, pn_vrrp_adv_int, pn_vrrp_priority, pn_alias, pn_secondary_macs, pn_interface_ip, pn_vlan, pn_vxlan, pn_exclusive, pn_nic_str, pn_clipassword, pn_vrrp_id, pn_cliusername, state, pn_interface, pn_l3port, pn_cliswitch, pn_assignment\n\nExecute vrouter-interface-add, vrouter-interface-remove, vrouter-interface-modify command.\nYou configure interfaces to vRouter services on a fabric, cluster, standalone switch or virtual network(VNET).',
 '_pn_vrouterlbif': 'CLI command to add/remove vrouter-loopback-interface.\n\nArguments: pn_interface_ip, state, pn_vrouter_name, pn_clipassword, pn_cliusername, pn_cliswitch, pn_index\n\nExecute vrouter-loopback-interface-add, vrouter-loopback-interface-remove commands.\nEach fabric, cluster, standalone switch, or virtual network (VNET) can provide its tenants with a virtual router (vRouter) service that forwards traffic between networks and implements Layer 3 protocols.',
 '_purefa_facts': 'Collect facts from Pure Storage FlashArray\n\nArguments: gather_subset\n\nCollect facts information from a Pure Storage Flasharray running the Purity//FA operating system. By default, the module will collect basic fact information including hosts, host groups, protection groups and volume counts. Additional fact information can be collected based on the configured set of arguments.',
 '_purefb_facts': 'Collect facts from Pure Storage FlashBlade\n\nArguments: gather_subset\n\nCollect facts information from a Pure Storage FlashBlade running the Purity//FB operating system. By default, the module will collect basic fact information including hosts, host groups, protection groups and volume counts. Additional fact information can be collected based on the configured set of arguments.',
 '_python_requirements_facts': 'Show python path and assert dependency versions\n\nArguments: dependencies\n\nGet info about available Python requirements on the target host, including listing required libraries and gathering versions.\nThis module was called C(python_requirements_facts) before Ansible 2.9. The usage did not change.',
 '_rds_instance_facts': 'obtain information about one or more RDS instances\n\nArguments: db_instance_identifier, filters\n\nobtain information about one or more RDS instances\nThis module was called C(rds_instance_facts) before Ansible 2.9. The usage did not change.',
 '_rds_snapshot_facts': 'obtain information about one or more RDS snapshots\n\nArguments: db_instance_identifier, db_cluster_snapshot_identifier, db_cluster_identifier, snapshot_type, db_snapshot_identifier\n\nobtain information about one or more RDS snapshots. These can be for unclustered snapshots or snapshots of clustered DBs (Aurora)\nAurora snapshot information may be obtained if no identifier parameters are passed or if one of the cluster parameters are passed.\nThis module was called C(rds_snapshot_facts) before Ansible 2.9. The usage did not change.',
 '_redfish_facts': 'Manages Out-Of-Band controllers using Redfish APIs\n\nArguments: category, username, command, timeout, baseuri, password\n\nBuilds Redfish URIs locally and sends them to remote OOB controllers to get information back.\nInformation retrieved is placed in a location specified by the user.\nThis module was called C(redfish_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(redfish_info) module no longer returns C(ansible_facts)!',
 '_redshift_facts': 'Gather information about Redshift cluster(s)\n\nArguments: cluster_identifier, tags\n\nGather information about Redshift cluster(s)\nThis module was called C(redshift_facts) before Ansible 2.9. The usage did not change.',
 '_route53_facts': 'Retrieves route53 details using AWS methods\n\nArguments: start_record_name, resource_id, hosted_zone_method, dns_name, health_check_method, delegation_set_id, max_items, hosted_zone_id, health_check_id, change_id, query, next_marker, type\n\nGets various details related to Route53 zone, record set or health check details.\nThis module was called C(route53_facts) before Ansible 2.9. The usage did not change.',
 '_s3': 'Manage Fabric Node Members (fabric:NodeIdentP)\n\nArguments: state, node_id, role, description, serial, switch, pod_id\n\nRemoved keyword',
 '_scaleway_image_facts': 'Gather facts about the Scaleway images available.\n\nArguments: region\n\nGather facts about the Scaleway images available.',
 '_scaleway_ip_facts': 'Gather facts about the Scaleway ips available.\n\nArguments: region\n\nGather facts about the Scaleway ips available.',
 '_scaleway_organization_facts': 'Gather facts about the Scaleway organizations available.\n\nArguments: api_url\n\nGather facts about the Scaleway organizations available.',
 '_scaleway_security_group_facts': 'Gather facts about the Scaleway security groups available.\n\nArguments: region\n\nGather facts about the Scaleway security groups available.',
 '_scaleway_server_facts': 'Gather facts about the Scaleway servers available.\n\nArguments: region\n\nGather facts about the Scaleway servers available.',
 '_scaleway_snapshot_facts': 'Gather facts about the Scaleway snapshots available.\n\nArguments: region\n\nGather facts about the Scaleway snapshot available.',
 '_scaleway_volume_facts': 'Gather facts about the Scaleway volumes available.\n\nArguments: region\n\nGather facts about the Scaleway volumes available.',
 '_sf_account_manager': 'Manage SolidFire accounts\n\nArguments: new_name, status, name, initiator_secret, state, attributes, target_secret, account_id\n\nCreate, destroy, or update accounts on SolidFire',
 '_sf_check_connections': 'Check connectivity to MVIP and SVIP.\n\nArguments: svip, skip, mvip\n\nUsed to test the management connection to the cluster.\nThe test pings the MVIP and SVIP, and executes a simple API method to verify connectivity.',
 '_sf_snapshot_schedule_manager': 'Manage SolidFire snapshot schedules\n\nArguments: time_interval_days, name, time_interval_minutes, state, time_interval_hours, paused, schedule_id, snapshot_name, volumes, starting_date, recurring, retention\n\nCreate, destroy, or update accounts on SolidFire',
 '_sf_volume_access_group_manager': 'Manage SolidFire Volume Access Groups\n\nArguments: name, virtual_network_id, state, volumes, initiators, attributes, virtual_network_tags, volume_access_group_id\n\nCreate, destroy, or update volume access groups on SolidFire',
 '_sf_volume_manager': 'Manage SolidFire volumes\n\nArguments: qos, name, size_unit, account_id, access, state, volume_id, 512emulation, attributes, size\n\nCreate, destroy, or update volumes on SolidFire',
 '_smartos_image_facts': 'Get SmartOS image details.\n\nArguments: filters\n\nRetrieve information about all installed images on SmartOS.\nThis module was called C(smartos_image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(smartos_image_info) module no longer returns C(ansible_facts)!',
 '_vcenter_extension_facts': 'Gather facts vCenter extensions\n\nArguments: \n\nThis module can be used to gather facts about vCenter extension.',
 '_vertica_facts': 'Gathers Vertica database facts.\n\nArguments: login_user, cluster, db, port, login_password\n\nGathers Vertica database information.\nThis module was called C(vertica_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(vertica_info) module no longer returns C(ansible_facts)!',
 '_vmware_about_facts': 'Provides information about VMware server to which user is connecting to\n\nArguments: \n\nThis module can be used to gather information about VMware server to which user is trying to connect.',
 '_vmware_category_facts': 'Gather facts about VMware tag categories\n\nArguments: \n\nThis module can be used to gather facts about VMware tag categories.\nTag feature is introduced in vSphere 6 version, so this module is not supported in earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 '_vmware_cluster_facts': 'Gather info about clusters available in given vCenter\n\nArguments: cluster_name, datacenter, show_tag\n\nThis module can be used to gather information about clusters in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_cluster_facts) before Ansible 2.9. The usage did not change.',
 '_vmware_datastore_facts': 'Gather info about datastores available in given vCenter\n\nArguments: cluster, gather_nfs_mount_info, gather_vmfs_mount_info, name, datacenter\n\nThis module can be used to gather information about datastores in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_datastore_facts) before Ansible 2.9. The usage did not change.',
 '_vmware_drs_group_facts': 'Gathers facts about DRS VM/Host groups on the given cluster\n\nArguments: cluster_name, datacenter\n\nThis module can be used to gather facts about DRS VM/HOST groups from the given cluster.',
 '_vmware_drs_rule_facts': 'Gathers facts about DRS rule on the given cluster\n\nArguments: cluster_name, datacenter\n\nThis module can be used to gather facts about DRS VM-VM and VM-HOST rules from the given cluster.',
 '_vmware_dvs_portgroup_facts': 'Gathers facts DVS portgroup configurations\n\nArguments: datacenter, show_vlan_info, show_teaming_policy, show_port_policy, dvswitch, show_network_policy\n\nThis module can be used to gather facts about DVS portgroup configurations.',
 '_vmware_guest_boot_facts': 'Gather facts about boot options for the given virtual machine\n\nArguments: use_instance_uuid, uuid, moid, name, name_match\n\nGather facts about boot options for the given virtual machine.',
 '_vmware_guest_customization_facts': 'Gather facts about VM customization specifications\n\nArguments: spec_name\n\nThis module can be used to gather facts about customization specifications.\nAll parameters and VMware object names are case sensitive.',
 '_vmware_guest_disk_facts': 'Gather facts about disks of given virtual machine\n\nArguments: use_instance_uuid, datacenter, moid, name, folder, uuid\n\nThis module can be used to gather facts about disks belonging to given virtual machine.\nAll parameters and VMware object names are case sensitive.',
 '_vmware_guest_facts': 'Gather info about a single VM\n\nArguments: datacenter, uuid, tags, name, use_instance_uuid, moid, name_match, folder, properties, schema\n\nGather information about a single VM on a VMware ESX cluster.\nThis module was called C(vmware_guest_facts) before Ansible 2.9. The usage did not change.',
 '_vmware_guest_snapshot_facts': "Gather info about virtual machine's snapshots in vCenter\n\nArguments: use_instance_uuid, datacenter, moid, name, folder, uuid\n\nThis module can be used to gather information about virtual machine's snapshots.\nThis module was called C(vmware_guest_snapshot_facts) before Ansible 2.9. The usage did not change.",
 '_vmware_host_capability_facts': "Gathers facts about an ESXi host's capability information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's capability information when ESXi hostname or Cluster name is given.",
 '_vmware_host_config_facts': "Gathers facts about an ESXi host's advance configuration information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's advance configuration information when ESXi hostname or Cluster name is given.",
 '_vmware_host_dns_facts': "Gathers facts about an ESXi host's DNS configuration information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's DNS configuration information when ESXi hostname or Cluster name is given.\nAll parameters and VMware object names are case sensitive.",
 '_vmware_host_feature_facts': "Gathers facts about an ESXi host's feature capability information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's feature capability information when ESXi hostname or Cluster name is given.",
 '_vmware_host_firewall_facts': "Gathers facts about an ESXi host's firewall configuration information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's firewall configuration information when ESXi hostname or Cluster name is given.",
 '_vmware_host_ntp_facts': 'Gathers facts about NTP configuration on an ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about NTP configurations on an ESXi host.',
 '_vmware_host_package_facts': 'Gathers facts about available packages on an ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about available packages and their status on an ESXi host.',
 '_vmware_host_service_facts': "Gathers facts about an ESXi host's services\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's services.",
 '_vmware_host_ssl_facts': 'Gather facts of ESXi host system about SSL\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts of the SSL thumbprint information for a host.',
 '_vmware_host_vmhba_facts': 'Gathers facts about vmhbas available on the given ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about vmhbas available on the given ESXi host.\nIf C(cluster_name) is provided, then vmhba facts about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmhba facts about given host system will be returned.',
 '_vmware_host_vmnic_facts': 'Gathers facts about vmnics available on the given ESXi host\n\nArguments: directpath_io, cluster_name, capabilities, sriov, esxi_hostname\n\nThis module can be used to gather facts about vmnics available on the given ESXi host.\nIf C(cluster_name) is provided, then vmnic facts about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmnic facts about given host system will be returned.\nAdditional details about vswitch and dvswitch with respective vmnic is also provided which is added in 2.7 version.',
 '_vmware_local_role_facts': 'Gather facts about local roles on an ESXi host\n\nArguments: \n\nThis module can be used to gather facts about local role facts on an ESXi host',
 '_vmware_local_user_facts': "Gather facts about users on the given ESXi host\n\nArguments: \n\nThis module can be used to gather facts about users present on the given ESXi host system in VMware infrastructure.\nAll variables and VMware object names are case sensitive.\nUser must hold the 'Authorization.ModifyPermissions' privilege to invoke this module.",
 '_vmware_portgroup_facts': "Gathers facts about an ESXi host's Port Group configuration\n\nArguments: cluster_name, policies, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's Port Group configuration when ESXi hostname or Cluster name is given.",
 '_vmware_resource_pool_facts': 'Gathers facts about resource pool information\n\nArguments: \n\nThis module can be used to gather facts about all resource configuration information.',
 '_vmware_tag_facts': 'Manage VMware tag info\n\nArguments: \n\nThis module can be used to collect information about VMware tags.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.\nThis module was called C(vmware_tag_facts) before Ansible 2.9. The usage did not change.',
 '_vmware_target_canonical_facts': 'Return canonical (NAA) from an ESXi host system\n\nArguments: cluster_name, target_id, esxi_hostname\n\nThis module can be used to gather facts about canonical (NAA) from an ESXi host based on SCSI target ID.',
 '_vmware_vm_facts': 'Return basic info pertaining to a VMware machine guest\n\nArguments: folder, show_attribute, vm_type, show_tag\n\nReturn basic information pertaining to a vSphere or ESXi virtual machine guest.\nCluster name as fact is added in version 2.7.\nThis module was called C(vmware_vm_facts) before Ansible 2.9. The usage did not change.',
 '_vmware_vmkernel_facts': 'Gathers VMKernel facts about an ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather VMKernel facts about an ESXi host from given ESXi hostname or cluster name.',
 '_vmware_vswitch_facts': "Gathers facts about an ESXi host's vswitch configurations\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather facts about an ESXi host's vswitch configurations when ESXi hostname or Cluster name is given.\nThe vSphere Client shows the value for the number of ports as elastic from vSphere 5.5 and above.\nOther tools like esxcli might show the number of ports as 1536 or 5632.\nSee U(https://kb.vmware.com/s/article/2064511) for more details.",
 '_vr_account_facts': 'Gather facts about the Vultr account.\n\nArguments: \n\nGather facts about account balance, charges and payments.',
 '_vr_dns_domain': 'Manages DNS domains on Vultr.\n\nArguments: state, name, server_ip\n\nCreate and remove DNS domains.',
 '_vr_dns_record': 'Manages DNS records on Vultr.\n\nArguments: domain, multiple, name, priority, record_type, state, ttl, data\n\nCreate, update and remove DNS records.',
 '_vr_firewall_group': 'Manages firewall groups on Vultr.\n\nArguments: state, name\n\nCreate and remove firewall groups.',
 '_vr_firewall_rule': 'Manages firewall rules on Vultr.\n\nArguments: state, protocol, ip_version, start_port, cidr, end_port, group\n\nCreate and remove firewall rules.',
 '_vr_server': 'Manages virtual servers on Vultr.\n\nArguments: reserved_ip_v4, force, user_data, tag, plan, ipv6_enabled, ssh_keys, private_network_enabled, name, region, hostname, firewall_group, notify_activate, state, auto_backup_enabled, snapshot, startup_script, os\n\nDeploy, start, stop, update, restart, reinstall servers.',
 '_vr_ssh_key': 'Manages ssh keys on Vultr.\n\nArguments: state, name, ssh_key\n\nCreate, update and remove ssh keys.',
 '_vr_startup_script': 'Manages startup scripts on Vultr.\n\nArguments: state, script_type, name, script\n\nCreate, update and remove startup scripts.',
 '_vr_user': 'Manages users on Vultr.\n\nArguments: state, acls, force, name, api_enabled, password, email\n\nCreate, update and remove users.',
 '_vsphere_guest': 'Configures general settings on a vCenter server\n\nArguments: timeout_settings, runtime_settings, user_directory, database, mail, logging_options, snmp_receivers\n\nRemoved keyword',
 '_vultr_account_facts': 'Gather facts about the Vultr account.\n\nArguments: \n\nGather facts about account balance, charges and payments.',
 '_vultr_block_storage_facts': 'Gather facts about the Vultr block storage volumes available.\n\nArguments: \n\nGather facts about block storage volumes available in Vultr.',
 '_vultr_dns_domain_facts': 'Gather facts about the Vultr DNS domains available.\n\nArguments: \n\nGather facts about DNS domains available in Vultr.',
 '_vultr_firewall_group_facts': 'Gather facts about the Vultr firewall groups available.\n\nArguments: \n\nGather facts about firewall groups available in Vultr.',
 '_vultr_network_facts': 'Gather facts about the Vultr networks available.\n\nArguments: \n\nGather facts about networks available in Vultr.',
 '_vultr_os_facts': 'Gather facts about the Vultr OSes available.\n\nArguments: \n\nGather facts about OSes available to boot servers.',
 '_vultr_plan_facts': 'Gather facts about the Vultr plans available.\n\nArguments: \n\nGather facts about plans available to boot servers.',
 '_vultr_region_facts': 'Gather facts about the Vultr regions available.\n\nArguments: \n\nGather facts about regions available to boot servers.',
 '_vultr_server_facts': 'Gather facts about the Vultr servers available.\n\nArguments: \n\nGather facts about servers available.',
 '_vultr_ssh_key_facts': 'Gather facts about the Vultr SSH keys available.\n\nArguments: \n\nGather facts about SSH keys available.',
 '_vultr_startup_script_facts': 'Gather facts about the Vultr startup scripts available.\n\nArguments: \n\nGather facts about vultr_startup_scripts available.',
 '_vultr_user_facts': 'Gather facts about the Vultr user available.\n\nArguments: \n\nGather facts about users available in Vultr.',
 '_vyos_interface': 'Manage Interface on VyOS network devices\n\nArguments: neighbors, name, duplex, enabled, mtu, delay, state, aggregate, speed, description\n\nThis module provides declarative management of Interfaces on VyOS network devices.',
 '_vyos_l3_interface': 'Manage L3 interfaces on VyOS network devices\n\nArguments: aggregate, state, ipv4, name, ipv6\n\nThis module provides declarative management of L3 interfaces on VyOS network devices.',
 '_vyos_linkagg': 'Manage link aggregation groups on VyOS network devices\n\nArguments: aggregate, state, name, members, mode\n\nThis module provides declarative management of link aggregation groups on VyOS network devices.',
 '_vyos_lldp': 'Manage LLDP configuration on VyOS network devices\n\nArguments: interfaces, state\n\nThis module provides declarative management of LLDP service on VyOS network devices.',
 '_vyos_lldp_interface': 'Manage LLDP interfaces configuration on VyOS network devices\n\nArguments: aggregate, state, name\n\nThis module provides declarative management of LLDP interfaces configuration on VyOS network devices.',
 '_win_msi': 'Manage configuration sections of Ruckus ICX 7000 series switches\n\nArguments: multiline_delimiter, src, save_when, after, lines, intended_config, diff_against, parents, defaults, before, running_config, replace, backup, match, diff_ignore_lines\n\nRemoved keyword',
 '_xenserver_guest_facts': 'Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool\n\nArguments: name, uuid\n\nThis module can be used to gather essential VM facts.\n',
 '_zabbix_group_facts': 'Gather information about Zabbix hostgroup\n\nArguments: hostgroup_name\n\nThis module allows you to search for Zabbix hostgroup entries.\nThis module was called C(zabbix_group_facts) before Ansible 2.9. The usage did not change.',
 '_zabbix_host_facts': 'Gather information about Zabbix host\n\nArguments: remove_duplicate, exact_match, host_name, host_ip, host_inventory\n\nThis module allows you to search for Zabbix host entries.\nThis module was called C(zabbix_host_facts) before Ansible 2.9. The usage did not change.',
 'a10_server': "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' server object.\n\nArguments: state, server_ip, server_name, server_ports, partition, validate_certs, server_status\n\nManage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv2.",
 'a10_server_axapi3': 'Manage A10 Networks AX/SoftAX/Thunder/vThunder devices\n\nArguments: server_ip, server_name, server_ports, operation, validate_certs, server_status\n\nManage SLB (Server Load Balancer) server objects on A10 Networks devices via aXAPIv3.',
 'a10_service_group': "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' service groups.\n\nArguments: service_group, service_group_protocol, service_group_method, partition, validate_certs, state, servers\n\nManage SLB (Server Load Balancing) service-group objects on A10 Networks devices via aXAPIv2.",
 'a10_virtual_server': "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' virtual servers.\n\nArguments: state, virtual_server_status, virtual_server, validate_certs, virtual_server_ip, partition, virtual_server_ports\n\nManage SLB (Server Load Balancing) virtual server objects on A10 Networks devices via aXAPIv2.",
 'aci_aaa_user': 'Manage AAA users (aaa:User)\n\nArguments: first_name, aaa_user, description, aaa_password_update_required, expires, enabled, clear_password_history, aaa_password, phone, state, last_name, expiration, aaa_password_lifetime, email\n\nManage AAA users on Cisco ACI fabrics.',
 'aci_aaa_user_certificate': 'Manage AAA user certificates (aaa:UserCert)\n\nArguments: certificate_name, state, aaa_user, certificate, aaa_user_type\n\nManage AAA user certificates on Cisco ACI fabrics.',
 'aci_access_port_block_to_access_port': 'Manage port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:PortBlk)\n\nArguments: from_port, from_card, access_port_selector, leaf_port_blk, to_card, leaf_port_blk_description, to_port, state, leaf_interface_profile\n\nManage port blocks of Fabric interface policy leaf profile interface selectors on Cisco ACI fabrics.',
 'aci_access_port_to_interface_policy_leaf_profile': 'Manage Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:RsAccBaseGrp, infra:PortBlk)\n\nArguments: from_port, from_card, description, access_port_selector, interface_type, leaf_port_blk, policy_group, to_card, leaf_port_blk_description, to_port, state, leaf_interface_profile\n\nManage Fabric interface policy leaf profile interface selectors on Cisco ACI fabrics.',
 'aci_access_sub_port_block_to_access_port': 'Manage sub port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:SubPortBlk)\n\nArguments: to_sub_port, from_port, from_card, from_sub_port, access_port_selector, leaf_port_blk, to_card, leaf_port_blk_description, to_port, state, leaf_interface_profile\n\nManage sub port blocks of Fabric interface policy leaf profile interface selectors on Cisco ACI fabrics.',
 'aci_aep': 'Manage attachable Access Entity Profile (AEP) objects (infra:AttEntityP, infra:ProvAcc)\n\nArguments: aep, state, infra_vlan, description\n\nConnect to external virtual and physical domains by using attachable Access Entity Profiles (AEP) on Cisco ACI fabrics.',
 'aci_aep_to_domain': 'Bind AEPs to Physical or Virtual Domains (infra:RsDomP)\n\nArguments: domain_type, aep, domain, state, vm_provider\n\nBind AEPs to Physical or Virtual Domains on Cisco ACI fabrics.',
 'aci_ap': 'Manage top level Application Profile (AP) objects (fv:Ap)\n\nArguments: ap, state, description, tenant\n\nManage top level Application Profile (AP) objects on Cisco ACI fabrics',
 'aci_bd': 'Manage Bridge Domains (BD) objects (fv:BD)\n\nArguments: bd, arp_flooding, igmp_snoop_policy, endpoint_retention_action, description, l3_unknown_multicast, enable_routing, vrf, bd_type, ip_learning, tenant, l2_unknown_unicast, endpoint_retention_policy, multi_dest, endpoint_clear, state, ipv6_nd_policy, mac_address, endpoint_move_detect, enable_multicast, limit_ip_learn\n\nManages Bridge Domains (BD) on Cisco ACI fabrics.',
 'aci_bd_subnet': 'Manage Subnets (fv:Subnet)\n\nArguments: bd, description, nd_prefix_policy, enable_vip, mask, preferred, subnet_control, state, route_profile, route_profile_l3_out, scope, gateway, tenant, subnet_name\n\nManage Subnets on Cisco ACI fabrics.',
 'aci_bd_to_l3out': 'Bind Bridge Domain to L3 Out (fv:RsBDToOut)\n\nArguments: bd, l3out, state, tenant\n\nBind Bridge Domain to L3 Out on Cisco ACI fabrics.',
 'aci_config_rollback': 'Provides rollback and rollback preview functionality (config:ImportP)\n\nArguments: export_policy, import_mode, description, fail_on_decrypt, compare_export_policy, state, snapshot, import_type, compare_snapshot, import_policy\n\nProvides rollback and rollback preview functionality for Cisco ACI fabrics.\nConfig Rollbacks are done using snapshots C(aci_snapshot) with the configImportP class.',
 'aci_config_snapshot': 'Manage Config Snapshots (config:Snapshot, config:ExportP)\n\nArguments: include_secure, state, snapshot, description, format, export_policy, max_count\n\nManage Config Snapshots on Cisco ACI fabrics.\nCreating new Snapshots is done using the configExportP class.\nRemoving Snapshots is done using the configSnapshot class.',
 'aci_contract': 'Manage contract resources (vz:BrCP)\n\nArguments: priority, contract, state, description, scope, dscp, tenant\n\nManage Contract resources on Cisco ACI fabrics.',
 'aci_contract_subject': 'Manage initial Contract Subjects (vz:Subj)\n\nArguments: description, consumer_match, dscp, priority, state, contract, reverse_filter, provider_match, tenant, subject\n\nManage initial Contract Subjects on Cisco ACI fabrics.',
 'aci_contract_subject_to_filter': 'Bind Contract Subjects to Filters (vz:RsSubjFiltAtt)\n\nArguments: filter, state, log, subject, contract, tenant\n\nBind Contract Subjects to Filters on Cisco ACI fabrics.',
 'aci_domain': 'Manage physical, virtual, bridged, routed or FC domain profiles (phys:DomP, vmm:DomP, l2ext:DomP, l3ext:DomP, fc:DomP)\n\nArguments: domain, dscp, domain_type, state, encap_mode, vswitch, multicast_address, vm_provider\n\nManage physical, virtual, bridged, routed or FC domain profiles on Cisco ACI fabrics.',
 'aci_domain_to_encap_pool': 'Bind Domain to Encap Pools (infra:RsVlanNs)\n\nArguments: pool_type, domain_type, domain, pool_allocation_mode, vm_provider, state, pool\n\nBind Domain to Encap Pools on Cisco ACI fabrics.',
 'aci_domain_to_vlan_pool': 'Bind Domain to VLAN Pools (infra:RsVlanNs)\n\nArguments: domain_type, domain, pool_allocation_mode, vm_provider, state, pool\n\nBind Domain to VLAN Pools on Cisco ACI fabrics.',
 'aci_encap_pool': 'Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)\n\nArguments: pool_type, state, pool_allocation_mode, description, pool\n\nManage vlan, vxlan, and vsan pools on Cisco ACI fabrics.',
 'aci_encap_pool_range': 'Manage encap ranges assigned to pools (fvns:EncapBlk, fvns:VsanEncapBlk)\n\nArguments: range_end, range_start, pool_allocation_mode, description, pool_type, state, allocation_mode, pool, range_name\n\nManage vlan, vxlan, and vsan ranges that are assigned to pools on Cisco ACI fabrics.',
 'aci_epg': 'Manage End Point Groups (EPG) objects (fv:AEPg)\n\nArguments: bd, description, fwd_control, priority, ap, state, preferred_group, epg, intra_epg_isolation, tenant\n\nManage End Point Groups (EPG) on Cisco ACI fabrics.',
 'aci_epg_monitoring_policy': 'Manage monitoring policies (mon:EPGPol)\n\nArguments: monitoring_policy, description, tenant, state\n\nManage monitoring policies on Cisco ACI fabrics.',
 'aci_epg_to_contract': 'Bind EPGs to Contracts (fv:RsCons, fv:RsProv)\n\nArguments: contract, priority, ap, state, contract_type, epg, provider_match, tenant\n\nBind EPGs to Contracts on Cisco ACI fabrics.',
 'aci_epg_to_domain': 'Bind EPGs to Domains (fv:RsDomAtt)\n\nArguments: domain, ap, allow_useg, switching_mode, deploy_immediacy, resolution_immediacy, domain_type, primary_encap, state, encap, encap_mode, epg, vm_provider, netflow, tenant\n\nBind EPGs to Physical and Virtual Domains on Cisco ACI fabrics.',
 'aci_fabric_node': 'Manage Fabric Node Members (fabric:NodeIdentP)\n\nArguments: state, node_id, role, description, serial, switch, pod_id\n\nManage Fabric Node Members on Cisco ACI fabrics.',
 'aci_fabric_scheduler': 'This modules creates ACI schedulers.\n\nArguments: name, hour, state, concurCap, windowname, date, maxTime, recurring, day, minute, description\n\nWith the module you can create schedule policies that can be a shell, onetime execution or recurring',
 'aci_filter': 'Manages top level filter objects (vz:Filter)\n\nArguments: filter, state, description, tenant\n\nManages top level filter objects on Cisco ACI fabrics.\nThis modules does not manage filter entries, see M(aci_filter_entry) for this functionality.',
 'aci_filter_entry': 'Manage filter entries (vz:Entry)\n\nArguments: filter, dst_port_start, dst_port_end, description, icmp6_msg_type, icmp_msg_type, arp_flag, stateful, state, ether_type, dst_port, entry, tenant, ip_protocol\n\nManage filter entries for a filter on Cisco ACI fabrics.',
 'aci_firmware_group': 'This module creates a firmware group\n\nArguments: state, firmwarepol, group\n\nThis module creates a firmware group, so that you can apply firmware policy to nodes.',
 'aci_firmware_group_node': 'This modules adds and remove nodes from the firmware group\n\nArguments: node, state, group\n\nThis module addes/deletes a node to the firmware group. This modules assigns 1 node at a time.',
 'aci_firmware_policy': 'This creates a firmware policy\n\nArguments: ignoreCompat, state, version, name\n\nThis module creates a firmware policy for firmware groups. The firmware policy is create first and then\nreferenced by the firmware group. You will assign the firmware and specify if you want to ignore the compatibility\ncheck',
 'aci_firmware_source': 'Manage firmware image sources (firmware:OSource)\n\nArguments: url_password, url_protocol, url_username, source, url, polling_interval, state\n\nManage firmware image sources on Cisco ACI fabrics.',
 'aci_interface_policy_cdp': 'Manage CDP interface policies (cdp:IfPol)\n\nArguments: cdp_policy, admin_state, description, state\n\nManage CDP interface policies on Cisco ACI fabrics.',
 'aci_interface_policy_fc': 'Manage Fibre Channel interface policies (fc:IfPol)\n\nArguments: state, fc_policy, port_mode, description\n\nManage ACI Fiber Channel interface policies on Cisco ACI fabrics.',
 'aci_interface_policy_l2': 'Manage Layer 2 interface policies (l2:IfPol)\n\nArguments: state, description, vepa, vlan_scope, l2_policy, qinq\n\nManage Layer 2 interface policies on Cisco ACI fabrics.',
 'aci_interface_policy_leaf_policy_group': 'Manage fabric interface policy leaf policy groups (infra:AccBndlGrp, infra:AccPortGrp)\n\nArguments: stp_interface_policy, description, egress_data_plane_policing_policy, cdp_policy, storm_control_interface_policy, port_channel_policy, mcp_policy, lag_type, monitoring_policy, aep, priority_flow_control_policy, fibre_channel_interface_policy, l2_interface_policy, policy_group, port_security_policy, link_level_policy, state, ingress_data_plane_policing_policy, slow_drain_policy, lldp_policy\n\nManage fabric interface policy leaf policy groups on Cisco ACI fabrics.',
 'aci_interface_policy_leaf_profile': 'Manage fabric interface policy leaf profiles (infra:AccPortP)\n\nArguments: state, leaf_interface_profile, description\n\nManage fabric interface policy leaf profiles on Cisco ACI fabrics.',
 'aci_interface_policy_lldp': 'Manage LLDP interface policies (lldp:IfPol)\n\nArguments: receive_state, lldp_policy, transmit_state, description, state\n\nManage LLDP interface policies on Cisco ACI fabrics.',
 'aci_interface_policy_mcp': 'Manage MCP interface policies (mcp:IfPol)\n\nArguments: state, admin_state, description, mcp\n\nManage MCP interface policies on Cisco ACI fabrics.',
 'aci_interface_policy_ospf': 'Manage OSPF interface policies (ospf:IfPol)\n\nArguments: tenant, retransmit_interval, cost, description, controls, priority, state, dead_interval, prefix_suppression, hello_interval, ospf, network_type, transmit_delay\n\nManage OSPF interface policies on Cisco ACI fabrics.',
 'aci_interface_policy_port_channel': 'Manage port channel interface policies (lacp:LagPol)\n\nArguments: graceful_convergence, description, load_defer, symmetric_hash, suspend_individual, state, mode, min_links, port_channel, fast_select, max_links\n\nManage port channel interface policies on Cisco ACI fabrics.',
 'aci_interface_policy_port_security': 'Manage port security (l2:PortSecurityPol)\n\nArguments: port_security, port_security_timeout, max_end_points, description, state\n\nManage port security on Cisco ACI fabrics.',
 'aci_interface_selector_to_switch_policy_leaf_profile': 'Bind interface selector profiles to switch policy leaf profiles (infra:RsAccPortP)\n\nArguments: interface_selector, state, leaf_profile\n\nBind interface selector profiles to switch policy leaf profiles on Cisco ACI fabrics.',
 'aci_l3out': 'Manage Layer 3 Outside (L3Out) objects (l3ext:Out)\n\nArguments: domain, description, dscp, l3protocol, l3out, state, route_control, vrf, asn, tenant\n\nManage Layer 3 Outside (L3Out) on Cisco ACI fabrics.',
 'aci_l3out_extepg': 'Manage External Network Instance Profile (ExtEpg) objects (l3extInstP:instP)\n\nArguments: l3out, state, preferred_group, description, extepg, dscp, tenant\n\nManage External Network Instance Profile (ExtEpg) objects (l3extInstP:instP)',
 'aci_l3out_extsubnet': 'Manage External Subnet objects (l3extSubnet:extsubnet)\n\nArguments: description, l3out, state, subnet_name, extepg, scope, tenant, network\n\nManage External Subnet objects (l3extSubnet:extsubnet)',
 'aci_l3out_route_tag_policy': 'Manage route tag policies (l3ext:RouteTagPol)\n\nArguments: state, tag, rtp, tenant, description\n\nManage route tag policies on Cisco ACI fabrics.',
 'aci_maintenance_group': 'This creates an ACI maintenance group\n\nArguments: policy, state, group\n\nThis modules creates an ACI maintenance group',
 'aci_maintenance_group_node': 'Manage maintenance group nodes\n\nArguments: node, state, group\n\nManage maintenance group nodes',
 'aci_maintenance_policy': 'Manage firmware maintenance policies\n\nArguments: runmode, state, name, scheduler, ignoreCompat, graceful, adminst\n\nManage maintenance policies that defines behavior during an ACI upgrade.',
 'aci_rest': 'Direct access to the Cisco APIC REST API\n\nArguments: content, path, method, src\n\nEnables the management of the Cisco ACI fabric through direct access to the Cisco APIC REST API.\nThanks to the idempotent nature of the APIC, this module is idempotent and reports changes.',
 'aci_static_binding_to_epg': 'Bind static paths to EPGs (fv:RsPathAtt)\n\nArguments: interface_mode, description, interface_type, primary_encap_id, deploy_immediacy, encap_id, ap, state, leafs, interface, epg, pod_id, tenant, extpaths\n\nBind static paths to EPGs on Cisco ACI fabrics.',
 'aci_switch_leaf_selector': 'Bind leaf selectors to switch policy leaf profiles (infra:LeafS, infra:NodeBlk, infra:RsAccNodePGrep)\n\nArguments: from, description, leaf_profile, to, state, leaf_node_blk_description, leaf, leaf_node_blk, policy_group\n\nBind leaf selectors (with node block range and policy group) to switch policy leaf profiles on Cisco ACI fabrics.',
 'aci_switch_policy_leaf_profile': 'Manage switch policy leaf profiles (infra:NodeP)\n\nArguments: state, description, leaf_profile\n\nManage switch policy leaf profiles on Cisco ACI fabrics.',
 'aci_switch_policy_vpc_protection_group': 'Manage switch policy explicit vPC protection groups (fabric:ExplicitGEp, fabric:NodePEp).\n\nArguments: vpc_domain_policy, state, protection_group, switch_2_id, switch_1_id, protection_group_id\n\nManage switch policy explicit vPC protection groups on Cisco ACI fabrics.',
 'aci_taboo_contract': 'Manage taboo contracts (vz:BrCP)\n\nArguments: scope, taboo_contract, description, tenant, state\n\nManage taboo contracts on Cisco ACI fabrics.',
 'aci_tenant': 'Manage tenants (fv:Tenant)\n\nArguments: state, description, tenant\n\nManage tenants on Cisco ACI fabrics.',
 'aci_tenant_action_rule_profile': 'Manage action rule profiles (rtctrl:AttrP)\n\nArguments: action_rule, state, description, tenant\n\nManage action rule profiles on Cisco ACI fabrics.',
 'aci_tenant_ep_retention_policy': 'Manage End Point (EP) retention protocol policies (fv:EpRetPol)\n\nArguments: description, hold_interval, epr_policy, bounce_trigger, state, local_ep_interval, bounce_age, move_frequency, remote_ep_interval, tenant\n\nManage End Point (EP) retention protocol policies on Cisco ACI fabrics.',
 'aci_tenant_span_dst_group': 'Manage SPAN destination groups (span:DestGrp)\n\nArguments: state, dst_group, description, tenant\n\nManage SPAN destination groups on Cisco ACI fabrics.',
 'aci_tenant_span_src_group': 'Manage SPAN source groups (span:SrcGrp)\n\nArguments: state, admin_state, description, dst_group, tenant, src_group\n\nManage SPAN source groups on Cisco ACI fabrics.',
 'aci_tenant_span_src_group_to_dst_group': 'Bind SPAN source groups to destination groups (span:SpanLbl)\n\nArguments: state, dst_group, description, tenant, src_group\n\nBind SPAN source groups to associated destination groups on Cisco ACI fabrics.',
 'aci_vlan_pool': 'Manage VLAN pools (fvns:VlanInstP)\n\nArguments: state, pool_allocation_mode, description, pool\n\nManage VLAN pools on Cisco ACI fabrics.',
 'aci_vlan_pool_encap_block': 'Manage encap blocks assigned to VLAN pools (fvns:EncapBlk)\n\nArguments: pool_allocation_mode, block_end, description, block_start, block_name, state, allocation_mode, pool\n\nManage VLAN encap blocks that are assigned to VLAN pools on Cisco ACI fabrics.',
 'aci_vmm_credential': 'Manage virtual domain credential profiles (vmm:UsrAccP)\n\nArguments: domain, name, credential_username, vm_provider, state, credential_password, description\n\nManage virtual domain credential profiles on Cisco ACI fabrics.',
 'aci_vrf': 'Manage contexts or VRFs (fv:Ctx)\n\nArguments: tenant, state, policy_control_preference, description, policy_control_direction, vrf\n\nManage contexts or VRFs on Cisco ACI fabrics.\nEach context is a private network associated to a tenant, i.e. VRF.',
 'acl': 'Set and retrieve file ACL information.\n\nArguments: recursive, default, recalculate_mask, entity, state, follow, etype, entry, path, permissions, use_nfsv4_acls\n\nSet and retrieve file ACL information.',
 'acme_account': "Create, modify or delete ACME accounts\n\nArguments: state, contact, terms_agreed, new_account_key_content, new_account_key_src, allow_creation\n\nAllows to create, modify or delete accounts with a CA supporting the L(ACME protocol,https://tools.ietf.org/html/rfc8555), such as L(Let's Encrypt,https://letsencrypt.org/).\nThis module only works with the ACME v2 protocol.",
 'acme_account_info': "Retrieves information on ACME accounts\n\nArguments: retrieve_orders\n\nAllows to retrieve information on accounts a CA supporting the L(ACME protocol,https://tools.ietf.org/html/rfc8555), such as L(Let's Encrypt,https://letsencrypt.org/).\nThis module only works with the ACME v2 protocol.",
 'acme_certificate': "Create SSL/TLS certificates with the ACME protocol\n\nArguments: force, account_email, dest, remaining_days, challenge, fullchain_dest, modify_account, agreement, data, retrieve_all_alternates, terms_agreed, csr, chain_dest, deactivate_authzs\n\nCreate and renew SSL/TLS certificates with a CA supporting the L(ACME protocol,https://tools.ietf.org/html/rfc8555), such as L(Let's Encrypt,https://letsencrypt.org/) or L(Buypass,https://www.buypass.com/). The current implementation supports the C(http-01), C(dns-01) and C(tls-alpn-01) challenges.\nTo use this module, it has to be executed twice. Either as two different tasks in the same run or during two runs. Note that the output of the first run needs to be recorded and passed to the second run as the module argument C(data).\nBetween these two tasks you have to fulfill the required steps for the chosen challenge by whatever means necessary. For C(http-01) that means creating the necessary challenge file on the destination webserver. For C(dns-01) the necessary dns record has to be created. For C(tls-alpn-01) the necessary certificate has to be created and served. It is I(not) the responsibility of this module to perform these steps.\nFor details on how to fulfill these challenges, you might have to read through L(the main ACME specification,https://tools.ietf.org/html/rfc8555#section-8) and the L(TLS-ALPN-01 specification,https://www.rfc-editor.org/rfc/rfc8737.html#section-3). Also, consider the examples provided for this module.\nThe module includes experimental support for IP identifiers according to the L(RFC 8738,https://www.rfc-editor.org/rfc/rfc8738.html).",
 'acme_certificate_revoke': "Revoke certificates with the ACME protocol\n\nArguments: private_key_content, private_key_src, account_key_content, certificate, revoke_reason, account_key_src\n\nAllows to revoke certificates issued by a CA supporting the L(ACME protocol,https://tools.ietf.org/html/rfc8555), such as L(Let's Encrypt,https://letsencrypt.org/).",
 'acme_challenge_cert_helper': 'Prepare certificates required for ACME challenges such as C(tls-alpn-01)\n\nArguments: challenge_data, private_key_src, challenge, private_key_content\n\nPrepares certificates for ACME challenges such as C(tls-alpn-01).\nThe raw data is provided by the M(acme_certificate) module, and needs to be converted to a certificate to be used for challenge validation. This module provides a simple way to generate the required certificates.',
 'acme_inspect': "Send direct requests to an ACME server\n\nArguments: url, content, fail_on_acme_error, method\n\nAllows to send direct requests to an ACME server with the L(ACME protocol,https://tools.ietf.org/html/rfc8555), which is supported by CAs such as L(Let's Encrypt,https://letsencrypt.org/).\nThis module can be used to debug failed certificate request attempts, for example when M(acme_certificate) fails or encounters a problem which you wish to investigate.\nThe module can also be used to directly access features of an ACME servers which are not yet supported by the Ansible ACME modules.",
 'add_host': 'Add a host (and alternatively a group) to the ansible-playbook in-memory inventory\n\nArguments: name, groups\n\nUse variables to create new hosts and groups in inventory for use in later plays of the same playbook.\nTakes variables so you can define the new hosts more fully.\nThis module is also supported for Windows targets.',
 'aerospike_migrations': 'Check or wait for migrations between nodes\n\nArguments: tries_limit, consecutive_good_checks, local_only, min_cluster_size, migrate_tx_key, port, host, target_cluster_size, fail_on_cluster_change, sleep_between_checks, connect_timeout, migrate_rx_key\n\nThis can be used to check for migrations in a cluster. This makes it easy to do a rolling upgrade/update on Aerospike nodes.\nIf waiting for migrations is not desired, simply just poll until port 3000 if available or asinfo -v status returns ok',
 'airbrake_deployment': 'Notify airbrake about app deployments\n\nArguments: repo, environment, token, user, url, validate_certs, revision\n\nNotify airbrake about app deployments (see http://help.airbrake.io/kb/api-2/deploy-tracking)',
 'aireos_command': 'Run commands on remote devices running Cisco WLC\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an aireos node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nCommands run in configuration mode with this module are not idempotent. Please use M(aireos_config) to configure WLC devices.',
 'aireos_config': 'Manage Cisco WLC configurations\n\nArguments: src, backup_options, after, lines, diff_against, intended_config, running_config, save, before, save_when, backup, match, diff_ignore_lines\n\nAireOS does not use a block indent file syntax, so there are no sections or parents. This module provides an implementation for working with AireOS configurations in a deterministic way.',
 'aix_devices': 'Manages AIX devices\n\nArguments: device, attributes, state, force, recursive\n\nThis module discovers, defines, removes and modifies attributes of AIX devices.',
 'aix_filesystem': 'Configure LVM and NFS file systems for AIX\n\nArguments: vg, account_subsystem, auto_mount, mount_group, state, fs_type, rm_mount_point, filesystem, device, attributes, permissions, nfs_server, size\n\nThis module creates, removes, mount and unmount LVM and NFS file system for AIX using C(/etc/filesystems).\nFor LVM file systems is possible to resize a file system.',
 'aix_inittab': 'Manages the inittab on AIX\n\nArguments: action, state, command, name, runlevel, insertafter\n\nManages the inittab on AIX.',
 'aix_lvg': 'Manage LVM volume groups on AIX\n\nArguments: pvs, force, vg, pp_size, state, vg_type\n\nThis module creates, removes or resize volume groups on AIX LVM.',
 'aix_lvol': 'Configure AIX LVM logical volumes\n\nArguments: pvs, lv_type, vg, copies, lv, state, policy, opts, size\n\nThis module creates, removes or resizes AIX logical volumes. Inspired by lvol module.',
 'ali_instance': 'Create, Start, Stop, Restart or Terminate an Instance in ECS. Add or Remove Instance to/from a Security Group.\n\nArguments: max_bandwidth_in, force, auto_renew, availability_zone, key_name, system_disk_size, period, instance_ids, user_data, image_id, auto_renew_period, system_disk_description, password, security_groups, internet_charge_type, count, allocate_public_ip, instance_type, vswitch_id, description, max_bandwidth_out, instance_name, system_disk_name, state, host_name, count_tag, instance_tags, instance_charge_type, system_disk_category\n\nCreate, start, stop, restart, modify or terminate ecs instances.\nAdd or remove ecs instances to/from security group.',
 'ali_instance_info': 'Gather information on instances of Alibaba Cloud ECS.\n\nArguments: instance_names, instance_tags, instance_ids, availability_zone\n\nThis module fetches data from the Open API in Alicloud. The module must be called from within the ECS instance itself.\nThis module was called C(ali_instance_facts) before Ansible 2.9. The usage did not change.',
 'alternatives': "Manages alternative programs for common commands\n\nArguments: priority, path, link, name\n\nManages symbolic links using the 'update-alternatives' tool.\nUseful when multiple programs are installed but provide similar functionality (e.g. different editors).",
 'apache2_mod_proxy': "Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool\n\nArguments: tls, balancer_vhost, member_host, validate_certs, state, balancer_url_suffix\n\nSet and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool, using HTTP POST and GET requests. The httpd mod_proxy balancer-member status page has to be enabled and accessible, as this module relies on parsing this page. This module supports ansible check_mode, and requires BeautifulSoup python module.",
 'apache2_module': 'Enables/disables a module of the Apache2 webserver.\n\nArguments: state, identifier, force, name, ignore_configcheck\n\nEnables or disables a specified module of the Apache2 webserver.',
 'apk': 'Manages apk packages\n\nArguments: available, state, upgrade, update_cache, name, repository\n\nManages I(apk) packages for Alpine Linux.',
 'apt': 'Manages apt-packages\n\nArguments: autoremove, force, force_apt_get, update_cache, only_upgrade, deb, cache_valid_time, dpkg_options, upgrade, name, policy_rc_d, autoclean, purge, allow_unauthenticated, state, default_release, install_recommends\n\nManages I(apt) packages (such as for Debian/Ubuntu).',
 'apt_key': 'Add or remove an apt key\n\nArguments: keyserver, url, data, keyring, state, file, validate_certs, id\n\nAdd or remove an I(apt) key, optionally downloading it.',
 'apt_repo': 'Manage APT repositories via apt-repo\n\nArguments: repo, state, remove_others, update\n\nManages APT repositories using apt-repo tool.\nSee U(https://www.altlinux.org/Apt-repo) for details about apt-repo',
 'apt_repository': 'Add and remove APT repositories\n\nArguments: repo, state, update_cache, mode, codename, validate_certs, filename\n\nAdd or remove an APT repositories in Ubuntu and Debian.',
 'apt_rpm': 'apt_rpm package manager\n\nArguments: state, update_cache, pkg\n\nManages packages with I(apt-rpm). Both low-level (I(rpm)) and high-level (I(apt-get)) package manager binaries required.',
 'archive': 'Creates a compressed archive of one or more files or trees\n\nArguments: force_archive, exclude_path, format, dest, path, remove\n\nPacks an archive.\nIt is the opposite of M(unarchive).\nBy default, it assumes the compression source exists on the target.\nIt will not copy the source file from the local system to the target before archiving.\nSource files can be deleted after archival by specifying I(remove=True).',
 'aruba_command': 'Run commands on remote devices running Aruba Mobility Controller\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an aruba node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(aruba_config) to configure Aruba devices.',
 'aruba_config': 'Manage Aruba configuration sections\n\nArguments: src, backup_options, encrypt, after, lines, intended_config, diff_against, parents, save_when, before, running_config, replace, backup, match, diff_ignore_lines\n\nAruba configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with Aruba configuration sections in a deterministic way.',
 'asa_acl': 'Manage access-lists on a Cisco ASA\n\nArguments: force, before, config, after, lines, match, replace\n\nThis module allows you to work with access-lists on a Cisco ASA device.',
 'asa_command': 'Run arbitrary commands on Cisco ASA devices\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an ASA node and returns the results read from the device. The C(asa_command) module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'asa_config': 'Manage configuration sections on Cisco ASA devices\n\nArguments: src, passwords, backup, after, lines, replace, backup_options, parents, defaults, save, config, match, before\n\nCisco ASA configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with ASA configuration sections in a deterministic way.',
 'asa_og': 'Manage object groups on a Cisco ASA\n\nArguments: protocol, description, name, ip_mask, host_ip, group_object, port_range, state, port_eq, group_type, service_cfg\n\nThis module allows you to create and update object-group network/service on Cisco ASA device.',
 'assemble': 'Assemble configuration files from fragments\n\nArguments: ignore_hidden, src, remote_src, dest, delimiter, regexp, validate, backup\n\nAssembles a configuration file from fragments.\nOften a particular program will take a single configuration file and does not support a C(conf.d) style structure where it is easy to build up the configuration from multiple sources. C(assemble) will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file.\nFiles are assembled in string sorting order.\nPuppet calls this idea I(fragments).',
 'assert': 'Asserts given expressions are true\n\nArguments: fail_msg, success_msg, quiet, that\n\nThis module asserts that given expressions are true with an optional custom message.\nThis module is also supported for Windows targets.',
 'async_status': 'Obtain status of asynchronous task\n\nArguments: jid, mode\n\nThis module gets the status of an asynchronous task.\nThis module is also supported for Windows targets.',
 'async_wrapper': 'Manage Layer-3 interfaces on Lenovo CNOS network devices.\n\nArguments: state, name, ipv6, aggregate, provider, ipv4\n\nRemoved keyword',
 'at': "Schedule the execution of a command or script file via the at command\n\nArguments: count, state, command, units, unique, script_file\n\nUse this module to schedule a command or script file to run once in the future.\nAll jobs are executed in the 'a' queue.",
 'atomic_container': 'Manage the containers on the atomic host platform\n\nArguments: state, values, name, rootfs, image, backend, mode\n\nManage the containers on the atomic host platform\nAllows to manage the lifecycle of a container on the atomic host platform',
 'atomic_host': 'Manage the atomic host platform\n\nArguments: revision\n\nManage the atomic host platform.\nRebooting of Atomic host platform should be done outside this module.',
 'atomic_image': 'Manage the container images on the atomic host platform\n\nArguments: started, state, name, backend\n\nManage the container images on the atomic host platform.\nAllows to execute the commands specified by the RUN label in the container image when present.',
 'authorized_key': 'Adds or removes an SSH authorized key\n\nArguments: comment, exclusive, key_options, state, user, key, path, follow, validate_certs, manage_dir\n\nAdds or removes SSH authorized keys for particular user accounts.',
 'avi_actiongroupconfig': 'Module for setup of ActionGroupConfig Avi RESTful Object\n\nArguments: snmp_trap_profile_ref, uuid, name, level, url, syslog_config_ref, tenant_ref, state, action_script_config_ref, autoscale_trigger_notification, avi_api_patch_op, external_only, email_config_ref, avi_api_update_method, description\n\nThis module is used to configure ActionGroupConfig object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_alertconfig': 'Module for setup of AlertConfig Avi RESTful Object\n\nArguments: description, tenant_ref, object_type, autoscale_alert, obj_uuid, recommendation, threshold, throttle, avi_api_update_method, name, category, expiry_time, uuid, url, enabled, avi_api_patch_op, summary, rolling_window, source, state, alert_rule, action_group_ref\n\nThis module is used to configure AlertConfig object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_alertemailconfig': 'Module for setup of AlertEmailConfig Avi RESTful Object\n\nArguments: to_emails, uuid, url, description, cc_emails, tenant_ref, state, avi_api_patch_op, avi_api_update_method, name\n\nThis module is used to configure AlertEmailConfig object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_alertscriptconfig': 'Module for setup of AlertScriptConfig Avi RESTful Object\n\nArguments: action_script, uuid, url, tenant_ref, state, avi_api_patch_op, avi_api_update_method, name\n\nThis module is used to configure AlertScriptConfig object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_alertsyslogconfig': 'Module for setup of AlertSyslogConfig Avi RESTful Object\n\nArguments: syslog_servers, uuid, url, description, tenant_ref, state, avi_api_patch_op, avi_api_update_method, name\n\nThis module is used to configure AlertSyslogConfig object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_analyticsprofile': 'Module for setup of AnalyticsProfile Avi RESTful Object\n\nArguments: disable_se_analytics, apdex_server_rtt_tolerated_factor, hs_security_tls12_score, exclude_no_dns_record_as_error, conn_server_lossy_zero_win_size_event_threshold, conn_lossy_total_rexmt_threshold, healthscore_max_server_limit, hs_pscore_traffic_threshold_l4_client, exclude_no_valid_gs_member_as_error, enable_advanced_analytics, hs_security_cipherscore_ge128b, uuid, exclude_invalid_dns_domain_as_error, exclude_http_error_codes, hs_max_anomaly_penalty, avi_api_patch_op, sip_log_depth, exclude_persistence_change_as_error, conn_server_lossy_ooo_threshold, hs_security_selfsignedcert_penalty, conn_server_lossy_total_rexmt_threshold, exclude_unsupported_dns_query_as_error, exclude_syn_retransmit_as_error, hs_security_hsts_penalty, apdex_rum_threshold, avi_api_update_method, conn_lossy_zero_win_size_event_threshold, hs_security_encalgo_score_rc4, name, apdex_rtt_threshold, disable_vs_analytics, tenant_ref, apdex_response_tolerated_factor, exclude_tcp_reset_as_error, hs_security_chain_invalidity_penalty, exclude_invalid_dns_query_as_error, conn_lossy_ooo_threshold, hs_security_cipherscore_lt128b, hs_security_encalgo_score_none, hs_event_throttle_window, apdex_rtt_tolerated_factor, hs_security_nonpfs_penalty, hs_security_certscore_gt30d, exclude_server_tcp_reset_as_error, hs_min_dos_rate, hs_max_resources_penalty, client_log_streaming_config, disable_ondemand_metrics, exclude_sip_error_codes, apdex_server_response_threshold, hs_performance_boost, client_log_config, exclude_gs_down_as_error, apdex_server_response_tolerated_factor, state, disable_server_analytics, conn_server_lossy_timeo_rexmt_threshold, exclude_client_close_before_request_as_error, hs_security_weak_signature_algo_penalty, conn_lossy_timeo_rexmt_threshold, ondemand_metrics_idle_timeout, hs_security_certscore_le30d, description, hs_security_ssl30_score, apdex_rum_tolerated_factor, hs_security_cipherscore_eq000b, ranges, apdex_server_rtt_threshold, exclude_server_dns_error_as_error, hs_security_tls11_score, resp_code_block, hs_security_certscore_le07d, hs_pscore_traffic_threshold_l4_server, hs_max_security_penalty, sensitive_log_profile, exclude_dns_policy_drop_as_significant, url, hs_security_tls10_score, hs_security_certscore_expired, apdex_response_threshold\n\nThis module is used to configure AnalyticsProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_api_session': 'Avi API Module\n\nArguments: data, http_method, params, timeout, path\n\nThis module can be used for calling any resources defined in Avi REST API. U(https://avinetworks.com/)\nThis module is useful for invoking HTTP Patch methods and accessing resources that do not have an REST object associated with them.',
 'avi_api_version': 'Avi API Version Module\n\nArguments: \n\nThis module can be used to obtain the version of the Avi REST API. U(https://avinetworks.com/)',
 'avi_applicationpersistenceprofile': 'Module for setup of ApplicationPersistenceProfile Avi RESTful Object\n\nArguments: uuid, app_cookie_persistence_profile, state, persistence_type, name, tenant_ref, is_federated, server_hm_down_recovery, http_cookie_persistence_profile, url, avi_api_patch_op, ip_persistence_profile, hdr_persistence_profile, avi_api_update_method, description\n\nThis module is used to configure ApplicationPersistenceProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_applicationprofile': 'Module for setup of ApplicationProfile Avi RESTful Object\n\nArguments: description, state, http_profile, preserve_client_port, dos_rl_profile, preserve_client_ip, avi_api_update_method, name, tcp_app_profile, uuid, dns_service_profile, tenant_ref, sip_service_profile, created_by, url, avi_api_patch_op, cloud_config_cksum, type\n\nThis module is used to configure ApplicationProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_authprofile': 'Module for setup of AuthProfile Avi RESTful Object\n\nArguments: pa_agent_ref, http, uuid, saml, url, tenant_ref, state, name, avi_api_patch_op, tacacs_plus, ldap, type, avi_api_update_method, description\n\nThis module is used to configure AuthProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_autoscalelaunchconfig': 'Module for setup of AutoScaleLaunchConfig Avi RESTful Object\n\nArguments: uuid, mesos, url, tenant_ref, state, name, image_id, avi_api_patch_op, use_external_asg, openstack, avi_api_update_method, description\n\nThis module is used to configure AutoScaleLaunchConfig object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_backup': 'Module for setup of Backup Avi RESTful Object\n\nArguments: scheduler_ref, uuid, local_file_url, url, file_name, remote_file_url, tenant_ref, state, backup_config_ref, avi_api_patch_op, timestamp, avi_api_update_method\n\nThis module is used to configure Backup object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_backupconfiguration': 'Module for setup of BackupConfiguration Avi RESTful Object\n\nArguments: avi_api_update_method, aws_bucket_id, remote_directory, remote_hostname, backup_passphrase, aws_secret_access, upload_to_s3, ssh_user_ref, name, aws_access_key, uuid, url, tenant_ref, state, avi_api_patch_op, save_local, maximum_backups_stored, upload_to_remote_host, backup_file_prefix\n\nThis module is used to configure BackupConfiguration object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_certificatemanagementprofile': 'Module for setup of CertificateManagementProfile Avi RESTful Object\n\nArguments: name, url, tenant_ref, state, avi_api_patch_op, script_path, script_params, avi_api_update_method, uuid\n\nThis module is used to configure CertificateManagementProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_cloud': 'Module for setup of Cloud Avi RESTful Object\n\nArguments: vca_configuration, proxy_configuration, docker_configuration, oshiftk8s_configuration, autoscale_polling_interval, dhcp_enabled, rancher_configuration, vtype, uuid, linuxserver_configuration, custom_tags, state, gcp_configuration, nsx_configuration, avi_api_patch_op, apic_mode, dns_provider_ref, mesos_configuration, ip6_autocfg_enabled, openstack_configuration, enable_vip_static_routes, east_west_dns_provider_ref, ipam_provider_ref, cloudstack_configuration, avi_api_update_method, name, azure_configuration, license_tier, state_based_dns_registration, url, tenant_ref, mtu, east_west_ipam_provider_ref, obj_name_prefix, apic_configuration, prefer_static_routes, license_type, vcenter_configuration, aws_configuration\n\nThis module is used to configure Cloud object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_cloudconnectoruser': 'Module for setup of CloudConnectorUser Avi RESTful Object\n\nArguments: public_key, private_key, azure_serviceprincipal, name, url, tenant_ref, state, gcp_credentials, avi_api_patch_op, oci_credentials, azure_userpass, tencent_credentials, avi_api_update_method, uuid\n\nThis module is used to configure CloudConnectorUser object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_cloudproperties': 'Module for setup of CloudProperties Avi RESTful Object\n\nArguments: info, hyp_props, uuid, url, state, avi_api_patch_op, cc_props, cc_vtypes, avi_api_update_method\n\nThis module is used to configure CloudProperties object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_cluster': 'Module for setup of Cluster Avi RESTful Object\n\nArguments: uuid, name, url, tenant_ref, state, avi_api_patch_op, virtual_ip, nodes, avi_api_update_method, rejoin_nodes_automatically\n\nThis module is used to configure Cluster object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_clusterclouddetails': 'Module for setup of ClusterCloudDetails Avi RESTful Object\n\nArguments: name, url, tenant_ref, state, avi_api_patch_op, azure_info, avi_api_update_method, uuid\n\nThis module is used to configure ClusterCloudDetails object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_controllerproperties': 'Module for setup of ControllerProperties Avi RESTful Object\n\nArguments: vs_se_ping_fail, portal_token, cluster_ip_gratuitous_arp_period, persistence_key_rotate_period, bm_use_ansible, attach_ip_retry_interval, vs_se_vnic_fail, secure_channel_se_token_timeout, attach_ip_retry_limit, se_vnic_cooldown, vnic_op_fail_time, max_pcap_per_tenant, enable_memory_balancer, vs_se_bootup_fail, seupgrade_fabric_pool_size, cleanup_expired_authtoken_timeout_period, vs_key_rotate_period, seupgrade_segroup_min_dead_timeout, dns_refresh_period, max_dead_se_in_grp, upgrade_lease_time, warmstart_vs_resync_wait_time, avi_api_patch_op, se_create_timeout, query_host_fail, vs_apic_scaleout_timeout, unresponsive_se_reboot, state, process_pki_profile_timeout_period, se_offline_del, allow_ip_forwarding, upgrade_dns_ttl, fatal_error_lease_time, api_perf_logging_threshold, vs_se_attach_ip_fail, api_idle_timeout, max_seq_vnic_failures, allow_unauthenticated_nodes, allow_unauthenticated_apis, vs_scaleout_ready_check_interval, safenet_hsm_version, se_from_marketplace, warmstart_se_reconnect_wait_time, process_locked_useraccounts_timeout_period, consistency_check_timeout_period, avi_api_update_method, uuid, dummy, max_seq_attach_ip_failures, cleanup_sessions_timeout_period, secure_channel_cleanup_timeout, ssl_certificate_expiry_warning_days, vs_se_vnic_ip_fail, secure_channel_controller_token_timeout, url, vs_se_create_fail, cloud_reconcile, crashed_se_reboot, appviewx_compat_mode, vs_awaiting_se_timeout, enable_api_sharding, se_failover_attempt_interval, dead_se_detection_timer\n\nThis module is used to configure ControllerProperties object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_customipamdnsprofile': 'Module for setup of CustomIpamDnsProfile Avi RESTful Object\n\nArguments: name, url, tenant_ref, state, script_uri, avi_api_patch_op, script_params, avi_api_update_method, uuid\n\nThis module is used to configure CustomIpamDnsProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_dnspolicy': 'Module for setup of DnsPolicy Avi RESTful Object\n\nArguments: uuid, url, description, tenant_ref, state, created_by, avi_api_patch_op, rule, avi_api_update_method, name\n\nThis module is used to configure DnsPolicy object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_errorpagebody': 'Module for setup of ErrorPageBody Avi RESTful Object\n\nArguments: name, format, url, tenant_ref, state, error_page_body, avi_api_patch_op, avi_api_update_method, uuid\n\nThis module is used to configure ErrorPageBody object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_errorpageprofile': 'Module for setup of ErrorPageProfile Avi RESTful Object\n\nArguments: uuid, error_pages, tenant_ref, state, name, url, avi_api_patch_op, company_name, host_name, avi_api_update_method, app_name\n\nThis module is used to configure ErrorPageProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_gslb': 'Module for setup of Gslb Avi RESTful Object\n\nArguments: description, state, maintenance_mode, view_id, sites, dns_configs, leader_cluster_uuid, async_interval, send_interval_prior_to_maintenance_mode, name, uuid, url, tenant_ref, is_federated, clear_on_max_retries, avi_api_patch_op, send_interval, avi_api_update_method, client_ip_addr_group, third_party_sites\n\nThis module is used to configure Gslb object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_gslbgeodbprofile': 'Module for setup of GslbGeoDbProfile Avi RESTful Object\n\nArguments: uuid, state, url, tenant_ref, is_federated, name, avi_api_patch_op, entries, avi_api_update_method, description\n\nThis module is used to configure GslbGeoDbProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_gslbservice': 'Module for setup of GslbService Avi RESTful Object\n\nArguments: hm_off, description, wildcard_match, application_persistence_profile_ref, enabled, domain_names, is_federated, use_edns_client_subnet, groups, ttl, health_monitor_scope, avi_api_update_method, name, controller_health_status_enabled, uuid, url, down_response, tenant_ref, avi_api_patch_op, created_by, health_monitor_refs, state, site_persistence_enabled, min_members, pool_algorithm, num_dns_ip\n\nThis module is used to configure GslbService object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_gslbservice_patch_member': 'Avi API Module\n\nArguments: data, state, params, name\n\nThis module can be used for calling any resources defined in Avi REST API. U(https://avinetworks.com/)\nThis module is useful for invoking HTTP Patch methods and accessing resources that do not have an REST object associated with them.',
 'avi_hardwaresecuritymodulegroup': 'Module for setup of HardwareSecurityModuleGroup Avi RESTful Object\n\nArguments: name, url, tenant_ref, state, hsm, avi_api_patch_op, avi_api_update_method, uuid\n\nThis module is used to configure HardwareSecurityModuleGroup object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_healthmonitor': 'Module for setup of HealthMonitor Avi RESTful Object\n\nArguments: https_monitor, receive_timeout, description, radius_monitor, is_federated, udp_monitor, http_monitor, avi_api_update_method, successful_checks, monitor_port, sip_monitor, uuid, url, dns_monitor, tenant_ref, avi_api_patch_op, name, failed_checks, tcp_monitor, state, send_interval, external_monitor, type\n\nThis module is used to configure HealthMonitor object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_httppolicyset': 'Module for setup of HTTPPolicySet Avi RESTful Object\n\nArguments: is_internal_policy, uuid, url, tenant_ref, state, created_by, name, avi_api_patch_op, cloud_config_cksum, http_security_policy, http_request_policy, http_response_policy, avi_api_update_method, description\n\nThis module is used to configure HTTPPolicySet object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_ipaddrgroup': 'Module for setup of IpAddrGroup Avi RESTful Object\n\nArguments: description, marathon_service_port, ranges, addrs, avi_api_update_method, uuid, country_codes, name, url, tenant_ref, state, apic_epg_name, prefixes, avi_api_patch_op, marathon_app_name, ip_ports\n\nThis module is used to configure IpAddrGroup object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_ipamdnsproviderprofile': 'Module for setup of IpamDnsProviderProfile Avi RESTful Object\n\nArguments: state, proxy_configuration, infoblox_profile, allocate_ip_in_vrf, oci_profile, internal_profile, aws_profile, tencent_profile, avi_api_update_method, uuid, azure_profile, openstack_profile, name, gcp_profile, url, tenant_ref, custom_profile, avi_api_patch_op, type\n\nThis module is used to configure IpamDnsProviderProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_l4policyset': 'Module for setup of L4PolicySet Avi RESTful Object\n\nArguments: l4_connection_policy, uuid, url, tenant_ref, state, created_by, name, avi_api_patch_op, is_internal_policy, avi_api_update_method, description\n\nThis module is used to configure L4PolicySet object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_microservicegroup': 'Module for setup of MicroServiceGroup Avi RESTful Object\n\nArguments: uuid, url, description, tenant_ref, state, created_by, avi_api_patch_op, service_refs, avi_api_update_method, name\n\nThis module is used to configure MicroServiceGroup object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_network': 'Module for setup of Network Avi RESTful Object\n\nArguments: exclude_discovered_subnets, ip6_autocfg_enabled, vrf_context_ref, vcenter_dvs, uuid, configured_subnets, name, vimgrnw_ref, cloud_ref, tenant_ref, state, synced_from_se, dhcp_enabled, url, avi_api_patch_op, avi_api_update_method\n\nThis module is used to configure Network object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_networkprofile': 'Module for setup of NetworkProfile Avi RESTful Object\n\nArguments: profile, uuid, url, description, tenant_ref, state, avi_api_patch_op, connection_mirror, avi_api_update_method, name\n\nThis module is used to configure NetworkProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_networksecuritypolicy': 'Module for setup of NetworkSecurityPolicy Avi RESTful Object\n\nArguments: uuid, rules, tenant_ref, state, created_by, name, url, avi_api_patch_op, cloud_config_cksum, avi_api_update_method, description\n\nThis module is used to configure NetworkSecurityPolicy object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_pkiprofile': 'Module for setup of PKIProfile Avi RESTful Object\n\nArguments: crls, name, state, url, ignore_peer_chain, tenant_ref, is_federated, created_by, ca_certs, avi_api_patch_op, validate_only_leaf_crl, crl_check, avi_api_update_method, uuid\n\nThis module is used to configure PKIProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_pool': 'Module for setup of Pool Avi RESTful Object\n\nArguments: host_check_enabled, delete_server_on_dns_refresh, capacity_estimation, servers, capacity_estimation_ttfb_thresh, fewest_tasks_feedback_delay, server_auto_scale, ipaddrgroup_ref, lookup_server_by_name, networks, lb_algorithm_hash, analytics_profile_ref, uuid, server_name, autoscale_policy_ref, ssl_profile_ref, created_by, apic_epg_name, application_persistence_profile_ref, inline_health_monitor, request_queue_depth, server_reselect, ab_priority, ssl_key_and_certificate_ref, avi_api_update_method, name, autoscale_launch_config_ref, tenant_ref, autoscale_networks, health_monitor_refs, min_health_monitors_up, external_autoscale_groups, vrf_ref, gslb_sp_enabled, lb_algorithm, use_service_port, rewrite_host_header_to_server_name, lb_algorithm_core_nonaffinity, conn_pool_properties, rewrite_host_header_to_sni, max_conn_rate_per_server, ab_pool, min_servers_up, fail_action, service_metadata, sni_enabled, cloud_ref, domain_name, east_west, placement_networks, graceful_disable_timeout, state, nsx_securitygroup, a_pool, pki_profile_ref, analytics_policy, default_server_port, description, enabled, avi_api_patch_op, server_timeout, request_queue_enabled, max_concurrent_connections_per_server, url, prst_hdr_name, server_count, lb_algorithm_consistent_hash_hdr, connection_ramp_duration, cloud_config_cksum\n\nThis module is used to configure Pool object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_poolgroup': 'Module for setup of PoolGroup Avi RESTful Object\n\nArguments: description, implicit_priority_labels, members, fail_action, service_metadata, avi_api_update_method, name, priority_labels_ref, uuid, cloud_ref, tenant_ref, state, created_by, url, avi_api_patch_op, cloud_config_cksum, min_servers, deployment_policy_ref\n\nThis module is used to configure PoolGroup object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_poolgroupdeploymentpolicy': 'Module for setup of PoolGroupDeploymentPolicy Avi RESTful Object\n\nArguments: target_test_traffic_ratio, evaluation_duration, description, test_traffic_ratio_rampup, rules, auto_disable_old_prod_pools, tenant_ref, state, name, url, avi_api_patch_op, webhook_ref, scheme, avi_api_update_method, uuid\n\nThis module is used to configure PoolGroupDeploymentPolicy object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_prioritylabels': 'Module for setup of PriorityLabels Avi RESTful Object\n\nArguments: uuid, cloud_ref, tenant_ref, state, name, url, avi_api_patch_op, equivalent_labels, avi_api_update_method, description\n\nThis module is used to configure PriorityLabels object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_role': 'Module for setup of Role Avi RESTful Object\n\nArguments: name, url, privileges, tenant_ref, state, avi_api_patch_op, avi_api_update_method, uuid\n\nThis module is used to configure Role object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_scheduler': 'Module for setup of Scheduler Avi RESTful Object\n\nArguments: state, enabled, backup_config_ref, frequency, scheduler_action, end_date_time, avi_api_update_method, uuid, start_date_time, name, url, tenant_ref, frequency_unit, avi_api_patch_op, run_script_ref, run_mode\n\nThis module is used to configure Scheduler object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_seproperties': 'Module for setup of SeProperties Avi RESTful Object\n\nArguments: se_agent_properties, uuid, url, se_runtime_properties, state, avi_api_patch_op, se_bootup_properties, avi_api_update_method\n\nThis module is used to configure SeProperties object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_serverautoscalepolicy': 'Module for setup of ServerAutoScalePolicy Avi RESTful Object\n\nArguments: use_predicted_load, intelligent_autoscale, description, intelligent_scaleout_margin, scaleout_alertconfig_refs, min_size, scalein_cooldown, scaleout_cooldown, max_size, name, intelligent_scalein_margin, uuid, url, tenant_ref, state, max_scalein_adjustment_step, avi_api_patch_op, scalein_alertconfig_refs, avi_api_update_method, max_scaleout_adjustment_step\n\nThis module is used to configure ServerAutoScalePolicy object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_serviceengine': 'Module for setup of ServiceEngine Avi RESTful Object\n\nArguments: enable_state, mgmt_vnic, tenant_ref, controller_created, flavor, avi_api_update_method, uuid, name, cloud_ref, hypervisor, se_group_ref, container_mode, data_vnics, state, container_type, host_ref, url, avi_api_patch_op, availability_zone, controller_ip, resources\n\nThis module is used to configure ServiceEngine object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_serviceenginegroup': 'Module for setup of ServiceEngineGroup Avi RESTful Object\n\nArguments: disable_tso, host_attribute_value, async_ssl, instance_flavor, auto_redistribute_active_standby_load, disable_avi_securitygroups, self_se_election, free_list_size, bgp_state_update_interval, uuid, vs_scalein_timeout, se_udp_encap_ipc, min_cpu_usage, custom_securitygroups_data, ingress_access_data, vcenter_clusters, max_rules_per_lb, iptables, num_dispatcher_cores, connection_memory_percentage, service_ip_subnets, placement_mode, max_scaleout_per_vs, enable_routing, waf_mempool, per_app, se_pcap_lookahead, vcenter_datastores_include, se_name_prefix, waf_learning_memory, name, tenant_ref, max_se, license_type, se_flow_probe_timer, se_dos_profile, disable_se_memory_check, datascript_timeout, udf_log_throttle, vcenter_hosts, vcpus_per_se, cpu_socket_affinity, realtime_se_metrics, config_debugs_on_all_cores, se_dpdk_pmd, memory_for_config_update, custom_tag, non_significant_log_throttle, shm_minimum_config_memory, extra_shared_config_memory, vcenter_datastores, state, se_sb_threads, active_standby, waf_learning_interval, auto_rebalance_capacity_per_se, service_ip6_subnets, reboot_on_stop, se_probe_port, extra_config_multiplier, distribute_load_active_standby, async_ssl_threads, advertise_backend_networks, vcenter_folder, floating_intf_ip, heap_minimum_config_memory, max_memory_per_mempool, ssl_preprocess_sni_hostname, allow_burst, max_cpu_usage, min_scaleout_per_vs, vss_placement, buffer_se, mem_reserve, vcenter_datastore_mode, enable_hsm_priming, auto_rebalance_criteria, least_load_core_selection, aggressive_failure_detection, significant_log_throttle, se_bandwidth_type, additional_config_memory, vs_se_scaleout_additional_wait_time, max_public_ips_per_lb, accelerated_networking, enable_vip_on_all_interfaces, se_routing, auto_rebalance, data_network_id, min_se, se_tunnel_mode, memory_per_se, se_tunnel_udp_port, disable_gro, vs_scaleout_timeout, se_flow_probe_retries, ephemeral_portrange_end, ha_mode, se_remote_punt_udp_port, ingress_access_mgmt, disk_per_se, vs_se_scaleout_ready_timeout, archive_shm_limit, max_vs_per_se, app_learning_memory_percent, enable_multi_lb, openstack_mgmt_network_uuid, n_log_streaming_threads, use_standard_alb, avi_api_update_method, se_vs_hb_max_pkts_in_batch, app_cache_percent, se_sb_dedicated_core, host_attribute_key, se_ipc_udp_port, hypervisor, cpu_reserve, custom_securitygroups_mgmt, enable_vmac, openstack_mgmt_network_name, se_pcap_reinit_threshold, hm_on_standby, distribute_queues, hardwaresecuritymodulegroup_ref, minimum_required_config_memory, ephemeral_portrange_start, se_tracert_port_range, floating_intf_ip_se_2, log_disksz, se_use_dpdk, openstack_availability_zone, auto_rebalance_interval, avi_api_patch_op, vip_asg, ignore_rtt_threshold, openstack_availability_zones, disable_csum_offloads, num_flow_cores_sum_changes_to_ignore, algo, os_reserved_memory, se_pcap_reinit_frequency, description, vs_scalein_timeout_for_upgrade, se_deprovision_delay, se_vs_hb_max_vs_in_pkt, minimum_connection_memory, mgmt_network_ref, license_tier, flow_table_new_syn_max_entries, host_gateway_monitor, url, cloud_ref, vs_switchover_timeout, se_thread_multiplier, waf_mempool_size, dedicated_dispatcher_core, mgmt_subnet, vs_host_redundancy, vss_placement_enabled\n\nThis module is used to configure ServiceEngineGroup object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_snmptrapprofile': 'Module for setup of SnmpTrapProfile Avi RESTful Object\n\nArguments: name, trap_servers, tenant_ref, state, url, avi_api_patch_op, avi_api_update_method, uuid\n\nThis module is used to configure SnmpTrapProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_sslkeyandcertificate': 'Module for setup of SSLKeyAndCertificate Avi RESTful Object\n\nArguments: status, certificate_management_profile_ref, key_base64, key_passphrase, hardwaresecuritymodulegroup_ref, key, certificate_base64, key_params, avi_api_update_method, name, enckey_base64, dynamic_params, uuid, certificate, url, enckey_name, format, tenant_ref, avi_api_patch_op, created_by, state, ca_certs, type\n\nThis module is used to configure SSLKeyAndCertificate object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_sslprofile': 'Module for setup of SSLProfile Avi RESTful Object\n\nArguments: accepted_ciphers, prefer_client_cipher_ordering, description, tags, accepted_versions, state, avi_api_update_method, name, ssl_session_timeout, uuid, url, ssl_rating, tenant_ref, avi_api_patch_op, enable_ssl_session_reuse, cipher_enums, send_close_notify, dhparam, type\n\nThis module is used to configure SSLProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_stringgroup': 'Module for setup of StringGroup Avi RESTful Object\n\nArguments: uuid, url, description, tenant_ref, state, avi_api_patch_op, kv, type, avi_api_update_method, name\n\nThis module is used to configure StringGroup object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_systemconfiguration': 'Module for setup of SystemConfiguration Avi RESTful Object\n\nArguments: secure_channel_configuration, docker_mode, welcome_workflow_complete, global_tenant_config, proxy_configuration, ssh_hmacs, linux_configuration, portal_configuration, avi_api_update_method, email_configuration, uuid, snmp_configuration, url, default_license_tier, dns_configuration, avi_api_patch_op, dns_virtualservice_refs, state, ntp_configuration, admin_auth_configuration, mgmt_ip_access_control, ssh_ciphers\n\nThis module is used to configure SystemConfiguration object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_tenant': 'Module for setup of Tenant Avi RESTful Object\n\nArguments: uuid, url, state, created_by, name, avi_api_patch_op, config_settings, local, avi_api_update_method, description\n\nThis module is used to configure Tenant object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_trafficcloneprofile': 'Module for setup of TrafficCloneProfile Avi RESTful Object\n\nArguments: uuid, cloud_ref, tenant_ref, state, url, avi_api_patch_op, clone_servers, preserve_client_ip, avi_api_update_method, name\n\nThis module is used to configure TrafficCloneProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_user': 'Avi User Module\n\nArguments: user_profile_ref, name, state, is_active, avi_api_patch_op, email, access, is_superuser, obj_username, avi_api_update_method, obj_password, default_tenant_ref\n\nThis module can be used for creation, updation and deletion of a user.',
 'avi_useraccount': 'Avi UserAccount Module\n\nArguments: force_change, old_password\n\nThis module can be used for updating the password of a user.\nThis module is useful for setting up admin password for Controller bootstrap.',
 'avi_useraccountprofile': 'Module for setup of UserAccountProfile Avi RESTful Object\n\nArguments: max_concurrent_sessions, uuid, state, url, account_lock_timeout, avi_api_patch_op, max_login_failure_count, max_password_history_count, credentials_timeout_threshold, avi_api_update_method, name\n\nThis module is used to configure UserAccountProfile object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_virtualservice': 'Module for setup of VirtualService Avi RESTful Object\n\nArguments: client_auth, port_uuid, ssl_profile_selectors, availability_zone, error_page_profile_ref, subnet_uuid, delay_fairness, vip, static_dns_records, enable_rhi_snat, sideband_profile, requests_rate_limit, analytics_profile_ref, uuid, ipam_network_subnet, server_network_profile_ref, description, ssl_profile_ref, created_by, topology_policies, max_cps_per_client, pool_group_ref, traffic_enabled, ssl_sess_cache_avg_size, flow_dist, l4_policies, http_policies, application_profile_ref, microservice_ref, use_vip_as_snat, discovered_network_ref, ip_address, azure_availability_set, avi_api_update_method, east_west_placement, floating_subnet_uuid, name, service_pool_select, close_client_conn_on_config_update, type, enable_autogw, discovered_networks, tenant_ref, remove_listening_port_on_vs_down, ssl_key_and_certificate_refs, snat_ip, host_name_xlate, analytics_policy, sp_pool_refs, flow_label_type, network_profile_ref, weight, dns_info, vh_domain_name, security_policy_ref, content_rewrite, traffic_clone_profile_ref, apic_contract_graph, avi_allocated_vip, vrf_context_ref, allow_invalid_client_cert, subnet, service_metadata, cloud_type, network_ref, cloud_ref, enable_rhi, saml_sp_config, waf_policy_ref, dns_policies, scaleout_ecmp, sso_policy, state, nsx_securitygroup, cloud_config_cksum, min_pools_up, vsvip_ref, performance_limits, use_bridge_ip_as_vip, enabled, floating_ip, auto_allocate_floating_ip, avi_api_patch_op, vh_parent_vs_uuid, connections_rate_limit, active_standby_se_tag, pool_ref, ign_pool_net_reach, limit_doser, url, auto_allocate_ip, fqdn, network_security_policy_ref, vs_datascripts, services, avi_allocated_fip, sso_policy_ref, vsvip_cloud_config_cksum, discovered_subnet, se_group_ref, bulk_sync_kvcache\n\nThis module is used to configure VirtualService object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_vrfcontext': 'Module for setup of VrfContext Avi RESTful Object\n\nArguments: uuid, static_routes, cloud_ref, tenant_ref, state, name, url, avi_api_patch_op, system_default, avi_api_update_method, gateway_mon, internal_gateway_monitor, debugvrfcontext, bgp_profile, description\n\nThis module is used to configure VrfContext object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_vsdatascriptset': 'Module for setup of VSDataScriptSet Avi RESTful Object\n\nArguments: datascript, uuid, pool_refs, state, url, pool_group_refs, protocol_parser_refs, tenant_ref, string_group_refs, created_by, ipgroup_refs, avi_api_patch_op, name, avi_api_update_method, description\n\nThis module is used to configure VSDataScriptSet object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_vsvip': 'Module for setup of VsVip Avi RESTful Object\n\nArguments: east_west_placement, vrf_context_ref, name, state, cloud_ref, dns_info, tenant_ref, avi_api_patch_op, url, vip, vsvip_cloud_config_cksum, use_standard_alb, avi_api_update_method, uuid\n\nThis module is used to configure VsVip object\nmore examples at U(https://github.com/avinetworks/devops)',
 'avi_webhook': 'Module for setup of Webhook Avi RESTful Object\n\nArguments: uuid, url, description, tenant_ref, state, verification_token, avi_api_patch_op, callback_url, avi_api_update_method, name\n\nThis module is used to configure Webhook object\nmore examples at U(https://github.com/avinetworks/devops)',
 'awall': 'Manage awall policies\n\nArguments: state, activate, name\n\nThis modules allows for enable/disable/activate of I(awall) policies.\nAlpine Wall (I(awall)) generates a firewall configuration from the enabled policy files and activates the configuration on the system.',
 'aws_acm_info': 'Retrieve certificate information from AWS Certificate Manager service\n\nArguments: domain_name, statuses\n\nRetrieve information for ACM certificates\nThis module was called C(aws_acm_facts) before Ansible 2.9. The usage did not change.',
 'aws_api_gateway': "Manage AWS API Gateway APIs\n\nArguments: swagger_file, state, swagger_text, swagger_dict, deploy_desc, api_id, stage\n\nAllows for the management of API Gateway APIs\nNormally you should give the api_id since there is no other stable guaranteed unique identifier for the API.  If you do not give api_id then a new API will be create each time this is run.\nBeware that there are very hard limits on the rate that you can call API Gateway's REST API.  You may need to patch your boto.  See https://github.com/boto/boto3/issues/876 and discuss with your AWS rep.\nswagger_file and swagger_text are passed directly on to AWS transparently whilst swagger_dict is an ansible dict which is converted to JSON before the API definitions are uploaded.",
 'aws_application_scaling_policy': 'Manage Application Auto Scaling Scaling Policies\n\nArguments: policy_type, minimum_tasks, resource_id, target_tracking_scaling_policy_configuration, step_scaling_policy_configuration, scalable_dimension, service_namespace, override_task_capacity, policy_name, maximum_tasks\n\nCreates, updates or removes a Scaling Policy',
 'aws_az_info': 'Gather information about availability zones in AWS.\n\nArguments: filters\n\nGather information about availability zones in AWS.\nThis module was called C(aws_az_facts) before Ansible 2.9. The usage did not change.',
 'aws_batch_compute_environment': 'Manage AWS Batch Compute Environments\n\nArguments: subnets, tags, instance_types, bid_percentage, image_id, maxv_cpus, security_group_ids, instance_role, desiredv_cpus, minv_cpus, compute_resource_type, compute_environment_state, state, spot_iam_fleet_role, service_role, compute_environment_name, type, ec2_key_pair\n\nThis module allows the management of AWS Batch Compute Environments. It is idempotent and supports "Check" mode.  Use module M(aws_batch_compute_environment) to manage the compute environment, M(aws_batch_job_queue) to manage job queues, M(aws_batch_job_definition) to manage job definitions.',
 'aws_batch_job_definition': 'Manage AWS Batch Job Definitions\n\nArguments: readonly_root_filesystem, mount_points, image, job_role_arn, attempts, user, job_definition_arn, parameters, state, environment, vcpus, command, volumes, memory, job_definition_name, type, privileged, ulimits\n\nThis module allows the management of AWS Batch Job Definitions. It is idempotent and supports "Check" mode.  Use module M(aws_batch_compute_environment) to manage the compute environment, M(aws_batch_job_queue) to manage job queues, M(aws_batch_job_definition) to manage job definitions.',
 'aws_batch_job_queue': 'Manage AWS Batch Job Queues\n\nArguments: priority, compute_environment_order, state, job_queue_name, job_queue_state\n\nThis module allows the management of AWS Batch Job Queues. It is idempotent and supports "Check" mode.  Use module M(aws_batch_compute_environment) to manage the compute environment, M(aws_batch_job_queue) to manage job queues, M(aws_batch_job_definition) to manage job definitions.',
 'aws_caller_info': 'Get information about the user and account being used to make AWS calls.\n\nArguments: \n\nThis module returns information about the account and user / role from which the AWS access tokens originate.\nThe primary use of this is to get the account id for templating into ARNs or similar to avoid needing to specify this information in inventory.\nThis module was called C(aws_caller_facts) before Ansible 2.9. The usage did not change.',
 'aws_codebuild': 'Create or delete an AWS CodeBuild project\n\nArguments: environment, name, tags, artifacts, cache, encryption_key, vpc_config, source, state, service_role, timeout_in_minutes, description\n\nCreate or delete a CodeBuild projects on AWS, used for building code artifacts from source code.',
 'aws_codecommit': 'Manage repositories in AWS CodeCommit\n\nArguments: comment, state, name\n\nSupports creation and deletion of CodeCommit repositories.\nSee U(https://aws.amazon.com/codecommit/) for more information about CodeCommit.',
 'aws_codepipeline': 'Create or delete AWS CodePipelines\n\nArguments: state, version, role_arn, name, stages, artifact_store\n\nCreate or delete a CodePipeline on AWS.',
 'aws_config_aggregation_authorization': 'Manage cross-account AWS Config authorizations\n\nArguments: authorized_account_id, authorized_aws_region, state\n\nModule manages AWS Config resources',
 'aws_config_aggregator': 'Manage AWS Config aggregations across multiple accounts\n\nArguments: account_sources, state, organization_source, name\n\nModule manages AWS Config resources',
 'aws_config_delivery_channel': 'Manage AWS Config delivery channels\n\nArguments: state, s3_prefix, name, delivery_frequency, s3_bucket, sns_topic_arn\n\nThis module manages AWS Config delivery locations for rule checks and configuration info',
 'aws_config_recorder': 'Manage AWS Config Recorders\n\nArguments: state, role_arn, recording_group, name\n\nModule manages AWS Config configuration recorder settings',
 'aws_config_rule': 'Manage AWS Config resources\n\nArguments: source, execution_frequency, name, input_parameters, scope, state, description\n\nModule manages AWS Config rules',
 'aws_direct_connect_connection': 'Creates, deletes, modifies a DirectConnect connection\n\nArguments: forced_update, bandwidth, name, state, link_aggregation_group, connection_id, location\n\nCreate, update, or delete a Direct Connect connection between a network and a specific AWS Direct Connect location. Upon creation the connection may be added to a link aggregation group or established as a standalone connection. The connection may later be associated or disassociated with a link aggregation group.',
 'aws_direct_connect_gateway': 'Manage AWS Direct Connect Gateway.\n\nArguments: direct_connect_gateway_id, state, virtual_gateway_id, name, amazon_asn\n\nCreates AWS Direct Connect Gateway\nDeletes AWS Direct Connect Gateway\nAttaches Virtual Gateways to Direct Connect Gateway\nDetaches Virtual Gateways to Direct Connect Gateway',
 'aws_direct_connect_link_aggregation_group': 'Manage Direct Connect LAG bundles.\n\nArguments: name, state, delete_with_disassociation, force_delete, num_connections, connection_id, bandwidth, wait_timeout, location, min_links, link_aggregation_group_id, wait\n\nCreate, delete, or modify a Direct Connect link aggregation group.',
 'aws_direct_connect_virtual_interface': 'Manage Direct Connect virtual interfaces.\n\nArguments: vlan, name, virtual_interface_id, id_to_associate, customer_address, state, amazon_address, authentication_key, bgp_asn, cidr, address_type, virtual_gateway_id, public\n\nCreate, delete, or modify a Direct Connect public or private virtual interface.',
 'aws_eks_cluster': 'Manage Elastic Kubernetes Service Clusters\n\nArguments: subnets, role_arn, name, state, wait_timeout, version, security_groups, wait\n\nManage Elastic Kubernetes Service Clusters',
 'aws_elasticbeanstalk_app': 'create, update, and delete an elastic beanstalk application\n\nArguments: state, description, terminate_by_force, app_name\n\ncreates, updates, deletes beanstalk applications if app_name is provided',
 'aws_glue_connection': 'Manage an AWS Glue connection\n\nArguments: connection_type, connection_properties, name, match_criteria, subnet_id, state, catalog_id, security_groups, description\n\nManage an AWS Glue connection. See U(https://aws.amazon.com/glue/) for details.',
 'aws_glue_job': 'Manage an AWS Glue job\n\nArguments: description, allocated_capacity, max_concurrent_runs, max_retries, connections, state, default_arguments, role, timeout, command_name, command_script_location, name\n\nManage an AWS Glue job. See U(https://aws.amazon.com/glue/) for details.',
 'aws_inspector_target': 'Create, Update and Delete Amazon Inspector Assessment Targets\n\nArguments: state, name, tags\n\nCreates, updates, or deletes Amazon Inspector Assessment Targets and manages the required Resource Groups.',
 'aws_kms': 'Perform various KMS management tasks.\n\nArguments: alias, policy_grant_types, description, tags, purge_tags, enabled, policy_clean_invalid_entries, state, grants, key_id, policy, purge_grants, policy_role_name, policy_role_arn, policy_mode\n\nManage role/user access to a KMS key. Not designed for encrypting/decrypting.',
 'aws_kms_info': 'Gather information about AWS KMS keys\n\nArguments: pending_deletion, filters\n\nGather information about AWS KMS keys including tags and grants\nThis module was called C(aws_kms_facts) before Ansible 2.9. The usage did not change.',
 'aws_netapp_cvs_FileSystems': 'NetApp AWS Cloud Volumes Service Manage FileSystem.\n\nArguments: state, quotaInBytes, exportPolicy, creationToken, region, serviceLevel\n\nCreate, Update, Delete fileSystem on AWS Cloud Volumes Service.',
 'aws_netapp_cvs_active_directory': 'NetApp AWS CloudVolumes Service Manage Active Directory.\n\nArguments: username, domain, DNS, region, password, state, netBIOS\n\nCreate, Update, Delete ActiveDirectory on AWS Cloud Volumes Service.',
 'aws_netapp_cvs_pool': 'NetApp AWS Cloud Volumes Service Manage Pools.\n\nArguments: sizeInBytes, vendorID, state, from_name, name, region, serviceLevel\n\nCreate, Update, Delete Pool on AWS Cloud Volumes Service.',
 'aws_netapp_cvs_snapshots': 'NetApp AWS Cloud Volumes Service Manage Snapshots.\n\nArguments: region, fileSystemId, from_name, state, name\n\nCreate, Update, Delete Snapshot on AWS Cloud Volumes Service.',
 'aws_region_info': 'Gather information about AWS regions.\n\nArguments: filters\n\nGather information about AWS regions.\nThis module was called C(aws_region_facts) before Ansible 2.9. The usage did not change.',
 'aws_s3': 'manage objects in S3.\n\nArguments: encryption_kms_key_id, permission, dest, object, encryption_mode, prefix, marker, ignore_nonexistent_bucket, dualstack, overwrite, headers, aws_secret_key, src, aws_access_key, encrypt, rgw, region, bucket, retries, max_keys, version, expiration, s3_url, metadata, mode\n\nThis module allows the user to manage S3 buckets and the objects within them. Includes support for creating and deleting both objects and buckets, retrieving objects as files or strings and generating download links. This module has a dependency on boto3 and botocore.',
 'aws_s3_bucket_info': 'Lists S3 buckets in AWS\n\nArguments: \n\nLists S3 buckets in AWS\nThis module was called C(aws_s3_bucket_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(aws_s3_bucket_info) module no longer returns C(ansible_facts)!',
 'aws_s3_cors': 'Manage CORS for S3 buckets in AWS\n\nArguments: rules, state, name\n\nManage CORS for S3 buckets in AWS',
 'aws_secret': 'Manage secrets stored in AWS Secrets Manager.\n\nArguments: secret_type, kms_key_id, name, rotation_interval, tags, state, secret, recovery_window, rotation_lambda, description\n\nCreate, update, and delete secrets stored in AWS Secrets Manager.',
 'aws_ses_identity': 'Manages SES email and domain identity\n\nArguments: bounce_notifications, state, delivery_notifications, feedback_forwarding, complaint_notifications, identity\n\nThis module allows the user to manage verified email and domain identity for SES.\nThis covers verifying and removing identities as well as setting up complaint, bounce and delivery notification settings.',
 'aws_ses_identity_policy': 'Manages SES sending authorization policies\n\nArguments: policy, state, identity, policy_name\n\nThis module allows the user to manage sending authorization policies associated with an SES identity (email or domain).\nSES authorization sending policies can be used to control what actors are able to send email on behalf of the validated identity and what conditions must be met by the sent emails.',
 'aws_ses_rule_set': 'Manages SES inbound receipt rule sets\n\nArguments: active, state, force, name\n\nThe M(aws_ses_rule_set) module allows you to create, delete, and manage SES receipt rule sets',
 'aws_sgw_info': 'Fetch AWS Storage Gateway information\n\nArguments: gather_local_disks, gather_file_shares, gather_tapes, gather_volumes\n\nFetch AWS Storage Gateway information\nThis module was called C(aws_sgw_facts) before Ansible 2.9. The usage did not change.',
 'aws_ssm_parameter_store': 'Manage key-value pairs in aws parameter store.\n\nArguments: decryption, name, region, string_type, value, state, key_id, overwrite_value, description\n\nManage key-value pairs in aws parameter store.',
 'aws_waf_condition': 'create and delete WAF Conditions\n\nArguments: state, name, filters, purge_filters, type, waf_regional\n\nRead the AWS documentation for WAF U(https://aws.amazon.com/documentation/waf/)',
 'aws_waf_info': 'Retrieve information for WAF ACLs, Rule , Conditions and Filters.\n\nArguments: name, waf_regional\n\nRetrieve information for WAF ACLs, Rule , Conditions and Filters.\nThis module was called C(aws_waf_facts) before Ansible 2.9. The usage did not change.',
 'aws_waf_rule': 'create and delete WAF Rules\n\nArguments: state, name, purge_conditions, conditions, waf_regional, metric_name\n\nRead the AWS documentation for WAF U(https://aws.amazon.com/documentation/waf/)',
 'aws_waf_web_acl': 'create and delete WAF Web ACLs\n\nArguments: state, metric_name, purge_rules, rules, default_action, waf_regional, name\n\nRead the AWS documentation for WAF U(https://aws.amazon.com/documentation/waf/)',
 'azure_rm_acs': 'Manage an Azure Container Service(ACS) instance\n\nArguments: linux_profile, master_profile, name, resource_group, orchestration_platform, agent_pool_profiles, state, location, service_principal, diagnostics_profile\n\nCreate, update and delete an Azure Container Service(ACS) instance.',
 'azure_rm_aks': 'Manage a managed Azure Container Service (AKS) instance\n\nArguments: linux_profile, kubernetes_version, name, resource_group, agent_pool_profiles, enable_rbac, state, network_profile, location, aad_profile, service_principal, dns_prefix, addon\n\nCreate, update and delete a managed Azure Container Service (AKS) instance.',
 'azure_rm_aks_info': 'Get Azure Kubernetes Service facts\n\nArguments: show_kubeconfig, name, resource_group, tags\n\nGet facts for a specific Azure Kubernetes Service or all Azure Kubernetes Services.',
 'azure_rm_aksversion_info': 'Get available kubernetes versions supported by Azure Kubernetes Service\n\nArguments: version, location\n\nGet available kubernetes versions supported by Azure Kubernetes Service.',
 'azure_rm_appgateway': 'Manage Application Gateway instance\n\nArguments: backend_http_settings_collection, authentication_certificates, ssl_policy, resource_group, redirect_configurations, request_routing_rules, probes, sku, name, ssl_certificates, backend_address_pools, frontend_ip_configurations, state, http_listeners, location, gateway_ip_configurations, frontend_ports\n\nCreate, update and delete instance of Application Gateway.',
 'azure_rm_applicationsecuritygroup': 'Manage Azure Application Security Group\n\nArguments: state, name, resource_group, location\n\nCreate, update and delete instance of Azure Application Security Group.',
 'azure_rm_applicationsecuritygroup_info': 'Get Azure Application Security Group facts\n\nArguments: name, resource_group, tags\n\nGet facts of Azure Application Security Group.',
 'azure_rm_appserviceplan': 'Manage App Service Plan\n\nArguments: sku, number_of_workers, state, name, resource_group, is_linux, location\n\nCreate, update and delete instance of App Service Plan.',
 'azure_rm_appserviceplan_info': 'Get azure app service plan facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific app service plan or all app service plans in a resource group, or all app service plan in current subscription.',
 'azure_rm_automationaccount': 'Manage Azure Automation account\n\nArguments: state, name, resource_group, location\n\nCreate, delete an Azure Automation account.',
 'azure_rm_automationaccount_info': 'Get Azure automation account facts\n\nArguments: list_usages, list_statistics, list_keys, name, resource_group, tags\n\nGet facts of automation account.',
 'azure_rm_autoscale': 'Manage Azure autoscale setting\n\nArguments: target, resource_group, enabled, profiles, notifications, state, location, name\n\nCreate, delete an autoscale setting.',
 'azure_rm_autoscale_info': 'Get Azure Auto Scale Setting facts\n\nArguments: name, resource_group, tags\n\nGet facts of Auto Scale Setting.',
 'azure_rm_availabilityset': 'Manage Azure Availability Set\n\nArguments: sku, platform_fault_domain_count, state, name, resource_group, platform_update_domain_count, location\n\nCreate, update and delete Azure Availability Set.\nAn availability set cannot be updated, you will have to recreate one instead.\nThe only update operation will be for the tags.',
 'azure_rm_availabilityset_info': 'Get Azure Availability Set facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific availability set or all availability sets.',
 'azure_rm_azurefirewall': 'Manage Azure Firewall instance.\n\nArguments: name, resource_group, nat_rule_collections, network_rule_collections, application_rule_collections, state, location, ip_configurations\n\nCreate, update and delete instance of Azure Firewall.',
 'azure_rm_azurefirewall_info': 'Get AzureFirewall info.\n\nArguments: name, resource_group\n\nGet info of AzureFirewall.',
 'azure_rm_batchaccount': 'Manages a Batch Account on Azure.\n\nArguments: state, pool_allocation_mode, name, resource_group, auto_storage_account, location, key_vault\n\nCreate, update and delete instance of Azure Batch Account.',
 'azure_rm_cdnendpoint': 'Manage a Azure CDN endpoint\n\nArguments: resource_group, started, is_https_allowed, query_string_caching_behavior, profile_name, purge_content_paths, origin_host_header, name, origins, origin_path, purge, state, location, content_types_to_compress, is_http_allowed, is_compression_enabled\n\nCreate, update, start, stop and delete a Azure CDN endpoint.',
 'azure_rm_cdnendpoint_info': 'Get Azure CDN endpoint facts\n\nArguments: profile_name, name, resource_group, tags\n\nGet facts for a specific Azure CDN endpoint or all Azure CDN endpoints.',
 'azure_rm_cdnprofile': 'Manage a Azure CDN profile\n\nArguments: sku, state, name, resource_group, location\n\nCreate, update and delete a Azure CDN profile.',
 'azure_rm_cdnprofile_info': 'Get Azure CDN profile facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific Azure CDN profile or all CDN profiles.',
 'azure_rm_containerinstance': 'Manage an Azure Container Instance\n\nArguments: registry_username, name, resource_group, dns_name_label, force_update, restart_policy, state, registry_password, registry_login_server, location, os_type, ip_address, ports, containers\n\nCreate, update and delete an Azure Container Instance.',
 'azure_rm_containerinstance_info': 'Get Azure Container Instance facts\n\nArguments: name, resource_group, tags\n\nGet facts of Container Instance.',
 'azure_rm_containerregistry': 'Manage an Azure Container Registry\n\nArguments: sku, state, name, resource_group, admin_user_enabled, location\n\nCreate, update and delete an Azure Container Registry.',
 'azure_rm_containerregistry_info': 'Get Azure Container Registry facts\n\nArguments: retrieve_credentials, name, resource_group, tags\n\nGet facts for Container Registry.',
 'azure_rm_cosmosdbaccount': 'Manage Azure Database Account instance\n\nArguments: enable_automatic_failover, resource_group, geo_rep_locations, virtual_network_rules, database_account_offer_type, is_virtual_network_filter_enabled, enable_gremlin, enable_multiple_write_locations, enable_table, kind, name, consistency_policy, ip_range_filter, state, location, enable_cassandra\n\nCreate, update and delete instance of Azure Database Account.',
 'azure_rm_cosmosdbaccount_info': 'Get Azure Cosmos DB Account facts\n\nArguments: resource_group, tags, name, retrieve_keys, retrieve_connection_strings\n\nGet facts of Azure Cosmos DB Account.',
 'azure_rm_deployment': 'Create or destroy Azure Resource Manager template deployments\n\nArguments: wait_for_deployment_completion, resource_group, wait_for_deployment_polling_period, template_link, name, state, location, deployment_mode, parameters_link, parameters, template\n\nCreate or destroy Azure Resource Manager template deployments via the Azure SDK for Python.\nYou can find some quick start templates in GitHub here U(https://github.com/azure/azure-quickstart-templates).\nFor more information on Azure Resource Manager templates see U(https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/).',
 'azure_rm_deployment_info': 'Get Azure Deployment facts\n\nArguments: name, resource_group\n\nGet facts of Azure Deployment.',
 'azure_rm_devtestlab': 'Manage Azure DevTest Lab instance\n\nArguments: storage_type, name, resource_group, premium_data_disks, state, location\n\nCreate, update and delete instance of Azure DevTest Lab.',
 'azure_rm_devtestlab_info': 'Get Azure DevTest Lab facts\n\nArguments: name, resource_group, tags\n\nGet facts of Azure DevTest Lab.',
 'azure_rm_devtestlabarmtemplate_info': 'Get Azure DevTest Lab ARM Template facts\n\nArguments: artifact_source_name, lab_name, name, resource_group\n\nGet facts of Azure DevTest Lab ARM Template.',
 'azure_rm_devtestlabartifact_info': 'Get Azure DevTest Lab Artifact facts\n\nArguments: artifact_source_name, lab_name, name, resource_group\n\nGet facts of Azure DevTest Lab Artifact.',
 'azure_rm_devtestlabartifactsource': 'Manage Azure DevTest Labs Artifacts Source instance\n\nArguments: is_enabled, display_name, name, security_token, lab_name, resource_group, uri, source_type, state, branch_ref, arm_template_folder_path, folder_path\n\nCreate, update and delete instance of Azure DevTest Labs Artifacts Source.',
 'azure_rm_devtestlabartifactsource_info': 'Get Azure DevTest Lab Artifact Source facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure DevTest Lab Artifact Source.',
 'azure_rm_devtestlabcustomimage': 'Manage Azure DevTest Lab Custom Image instance\n\nArguments: windows_os_state, name, resource_group, linux_os_state, author, source_vm, lab_name, state, description\n\nCreate, update and delete instance of Azure DevTest Lab Custom Image.',
 'azure_rm_devtestlabcustomimage_info': 'Get Azure DevTest Lab Custom Image facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure Azure DevTest Lab Custom Image.',
 'azure_rm_devtestlabenvironment': 'Manage Azure DevTest Lab Environment instance\n\nArguments: name, resource_group, lab_name, deployment_parameters, state, deployment_template, user_name, location\n\nCreate, update and delete instance of Azure DevTest Lab Environment.',
 'azure_rm_devtestlabenvironment_info': 'Get Azure Environment facts\n\nArguments: lab_name, user_name, name, resource_group, tags\n\nGet facts of Azure Environment.',
 'azure_rm_devtestlabpolicy': 'Manage Azure Policy instance\n\nArguments: fact_name, name, resource_group, policy_set_name, lab_name, state, threshold, description\n\nCreate, update and delete instance of Azure Policy.',
 'azure_rm_devtestlabpolicy_info': 'Get Azure DTL Policy facts\n\nArguments: policy_set_name, lab_name, name, resource_group, tags\n\nGet facts of Azure DTL Policy.',
 'azure_rm_devtestlabschedule': 'Manage Azure DevTest Lab Schedule instance\n\nArguments: lab_name, state, name, resource_group, time, time_zone_id\n\nCreate, update and delete instance of Azure DecTest Lab Schedule.',
 'azure_rm_devtestlabschedule_info': 'Get Azure Schedule facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure Schedule.',
 'azure_rm_devtestlabvirtualmachine': 'Manage Azure DevTest Lab Virtual Machine instance\n\nArguments: lab_subnet, resource_group, image, ssh_key, allow_claim, storage_type, disallow_public_ip_address, vm_size, password, name, artifacts, expiration_date, notes, lab_name, state, os_type, user_name\n\nCreate, update and delete instance of Azure DevTest Lab Virtual Machine.',
 'azure_rm_devtestlabvirtualmachine_info': 'Get Azure DevTest Lab Virtual Machine facts\n\nArguments: lab_name, name, resource_group, tags\n\nGet facts of Azure DevTest Lab Virtual Machine.',
 'azure_rm_devtestlabvirtualnetwork': 'Manage Azure DevTest Lab Virtual Network instance\n\nArguments: lab_name, state, description, resource_group, name, location\n\nCreate, update and delete instance of Azure DevTest Lab Virtual Network.',
 'azure_rm_devtestlabvirtualnetwork_info': 'Get Azure DevTest Lab Virtual Network facts\n\nArguments: lab_name, name, resource_group\n\nGet facts of Azure DevTest Lab Virtual Network.',
 'azure_rm_dnsrecordset': 'Create, delete and update DNS record sets and records\n\nArguments: resource_group, record_type, record_mode, state, relative_name, records, time_to_live, zone_name\n\nCreates, deletes, and updates DNS records sets and records within an existing Azure DNS Zone.',
 'azure_rm_dnsrecordset_info': 'Get DNS Record Set facts\n\nArguments: zone_name, top, relative_name, resource_group, record_type\n\nGet facts for a specific DNS Record Set in a Zone, or a specific type in all Zones or in one Zone etc.',
 'azure_rm_dnszone': 'Manage Azure DNS zones\n\nArguments: registration_virtual_networks, state, name, resource_group, resolution_virtual_networks, type\n\nCreates and deletes Azure DNS zones.',
 'azure_rm_dnszone_info': 'Get DNS zone facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific DNS zone or all DNS zones within a resource group.',
 'azure_rm_functionapp': 'Manage Azure Function Apps\n\nArguments: name, resource_group, state, location, app_settings, storage_account, plan, container_settings\n\nCreate, update or delete an Azure Function App.',
 'azure_rm_functionapp_info': 'Get Azure Function App facts\n\nArguments: name, resource_group, tags\n\nGet facts for one Azure Function App or all Function Apps within a resource group.',
 'azure_rm_gallery': 'Manage Azure Shared Image Gallery instance.\n\nArguments: state, location, description, resource_group, name\n\nCreate, update and delete instance of Azure Shared Image Gallery (SIG).',
 'azure_rm_gallery_info': 'Get Azure Shared Image Gallery info.\n\nArguments: name, resource_group\n\nGet info of Azure Shared Image Gallery.',
 'azure_rm_galleryimage': 'Manage Azure SIG Image instance.\n\nArguments: eula, gallery_name, description, resource_group, os_state, privacy_statement_uri, release_note_uri, name, recommended, end_of_life_date, state, location, purchase_plan, os_type, identifier, disallowed\n\nCreate, update and delete instance of Azure SIG Image.',
 'azure_rm_galleryimage_info': 'Get Azure SIG Image info.\n\nArguments: gallery_name, name, resource_group\n\nGet info of Azure SIG Image.',
 'azure_rm_galleryimageversion': 'Manage Azure SIG Image Version instance.\n\nArguments: gallery_image_name, state, gallery_name, name, resource_group, publishing_profile, location\n\nCreate, update and delete instance of Azure SIG Image Version.',
 'azure_rm_galleryimageversion_info': 'Get Azure SIG Image Version info.\n\nArguments: gallery_image_name, gallery_name, name, resource_group\n\nGet info of Azure SIG Image Version.',
 'azure_rm_hdinsightcluster': 'Manage Azure HDInsight Cluster instance\n\nArguments: name, storage_accounts, cluster_version, resource_group, tier, state, location, compute_profile_roles, os_type, cluster_definition\n\nCreate, update and delete instance of Azure HDInsight Cluster.',
 'azure_rm_hdinsightcluster_info': 'Get Azure HDInsight Cluster facts\n\nArguments: name, resource_group, tags\n\nGet facts of Azure HDInsight Cluster.',
 'azure_rm_image': 'Manage Azure image\n\nArguments: source, state, name, resource_group, os_type, data_disk_sources, location\n\nCreate, delete an image from virtual machine, blob uri, managed disk or snapshot.',
 'azure_rm_image_info': 'Get facts about azure custom images\n\nArguments: name, resource_group, tags\n\nList azure custom images. The images can be listed where scope of listing can be based on subscription, resource group, name or tags.',
 'azure_rm_iotdevice': 'Manage Azure IoT hub device\n\nArguments: status, name, hub, secondary_key, twin_tags, desired, state, edge_enabled, hub_policy_name, hub_policy_key, auth_method, primary_key\n\nCreate, delete an Azure IoT hub device.',
 'azure_rm_iotdevice_info': 'Facts of Azure IoT hub device\n\nArguments: name, hub, module_id, query, top, hub_policy_name, hub_policy_key\n\nQuery, get Azure IoT hub device.',
 'azure_rm_iotdevicemodule': 'Manage Azure IoT hub device module\n\nArguments: name, hub, secondary_key, twin_tags, desired, state, device, hub_policy_name, hub_policy_key, auth_method, primary_key\n\nCreate, delete an Azure IoT hub device module.',
 'azure_rm_iothub': 'Manage Azure IoT hub\n\nArguments: sku, name, resource_group, event_endpoint, routing_endpoints, enable_file_upload_notifications, state, location, routes, ip_filters, unit\n\nCreate, delete an Azure IoT hub.',
 'azure_rm_iothub_info': 'Get IoT Hub facts\n\nArguments: show_stats, name, resource_group, tags, show_quota_metrics, test_route_message, list_consumer_groups, list_keys, show_endpoint_health\n\nGet facts for a specific IoT Hub or all IoT Hubs.',
 'azure_rm_iothubconsumergroup': 'Manage Azure IoT hub\n\nArguments: event_hub, state, name, hub, resource_group\n\nCreate, delete an Azure IoT hub.',
 'azure_rm_keyvault': 'Manage Key Vault instance\n\nArguments: sku, resource_group, recover_mode, enabled_for_disk_encryption, enabled_for_template_deployment, state, vault_name, enabled_for_deployment, access_policies, vault_tenant, enable_soft_delete, location\n\nCreate, update and delete instance of Key Vault.',
 'azure_rm_keyvault_info': 'Get Azure Key Vault facts\n\nArguments: name, resource_group, tags\n\nGet facts of Azure Key Vault.',
 'azure_rm_keyvaultkey': 'Use Azure KeyVault keys\n\nArguments: keyvault_uri, pem_password, byok_file, key_name, state, pem_file\n\nCreate or delete a key within a given keyvault.\nBy using Key Vault, you can encrypt keys and secrets.\nSuch as authentication keys, storage account keys, data encryption keys, .PFX files, and passwords.',
 'azure_rm_keyvaultkey_info': 'Get Azure Key Vault key facts.\n\nArguments: show_deleted_key, vault_uri, version, name, tags\n\nGet facts of Azure Key Vault key.',
 'azure_rm_keyvaultsecret': 'Use Azure KeyVault Secrets\n\nArguments: keyvault_uri, state, secret_name, secret_value\n\nCreate or delete a secret within a given keyvault.\nBy using Key Vault, you can encrypt keys and secrets.\nSuch as authentication keys, storage account keys, data encryption keys, .PFX files, and passwords.',
 'azure_rm_loadbalancer': 'Manage Azure load balancers\n\nArguments: public_ip_address_name, probe_port, load_balancing_rules, resource_group, natpool_protocol, inbound_nat_pools, idle_timeout, probe_interval, probe_protocol, load_distribution, frontend_port, natpool_frontend_port_start, backend_port, probes, sku, probe_fail_count, natpool_frontend_port_end, natpool_backend_port, name, backend_address_pools, inbound_nat_rules, protocol, frontend_ip_configurations, state, location, probe_request_path\n\nCreate, update and delete Azure load balancers.',
 'azure_rm_loadbalancer_info': 'Get load balancer facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific load balancer or all load balancers.',
 'azure_rm_lock': 'Manage Azure locks\n\nArguments: managed_resource_id, state, name, resource_group, level\n\nCreate, delete an Azure lock.\nTo create or delete management locks, you must have access to Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions.\nOf the built-in roles, only Owner and User Access Administrator are granted those actions.',
 'azure_rm_lock_info': 'Manage Azure locks\n\nArguments: name, resource_group, managed_resource_id\n\nCreate, delete an Azure lock.',
 'azure_rm_loganalyticsworkspace': 'Manage Azure Log Analytics workspaces\n\nArguments: sku, intelligence_packs, state, retention_in_days, name, resource_group, location\n\nCreate, delete Azure Log Analytics workspaces.',
 'azure_rm_loganalyticsworkspace_info': 'Get facts of Azure Log Analytics workspaces\n\nArguments: show_management_groups, show_shared_keys, name, resource_group, tags, show_intelligence_packs, show_usages\n\nGet, query Azure Log Analytics workspaces.',
 'azure_rm_manageddisk': 'Manage Azure Manage Disks\n\nArguments: attach_caching, disk_size_gb, name, resource_group, tags, source_uri, storage_account_type, state, managed_by, location, os_type, zone, create_option\n\nCreate, update and delete an Azure Managed Disk.',
 'azure_rm_manageddisk_info': 'Get managed disk facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific managed disk or all managed disks.',
 'azure_rm_mariadbconfiguration': 'Manage Configuration instance\n\nArguments: name, state, server_name, value, resource_group\n\nCreate, update and delete instance of Configuration.',
 'azure_rm_mariadbconfiguration_info': 'Get Azure MariaDB Configuration facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MariaDB Configuration.',
 'azure_rm_mariadbdatabase': 'Manage MariaDB Database instance\n\nArguments: state, charset, server_name, resource_group, collation, force_update, name\n\nCreate, update and delete instance of MariaDB Database.',
 'azure_rm_mariadbdatabase_info': 'Get Azure MariaDB Database facts\n\nArguments: resource_group, server_name, name\n\nGet facts of MariaDB Database.',
 'azure_rm_mariadbfirewallrule': 'Manage MariaDB firewall rule instance\n\nArguments: state, server_name, resource_group, start_ip_address, end_ip_address, name\n\nCreate, update and delete instance of MariaDB firewall rule.',
 'azure_rm_mariadbfirewallrule_info': 'Get Azure MariaDB Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MariaDB Firewall Rule.',
 'azure_rm_mariadbserver': 'Manage MariaDB Server instance\n\nArguments: sku, name, resource_group, storage_mb, admin_username, create_mode, state, version, location, enforce_ssl, admin_password\n\nCreate, update and delete instance of MariaDB Server.',
 'azure_rm_mariadbserver_info': 'Get Azure MariaDB Server facts\n\nArguments: name, resource_group, tags\n\nGet facts of MariaDB Server.',
 'azure_rm_monitorlogprofile': 'Manage Azure Monitor log profile\n\nArguments: retention_policy, name, locations, state, location, service_bus_rule_id, storage_account, categories\n\nCreate, update and delete instance of Azure Monitor log profile.',
 'azure_rm_mysqlconfiguration': 'Manage Configuration instance\n\nArguments: name, state, server_name, value, resource_group\n\nCreate, update and delete instance of Configuration.',
 'azure_rm_mysqlconfiguration_info': 'Get Azure MySQL Configuration facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MySQL Configuration.',
 'azure_rm_mysqldatabase': 'Manage MySQL Database instance\n\nArguments: state, charset, server_name, resource_group, collation, force_update, name\n\nCreate, update and delete instance of MySQL Database.',
 'azure_rm_mysqldatabase_info': 'Get Azure MySQL Database facts\n\nArguments: resource_group, server_name, name\n\nGet facts of MySQL Database.',
 'azure_rm_mysqlfirewallrule': 'Manage MySQL firewall rule instance\n\nArguments: state, server_name, resource_group, start_ip_address, end_ip_address, name\n\nCreate, update and delete instance of MySQL firewall rule.',
 'azure_rm_mysqlfirewallrule_info': 'Get Azure MySQL Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure MySQL Firewall Rule.',
 'azure_rm_mysqlserver': 'Manage MySQL Server instance\n\nArguments: sku, name, resource_group, storage_mb, admin_username, create_mode, state, version, location, enforce_ssl, admin_password\n\nCreate, update and delete instance of MySQL Server.',
 'azure_rm_mysqlserver_info': 'Get Azure MySQL Server facts\n\nArguments: name, resource_group, tags\n\nGet facts of MySQL Server.',
 'azure_rm_networkinterface': 'Manage Azure network interfaces\n\nArguments: dns_servers, private_ip_address, resource_group, public_ip_allocation_method, open_ports, public_ip, private_ip_allocation_method, enable_accelerated_networking, ip_configurations, public_ip_address_name, name, enable_ip_forwarding, state, subnet_name, location, create_with_security_group, security_group, virtual_network, os_type\n\nCreate, update or delete a network interface.\nWhen creating a network interface you must provide the name of an existing virtual network, the name of an existing subnet within the virtual network.\nA default security group and public IP address will be created automatically.\nOr you can provide the name of an existing security group and public IP address.\nSee the examples below for more details.',
 'azure_rm_networkinterface_info': 'Get network interface facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific network interface or all network interfaces within a resource group.',
 'azure_rm_postgresqlconfiguration': 'Manage Azure PostgreSQL Configuration\n\nArguments: name, state, server_name, value, resource_group\n\nUpdate or reset Azure PostgreSQL Configuration setting.',
 'azure_rm_postgresqlconfiguration_info': 'Get Azure PostgreSQL Configuration facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure PostgreSQL Configuration.',
 'azure_rm_postgresqldatabase': 'Manage PostgreSQL Database instance\n\nArguments: state, charset, server_name, resource_group, collation, force_update, name\n\nCreate, update and delete instance of PostgreSQL Database.',
 'azure_rm_postgresqldatabase_info': 'Get Azure PostgreSQL Database facts\n\nArguments: resource_group, server_name, name\n\nGet facts of PostgreSQL Database.',
 'azure_rm_postgresqlfirewallrule': 'Manage PostgreSQL firewall rule instance\n\nArguments: state, server_name, resource_group, start_ip_address, end_ip_address, name\n\nCreate, update and delete instance of PostgreSQL firewall rule.',
 'azure_rm_postgresqlfirewallrule_info': 'Get Azure PostgreSQL Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of Azure PostgreSQL Firewall Rule.',
 'azure_rm_postgresqlserver': 'Manage PostgreSQL Server instance\n\nArguments: sku, name, resource_group, storage_mb, admin_username, create_mode, state, version, location, enforce_ssl, admin_password\n\nCreate, update and delete instance of PostgreSQL Server.',
 'azure_rm_postgresqlserver_info': 'Get Azure PostgreSQL Server facts\n\nArguments: name, resource_group, tags\n\nGet facts of PostgreSQL Server.',
 'azure_rm_publicipaddress': 'Manage Azure Public IP Addresses\n\nArguments: sku, name, resource_group, state, domain_name, idle_timeout, version, location, allocation_method, ip_tags\n\nCreate, update and delete a Public IP address.\nAllows setting and updating the address allocation method and domain name label.\nUse the M(azure_rm_networkinterface) module to associate a Public IP with a network interface.',
 'azure_rm_publicipaddress_info': 'Get public IP facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific public IP or all public IPs within a resource group.',
 'azure_rm_rediscache': 'Manage Azure Cache for Redis instance\n\nArguments: maxfragmentationmemory_reserved, resource_group, shard_count, maxmemory_policy, static_ip, regenerate_key, notify_keyspace_events, sku, subnet, enable_non_ssl_port, name, maxmemory_reserved, wait_for_provisioning, reboot, state, location, tenant_settings\n\nCreate, update and delete instance of Azure Cache for Redis.',
 'azure_rm_rediscache_info': 'Get Azure Cache for Redis instance facts\n\nArguments: return_access_keys, name, resource_group, tags\n\nGet facts for Azure Cache for Redis instance.',
 'azure_rm_rediscachefirewallrule': 'Manage Azure Cache for Redis Firewall rules\n\nArguments: state, end_ip_address, name, resource_group, start_ip_address, cache_name\n\nCreate, update and delete Azure Cache for Redis Firewall rules.',
 'azure_rm_resource': 'Create any Azure resource\n\nArguments: body, resource_name, subresource, resource_group, url, status_code, provider, idempotency, state, resource_type, polling_interval, polling_timeout, method, api_version\n\nCreate, update or delete any Azure resource using Azure REST API.\nThis module gives access to resources that are not supported via Ansible modules.\nRefer to U(https://docs.microsoft.com/en-us/rest/api/) regarding details related to specific resource REST API.',
 'azure_rm_resource_info': 'Generic facts of Azure resources\n\nArguments: resource_type, resource_name, subresource, resource_group, provider, url, api_version\n\nObtain facts of any resource using Azure REST API.\nThis module gives access to resources that are not supported via Ansible modules.\nRefer to U(https://docs.microsoft.com/en-us/rest/api/) regarding details related to specific resource REST API.',
 'azure_rm_resourcegroup': 'Manage Azure resource groups\n\nArguments: state, location, force_delete_nonempty, name\n\nCreate, update and delete a resource group.',
 'azure_rm_resourcegroup_info': 'Get resource group facts\n\nArguments: list_resources, name, tags\n\nGet facts for a specific resource group or all resource groups.',
 'azure_rm_roleassignment': 'Manage Azure Role Assignment\n\nArguments: assignee_object_id, role_definition_id, scope, state, name\n\nCreate and delete instance of Azure Role Assignment.',
 'azure_rm_roleassignment_info': 'Gets Azure Role Assignment facts\n\nArguments: scope, role_definition_id, name, assignee\n\nGets facts of Azure Role Assignment.',
 'azure_rm_roledefinition': 'Manage Azure Role Definition\n\nArguments: state, description, name, scope, assignable_scopes, permissions\n\nCreate, update and delete instance of Azure Role Definition.',
 'azure_rm_roledefinition_info': 'Get Azure Role Definition facts\n\nArguments: scope, role_name, type, id\n\nGet facts of Azure Role Definition.',
 'azure_rm_route': 'Manage Azure route resource\n\nArguments: state, next_hop_type, route_table_name, name, resource_group, next_hop_ip_address, address_prefix\n\nCreate, update or delete a route.',
 'azure_rm_routetable': 'Manage Azure route table resource\n\nArguments: state, location, name, disable_bgp_route_propagation, resource_group\n\nCreate, update or delete a route table.',
 'azure_rm_routetable_info': 'Get route table facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific route table or all route table in a resource group or subscription.',
 'azure_rm_securitygroup': 'Manage Azure network security groups\n\nArguments: resource_group, purge_rules, rules, default_rules, purge_default_rules, state, location, name\n\nCreate, update or delete a network security group.\nA security group contains Access Control List (ACL) rules that allow or deny network traffic to subnets or individual network interfaces.\nA security group is created with a set of default security rules and an empty set of security rules.\nShape traffic flow by adding rules to the empty set of security rules.',
 'azure_rm_securitygroup_info': 'Get security group facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific security group or all security groups within a resource group.',
 'azure_rm_servicebus': 'Manage Azure Service Bus\n\nArguments: sku, state, name, resource_group, location\n\nCreate, update or delete an Azure Service Bus namespaces.',
 'azure_rm_servicebus_info': 'Get servicebus facts\n\nArguments: topic, name, resource_group, tags, type, namespace, show_sas_policies\n\nGet facts for a specific servicebus or all servicebus in a resource group or subscription.',
 'azure_rm_servicebusqueue': 'Manage Azure Service Bus queue\n\nArguments: status, max_size_in_mb, default_message_time_to_live_seconds, duplicate_detection_time_in_seconds, resource_group, enable_batched_operations, auto_delete_on_idle_in_seconds, enable_express, max_delivery_count, lock_duration_in_seconds, name, requires_duplicate_detection, requires_session, namespace, enable_partitioning, dead_lettering_on_message_expiration, forward_dead_lettered_messages_to, state, forward_to\n\nCreate, update or delete an Azure Service Bus queue.',
 'azure_rm_servicebussaspolicy': 'Manage Azure Service Bus SAS policy\n\nArguments: queue, name, resource_group, rights, namespace, regenerate_secondary_key, regenerate_primary_key, topic, state\n\nCreate, update or delete an Azure Service Bus SAS policy.',
 'azure_rm_servicebustopic': 'Manage Azure Service Bus\n\nArguments: max_size_in_mb, status, default_message_time_to_live_seconds, duplicate_detection_time_in_seconds, name, resource_group, namespace, enable_batched_operations, auto_delete_on_idle_in_seconds, enable_partitioning, state, enable_express, support_ordering, requires_duplicate_detection\n\nCreate, update or delete an Azure Service Bus topics.',
 'azure_rm_servicebustopicsubscription': 'Manage Azure Service Bus subscription\n\nArguments: status, default_message_time_to_live_seconds, duplicate_detection_time_in_seconds, resource_group, enable_batched_operations, auto_delete_on_idle_in_seconds, topic, max_delivery_count, dead_lettering_on_filter_evaluation_exceptions, lock_duration_in_seconds, name, requires_session, namespace, dead_lettering_on_message_expiration, forward_dead_lettered_messages_to, state, forward_to\n\nCreate, update or delete an Azure Service Bus subscriptions.',
 'azure_rm_snapshot': 'Manage Azure Snapshot instance.\n\nArguments: sku, state, name, resource_group, os_type, creation_data, location\n\nCreate, update and delete instance of Azure Snapshot.',
 'azure_rm_sqldatabase': 'Manage SQL Database instance\n\nArguments: resource_group, recovery_services_recovery_point_resource_id, edition, elastic_pool_name, max_size_bytes, zone_redundant, name, restore_point_in_time, server_name, create_mode, source_database_deletion_date, force_update, collation, source_database_id, state, location, sample_name, read_scale\n\nCreate, update and delete instance of SQL Database.',
 'azure_rm_sqldatabase_info': 'Get Azure SQL Database facts\n\nArguments: name, resource_group, elastic_pool_name, server_name, tags\n\nGet facts of Azure SQL Database.',
 'azure_rm_sqlfirewallrule': 'Manage Firewall Rule instance\n\nArguments: state, server_name, resource_group, start_ip_address, end_ip_address, name\n\nCreate, update and delete instance of Firewall Rule.',
 'azure_rm_sqlfirewallrule_info': 'Get Azure SQL Firewall Rule facts\n\nArguments: resource_group, server_name, name\n\nGet facts of SQL Firewall Rule.',
 'azure_rm_sqlserver': 'Manage SQL Server instance\n\nArguments: name, resource_group, admin_username, state, version, admin_password, identity, location\n\nCreate, update and delete instance of SQL Server.',
 'azure_rm_sqlserver_info': 'Get SQL Server facts\n\nArguments: resource_group, server_name\n\nGet facts of SQL Server.',
 'azure_rm_storageaccount': 'Manage Azure storage accounts\n\nArguments: kind, account_type, custom_domain, resource_group, blob_cors, name, state, location, access_tier, https_only, force_delete_nonempty\n\nCreate, update or delete a storage account.',
 'azure_rm_storageaccount_info': 'Get storage account facts\n\nArguments: tags, show_connection_string, name, resource_group, show_blob_cors\n\nGet facts for one storage account or all storage accounts within a resource group.',
 'azure_rm_storageblob': 'Manage blob containers and blob objects\n\nArguments: force, resource_group, dest, content_language, content_type, public_access, src, container, blob_type, state, blob, content_md5, storage_account_name, content_disposition, cache_control, content_encoding\n\nCreate, update and delete blob containers and blob objects.\nUse to upload a file and store it as a blob object, or download a blob object to a file.',
 'azure_rm_subnet': 'Manage Azure subnets\n\nArguments: name, resource_group, virtual_network_name, address_prefix_cidr, state, route_table, service_endpoints, security_group\n\nCreate, update or delete a subnet within a given virtual network.\nAllows setting and updating the address prefix CIDR, which must be valid within the context of the virtual network.\nUse the M(azure_rm_networkinterface) module to associate interfaces with the subnet and assign specific IP addresses.',
 'azure_rm_subnet_info': 'Get Azure Subnet facts\n\nArguments: virtual_network_name, name, resource_group\n\nGet facts of Azure Subnet.',
 'azure_rm_trafficmanagerendpoint': 'Manage Azure Traffic Manager endpoint\n\nArguments: target_resource_id, name, resource_group, min_child_endpoints, enabled, weight, priority, state, profile_name, geo_mapping, location, type, target\n\nCreate, update and delete Azure Traffic Manager endpoint.',
 'azure_rm_trafficmanagerendpoint_info': 'Get Azure Traffic Manager endpoint facts\n\nArguments: profile_name, type, name, resource_group\n\nGet facts for a specific Traffic Manager endpoints or all endpoints  in a Traffic Manager profile.',
 'azure_rm_trafficmanagerprofile': 'Manage Azure Traffic Manager profile\n\nArguments: routing_method, name, resource_group, dns_config, state, location, monitor_config, profile_status\n\nCreate, update and delete a Traffic Manager profile.',
 'azure_rm_trafficmanagerprofile_info': 'Get Azure Traffic Manager profile facts\n\nArguments: name, resource_group, tags\n\nGet facts for a Azure specific Traffic Manager profile or all Traffic Manager profiles.',
 'azure_rm_virtualmachine': 'Manage Azure virtual machines\n\nArguments: virtual_network_resource_group, resource_group, public_ip_allocation_method, image, zones, managed_disk_type, ssh_public_keys, os_disk_name, storage_container_name, allocated, ssh_password_enabled, storage_blob_name, remove_on_absent, availability_set, winrm, short_hostname, started, state, subnet_name, admin_password, network_interface_names, generalized, location, virtual_network_name, custom_data, open_ports, plan, accept_terms, vm_size, os_disk_size_gb, name, restarted, boot_diagnostics, admin_username, vm_identity, license_type, os_type, storage_account_name, data_disks, os_disk_caching\n\nManage and configure virtual machines (VMs) and associated resources on Azure.\nRequires a resource group containing at least one virtual network with at least one subnet.\nSupports images from the Azure Marketplace, which can be discovered with M(azure_rm_virtualmachineimage_facts).\nSupports custom images since Ansible 2.5.\nTo use I(custom_data) on a Linux image, the image must have cloud-init enabled. If cloud-init is not enabled, I(custom_data) is ignored.',
 'azure_rm_virtualmachine_info': 'Get virtual machine facts\n\nArguments: name, resource_group, tags\n\nGet facts for one or all virtual machines in a resource group.',
 'azure_rm_virtualmachineextension': 'Managed Azure Virtual Machine extension\n\nArguments: publisher, virtual_machine_extension_type, name, resource_group, settings, state, location, protected_settings, type_handler_version, auto_upgrade_minor_version, virtual_machine_name\n\nCreate, update and delete Azure Virtual Machine Extension.\nNote that this module was called M(azure_rm_virtualmachine_extension) before Ansible 2.8. The usage did not change.',
 'azure_rm_virtualmachineextension_info': 'Get Azure Virtual Machine Extension facts\n\nArguments: virtual_machine_name, name, resource_group, tags\n\nGet facts of Azure Virtual Machine Extension.',
 'azure_rm_virtualmachineimage_info': 'Get virtual machine image facts\n\nArguments: sku, publisher, version, location, offer\n\nGet facts for virtual machine images.',
 'azure_rm_virtualmachinescaleset': 'Manage Azure virtual machine scale sets\n\nArguments: load_balancer, application_gateway, virtual_network_resource_group, resource_group, virtual_network_name, image, upgrade_policy, zones, managed_disk_type, ssh_public_keys, enable_accelerated_networking, tier, vm_size, ssh_password_enabled, remove_on_absent, capacity, name, overprovision, admin_username, short_hostname, state, subnet_name, location, single_placement_group, custom_data, security_group, os_type, os_disk_caching, data_disks, admin_password\n\nCreate and update a virtual machine scale set.\nNote that this module was called M(azure_rm_virtualmachine_scaleset) before Ansible 2.8. The usage did not change.',
 'azure_rm_virtualmachinescaleset_info': 'Get Virtual Machine Scale Set facts\n\nArguments: tags, name, resource_group, format\n\nGet facts for a virtual machine scale set.\nNote that this module was called M(azure_rm_virtualmachine_scaleset_facts) before Ansible 2.8. The usage did not change.',
 'azure_rm_virtualmachinescalesetextension': 'Manage Azure Virtual Machine Scale Set (VMSS) extensions\n\nArguments: publisher, vmss_name, name, resource_group, settings, type, state, location, protected_settings, type_handler_version, auto_upgrade_minor_version\n\nCreate, update and delete Azure Virtual Machine Scale Set (VMSS) extensions.',
 'azure_rm_virtualmachinescalesetextension_info': 'Get Azure Virtual Machine Scale Set Extension facts\n\nArguments: vmss_name, name, resource_group\n\nGet facts of Azure Virtual Machine Scale Set Extension.',
 'azure_rm_virtualmachinescalesetinstance': 'Get Azure Virtual Machine Scale Set Instance facts\n\nArguments: instance_id, state, vmss_name, power_state, resource_group, latest_model\n\nGet facts of Azure Virtual Machine Scale Set VMs.',
 'azure_rm_virtualmachinescalesetinstance_info': 'Get Azure Virtual Machine Scale Set Instance facts\n\nArguments: instance_id, vmss_name, resource_group, tags\n\nGet facts of Azure Virtual Machine Scale Set VMs.',
 'azure_rm_virtualnetwork': 'Manage Azure virtual networks\n\nArguments: dns_servers, name, resource_group, state, address_prefixes_cidr, purge_address_prefixes, purge_dns_servers, location\n\nCreate, update or delete a virtual networks. Allows setting and updating the available IPv4 address ranges and setting custom DNS servers. Use the M(azure_rm_subnet) module to associate subnets with a virtual network.',
 'azure_rm_virtualnetwork_info': 'Get virtual network facts\n\nArguments: name, resource_group, tags\n\nGet facts for a specific virtual network or all virtual networks within a resource group.',
 'azure_rm_virtualnetworkgateway': 'Manage Azure virtual network gateways\n\nArguments: sku, name, resource_group, vpn_type, enable_bgp, bgp_settings, state, location, virtual_network, ip_configurations, gateway_type\n\nCreate, update or delete a virtual network gateway(VPN Gateway).\nWhen creating a VPN Gateway you must provide the name of an existing virtual network.',
 'azure_rm_virtualnetworkpeering': 'Manage Azure Virtual Network Peering\n\nArguments: name, resource_group, remote_virtual_network, state, allow_forwarded_traffic, virtual_network, use_remote_gateways, allow_virtual_network_access, allow_gateway_transit\n\nCreate, update and delete Azure Virtual Network Peering.',
 'azure_rm_virtualnetworkpeering_info': 'Get facts of Azure Virtual Network Peering\n\nArguments: virtual_network, name, resource_group\n\nGet facts of Azure Virtual Network Peering.',
 'azure_rm_webapp': 'Manage Web App instances\n\nArguments: resource_group, dns_registration, scm_type, app_settings, plan, https_only, deployment_source, app_state, name, purge_app_settings, skip_custom_domain_verification, frameworks, state, location, client_affinity_enabled, startup_file, ttl_in_seconds, container_settings\n\nCreate, update and delete instance of Web App.',
 'azure_rm_webapp_info': 'Get Azure web app facts\n\nArguments: resource_group, name, return_publish_profile, tags\n\nGet facts for a specific web app or all web app in a resource group, or all web app in current subscription.',
 'azure_rm_webappslot': 'Manage Azure Web App slot\n\nArguments: configuration_source, name, resource_group, purge_app_settings, app_state, frameworks, state, container_settings, app_settings, startup_file, auto_swap_slot_name, webapp_name, swap, deployment_source, location\n\nCreate, update and delete Azure Web App slot.',
 'bcf_switch': 'Create and remove a bcf switch.\n\nArguments: name, access_token, state, mac, controller, leaf_group, validate_certs, fabric_role\n\nCreate and remove a Big Cloud Fabric switch.',
 'beadm': 'Manage ZFS boot environments on FreeBSD/Solaris/illumos systems.\n\nArguments: state, force, name, mountpoint, snapshot, options, description\n\nCreate, delete or activate ZFS boot environments.\nMount and unmount ZFS boot environments.',
 'bearychat': 'Send BearyChat notifications\n\nArguments: url, text, markdown, attachments, channel\n\nThe M(bearychat) module sends notifications to U(https://bearychat.com) via the Incoming Robot integration.',
 'bigip_apm_acl': 'Manage user-defined APM ACLs\n\nArguments: path_match_case, acl_order, partition, name, state, entries, type, description\n\nManage user-defined APM ACLs.',
 'bigip_apm_network_access': 'Manage APM Network Access resource\n\nArguments: dtls_port, allow_local_subnet, excluded_ipv6_adresses, ipv6_address_space, ip_version, excluded_ipv4_adresses, allow_local_dns, ipv4_address_space, dtls, split_tunnel, ipv4_lease_pool, name, description, partition, dns_address_space, state, ipv6_lease_pool, snat_pool, excluded_dns_addresses\n\nManage APM Network Access resource.',
 'bigip_apm_policy_fetch': 'Exports the APM policy or APM access profile from remote nodes.\n\nArguments: force, name, file, dest, partition, type\n\nExports the apm policy or APM access profile from remote nodes.',
 'bigip_apm_policy_import': 'Manage BIG-IP APM policy or APM access profile imports\n\nArguments: source, partition, force, name, type\n\nManage BIG-IP APM policy or APM access profile imports.',
 'bigip_appsvcs_extension': 'Manage application service deployments\n\nArguments: content, tenants, state, force\n\nManages application service deployments via the App Services Extension functionality in BIG-IP.',
 'bigip_asm_dos_application': 'Manage application settings for DOS profile\n\nArguments: profile, geolocations, trigger_irule, heavy_urls, mobile_detection, partition, rtbh_enable, rtbh_duration, scrubbing_enable, state, scrubbing_duration, single_page_application\n\nManages Application settings for ASM/AFM DOS profile.',
 'bigip_asm_policy_fetch': 'Exports the asm policy from remote nodes.\n\nArguments: compact, binary, base64, force, name, dest, partition, file, inline\n\nExports the asm policy from remote nodes.',
 'bigip_asm_policy_import': 'Manage BIG-IP ASM policy imports\n\nArguments: inline, partition, force, name, source\n\nManage BIG-IP ASM policies policy imports.',
 'bigip_asm_policy_manage': 'Manage BIG-IP ASM policies\n\nArguments: active, state, partition, name, template\n\nManage BIG-IP ASM policies, create from templates and manage global policy settings.',
 'bigip_asm_policy_server_technology': 'Manages Server Technology on ASM policy\n\nArguments: state, partition, name, policy_name\n\nManages Server Technology on ASM policy.',
 'bigip_asm_policy_signature_set': 'Manages Signature Sets on ASM policy\n\nArguments: state, name, learn, alarm, partition, block, policy_name\n\nManages Signature Sets on ASM policy.',
 'bigip_cli_alias': 'Manage CLI aliases on a BIG-IP\n\nArguments: state, command, name, scope, partition, description\n\nAllows for managing both private and shared aliases on a BIG-IP.',
 'bigip_cli_script': 'Manage CLI scripts on a BIG-IP\n\nArguments: content, state, partition, name, description\n\nManages CLI scripts on a BIG-IP. CLI scripts, otherwise known as tmshell scripts or TMSH scripts allow you to create custom scripts that can run to manage objects within a BIG-IP.',
 'bigip_command': 'Run TMSH and BASH commands on F5 devices\n\nArguments: retries, commands, chdir, interval, warn, transport, wait_for, match\n\nSends a TMSH or BASH command to an BIG-IP node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module is B(not) idempotent, nor will it ever be. It is intended as a stop-gap measure to satisfy automation requirements until such a time as a real module has been developed to configure in the way you need.\nIf you are using this module, you should probably also be filing an issue to have a B(real) module created for your needs.',
 'bigip_config': 'Manage BIG-IP configuration sections\n\nArguments: reset, verify, save, merge_content\n\nManages a BIG-IP configuration by allowing TMSH commands that modify running configuration, or merge SCF formatted files into the running configuration. Additionally, this module is of significant importance because it allows you to save your running configuration to disk. Since the F5 module only manipulate running configuration, it is important that you utilize this module to save that running config.',
 'bigip_configsync_action': 'Perform different actions related to config-sync\n\nArguments: overwrite_config, sync_device_to_group, device_group, sync_most_recent_to_device\n\nAllows one to run different config-sync actions. These actions allow you to manually sync your configuration across multiple BIG-IPs when those devices are in an HA pair.',
 'bigip_data_group': 'Manage data groups on a BIG-IP\n\nArguments: name, delete_data_group_file, partition, records_src, records, state, internal, separator, external_file_name, type, description\n\nAllows for managing data groups on a BIG-IP. Data groups provide a way to store collections of values on a BIG-IP for later use in things such as LTM rules, iRules, and ASM policies.',
 'bigip_device_auth': 'Manage system authentication on a BIG-IP\n\nArguments: protocol_name, service_name, secret, state, authentication, use_for_auth, update_secret, servers, type\n\nManage the system authentication configuration. This module can assist in configuring a number of different system authentication types. Note that this module can not be used to configure APM authentication types.',
 'bigip_device_auth_ldap': 'Manage LDAP device authentication settings on BIG-IP\n\nArguments: update_password, remote_directory_tree, login_ldap_attr, servers, ssl, port, client_key, ca_cert, user_template, check_member_attr, bind_dn, fallback_to_local, state, bind_password, scope, validate_certs, client_cert\n\nManage LDAP device authentication settings on BIG-IP.',
 'bigip_device_certificate': 'Manage self-signed device certificates\n\nArguments: force, key_name, days_valid, key_size, cert_name, add_to_trusted, new_cert, transport, issuer\n\nModule used to create and/or renew self-signed device certificates for BIG-IP.',
 'bigip_device_connectivity': 'Manages device IP configuration settings for HA on a BIG-IP\n\nArguments: multicast_interface, mirror_primary_address, failover_multicast, config_sync_ip, mirror_secondary_address, multicast_address, unicast_failover, cluster_mirroring, multicast_port\n\nManages device IP configuration settings for HA on a BIG-IP. Each BIG-IP device has synchronization and failover connectivity information (IP addresses) that you define as part of HA pairing or clustering. This module allows you to configure that information.',
 'bigip_device_dns': 'Manage BIG-IP device DNS settings\n\nArguments: name_servers, ip_version, search, cache, state\n\nManage BIG-IP device DNS settings.',
 'bigip_device_group': 'Manage device groups on a BIG-IP\n\nArguments: name, auto_sync, description, max_incremental_sync_size, save_on_auto_sync, state, full_sync, type, network_failover\n\nManaging device groups allows you to create HA pairs and clusters of BIG-IP devices. Usage of this module should be done in conjunction with the C(bigip_configsync_actions) to sync configuration across the pair or cluster if auto-sync is disabled.',
 'bigip_device_group_member': 'Manages members in a device group\n\nArguments: state, name, device_group\n\nManages members in a device group. Members in a device group can only be added or removed, never updated. This is because the members are identified by unique name values and changing that name would invalidate the uniqueness.',
 'bigip_device_ha_group': 'Manage HA group settings on a BIG-IP system\n\nArguments: state, enable, trunks, name, pools, active_bonus, description\n\nManage HA group settings on a BIG-IP system.',
 'bigip_device_httpd': 'Manage HTTPD related settings on BIG-IP\n\nArguments: auth_pam_validate_ip, hostname_lookup, log_level, redirect_http_to_https, auth_pam_dashboard_timeout, ssl_protocols, fast_cgi_timeout, allow, ssl_port, auth_pam_idle_timeout, max_clients, ssl_cipher_suite, auth_name\n\nManages HTTPD related settings on the BIG-IP. These settings are interesting to change when you want to set GUI timeouts and other TMUI related settings.',
 'bigip_device_info': 'Collect information from F5 BIG-IP devices\n\nArguments: gather_subset\n\nCollect information from F5 BIG-IP devices.\nThis module was called C(bigip_device_facts) before Ansible 2.9. The usage did not change.',
 'bigip_device_license': 'Manage license installation and activation on BIG-IP devices\n\nArguments: license_key, license_server, accept_eula, state\n\nManage license installation and activation on a BIG-IP.',
 'bigip_device_ntp': 'Manage NTP servers on a BIG-IP\n\nArguments: ntp_servers, timezone, state\n\nManage NTP servers on a BIG-IP.',
 'bigip_device_sshd': 'Manage the SSHD settings of a BIG-IP\n\nArguments: log_level, allow, banner_text, inactivity_timeout, login, banner, port\n\nManage the SSHD settings of a BIG-IP.',
 'bigip_device_syslog': 'Manage system-level syslog settings on BIG-IP\n\nArguments: local6_from, mail_from, mail_to, local6_to, auth_priv_from, user_log_from, kern_from, messages_to, kern_to, daemon_from, daemon_to, auth_priv_to, console_log, messages_from, cron_from, iso_date, user_log_to, include, cron_to\n\nManage system-level syslog settings on BIG-IP.',
 'bigip_device_traffic_group': 'Manages traffic groups on BIG-IP\n\nArguments: ha_order, name, auto_failback_time, partition, ha_group, auto_failback, state, ha_load_factor, mac_address\n\nSupports managing traffic groups and their attributes on a BIG-IP.',
 'bigip_device_trust': 'Manage the trust relationships between BIG-IPs\n\nArguments: state, peer_user, peer_server, peer_password, type, peer_hostname\n\nManage the trust relationships between BIG-IPs. Devices, once peered, cannot be updated. If updating is needed, the peer must first be removed before it can be re-added to the trust.',
 'bigip_dns_cache_resolver': 'Manage DNS resolver cache configurations on BIG-IP\n\nArguments: answer_default_zones, state, name, forward_zones, partition, route_domain\n\nManage DNS resolver cache configurations on BIG-IP.',
 'bigip_dns_nameserver': "Manage LTM DNS nameservers on a BIG-IP\n\nArguments: route_domain, tsig_key, name, address, service_port, partition, state\n\nManages LTM DNS nameservers on a BIG-IP. These nameservers form part of what is known as DNS Express on a BIG-IP. This module does not configure GTM related functionality, nor does it configure system-level name servers that affect the base system's ability to resolve DNS names.",
 'bigip_dns_resolver': 'Manage DNS resolvers on a BIG-IP\n\nArguments: use_udp, randomize_query_case, name, partition, route_domain, answer_default_zones, state, use_ipv4, use_ipv6, cache_size, use_tcp\n\nManage DNS resolver on a BIG-IP.',
 'bigip_dns_zone': 'Manage DNS zones on BIG-IP\n\nArguments: tsig_server_key, state, name, dns_express, nameservers, partition\n\nManage DNS zones on BIG-IP. The zones managed here are primarily used for configuring DNS Express on BIG-IP. This module does not configure zones that are found in BIG-IP ZoneRunner.',
 'bigip_file_copy': 'Manage files in datastores on a BIG-IP\n\nArguments: source, state, force, name, datastore, partition\n\nManages files on a variety of datastores on a BIG-IP.',
 'bigip_firewall_address_list': 'Manage address lists on BIG-IP AFM\n\nArguments: geo_locations, addresses, name, address_ranges, address_lists, fqdns, partition, state, description\n\nManages the AFM address lists on a BIG-IP. This module can be used to add and remove address list entries.',
 'bigip_firewall_dos_profile': 'Manage AFM DoS profiles on a BIG-IP\n\nArguments: default_whitelist, state, name, threshold_sensitivity, partition, description\n\nManages AFM Denial of Service (DoS) profiles on a BIG-IP. To manage the vectors associated with a DoS profile, refer to the C(bigip_firewall_dos_vector) module.',
 'bigip_firewall_dos_vector': 'Manage attack vector configuration in an AFM DoS profile\n\nArguments: profile, bad_actor_detection, blacklist_detection_seconds, per_source_ip_mitigation_threshold, threshold_mode, mitigation_threshold_eps, attack_floor, simulate_auto_threshold, name, attack_ceiling, partition, per_source_ip_detection_threshold, allow_advertisement, auto_blacklist, detection_threshold_percent, state, detection_threshold_eps, blacklist_duration\n\nManage attack vector configuration in an AFM DoS profile. In addition to the normal AFM DoS profile vectors, this module can manage the device-configuration vectors. See the module documentation for details about this method.',
 'bigip_firewall_global_rules': "Manage AFM global rule settings on BIG-IP\n\nArguments: enforced_policy, staged_policy, service_policy, description\n\nConfigures the global network firewall rules. These firewall rules are applied to all packets except those going through the management interface. They are applied first, before any firewall rules for the packet's virtual server, route domain, and/or self IP.",
 'bigip_firewall_log_profile': 'Manages AFM logging profiles configured in the system\n\nArguments: port_misuse, dos_protection, name, partition, ip_intelligence, state, description\n\nManages AFM logging profiles configured in the system along with basic information about each profile.',
 'bigip_firewall_log_profile_network': 'Configures Network Firewall related settings of the log profile\n\nArguments: log_tcp_events, log_storage_format, log_tcp_errors, log_matches_drop_rule, log_ip_errors, log_translation_fields, partition, rate_limit, log_format_delimiter, state, profile_name, log_message_fields, log_matches_reject_rule, log_publisher, log_matches_accept_rule\n\nConfigures Network Firewall related settings of the log profile.',
 'bigip_firewall_policy': 'Manage AFM security firewall policies on a BIG-IP\n\nArguments: rules, state, partition, name, description\n\nManages AFM security firewall policies on a BIG-IP.',
 'bigip_firewall_port_list': 'Manage port lists on BIG-IP AFM\n\nArguments: state, name, port_ranges, description, partition, port_lists, ports\n\nManages the AFM port lists on a BIG-IP. This module can be used to add and remove port list entries.',
 'bigip_firewall_rule': 'Manage AFM Firewall rules\n\nArguments: status, rule_list, destination, protocol, description, schedule, irule, icmp_message, parent_policy, logging, name, partition, source, state, action, parent_rule_list\n\nManages firewall rules in an AFM firewall policy. New rules will always be added to the end of the policy. Rules can be re-ordered using the C(bigip_security_policy) module. Rules can also be pre-ordered using the C(bigip_security_policy) module and then later updated using the C(bigip_firewall_rule) module.',
 'bigip_firewall_rule_list': 'Manage AFM security firewall policies on a BIG-IP\n\nArguments: rules, state, partition, name, description\n\nManages AFM security firewall policies on a BIG-IP.',
 'bigip_firewall_schedule': 'Manage BIG-IP AFM schedule configurations\n\nArguments: days_of_week, daily_hour_start, partition, date_valid_start, name, daily_hour_end, state, date_valid_end, description\n\nManage BIG-IP AFM schedule configurations.',
 'bigip_gtm_datacenter': 'Manage Datacenter configuration in BIG-IP\n\nArguments: state, contact, description, name, partition, location\n\nManage BIG-IP data center configuration. A data center defines the location where the physical network components reside, such as the server and link objects that share the same subnet on the network. This module is able to manipulate the data center definitions in a BIG-IP.',
 'bigip_gtm_global': 'Manages global GTM settings\n\nArguments: synchronization_group_name, synchronize_zone_files, synchronization\n\nManages global GTM settings. These settings include general, load balancing, and metrics related settings.',
 'bigip_gtm_monitor_bigip': 'Manages F5 BIG-IP GTM BIG-IP monitors\n\nArguments: interval, name, parent, ip, partition, aggregate_dynamic_ratios, state, ignore_down_response, timeout, port\n\nManages F5 BIG-IP GTM BIG-IP monitors. This monitor is used by GTM to monitor BIG-IPs themselves.',
 'bigip_gtm_monitor_external': 'Manages external GTM monitors on a BIG-IP\n\nArguments: interval, name, parent, ip, variables, partition, state, arguments, timeout, external_program, port\n\nManages external GTM monitors on a BIG-IP.',
 'bigip_gtm_monitor_firepass': 'Manages F5 BIG-IP GTM FirePass monitors\n\nArguments: update_password, interval, parent, ip, cipher_list, concurrency_limit, target_username, max_load_average, name, partition, port, state, ignore_down_response, timeout, target_password, probe_timeout\n\nManages F5 BIG-IP GTM FirePass monitors.',
 'bigip_gtm_monitor_http': 'Manages F5 BIG-IP GTM http monitors\n\nArguments: update_password, interval, parent, ip, transparent, reverse, name, receive, partition, send, target_username, port, state, ignore_down_response, timeout, target_password, probe_timeout\n\nManages F5 BIG-IP GTM http monitors.',
 'bigip_gtm_monitor_https': 'Manages F5 BIG-IP GTM https monitors\n\nArguments: update_password, interval, parent, ip, port, cipher_list, compatibility, client_key, reverse, name, receive, partition, send, transparent, target_username, state, ignore_down_response, timeout, target_password, probe_timeout, client_cert\n\nManages F5 BIG-IP GTM https monitors.',
 'bigip_gtm_monitor_tcp': 'Manages F5 BIG-IP GTM tcp monitors\n\nArguments: interval, name, parent, receive, ip, partition, send, port, state, ignore_down_response, timeout, probe_timeout, transparent, reverse\n\nManages F5 BIG-IP GTM tcp monitors.',
 'bigip_gtm_monitor_tcp_half_open': 'Manages F5 BIG-IP GTM tcp half-open monitors\n\nArguments: probe_attempts, interval, name, parent, ip, partition, port, state, probe_interval, ignore_down_response, timeout, probe_timeout, transparent\n\nManages F5 BIG-IP GTM tcp half-open monitors.',
 'bigip_gtm_pool': 'Manages F5 BIG-IP GTM pools\n\nArguments: max_answers_returned, alternate_lb_method, name, partition, fallback_ip, preferred_lb_method, state, fallback_lb_method, availability_requirements, members, ttl, type, monitors\n\nManages F5 BIG-IP GTM pools.',
 'bigip_gtm_pool_member': 'Manage GTM pool member settings\n\nArguments: partition, ratio, monitor, limits, replace_all_with, server_name, member_order, state, aggregate, virtual_server, type, pool, description\n\nManages a variety of settings on GTM pool members. The settings that can be adjusted with this module are much more broad that what can be done in the C(bigip_gtm_pool) module. The pool module is intended to allow you to adjust the member order in the pool, not the various settings of the members. The C(bigip_gtm_pool_member) module should be used to adjust all of the other settings.',
 'bigip_gtm_server': 'Manages F5 BIG-IP GTM servers\n\nArguments: link_discovery, name, limits, datacenter, partition, server_type, monitors, state, prober_preference, prober_fallback, virtual_server_discovery, prober_pool, devices, iquery_options, availability_requirements\n\nManage BIG-IP server configuration. This module is able to manipulate the server definitions in a BIG-IP.',
 'bigip_gtm_topology_record': 'Manages GTM Topology Records\n\nArguments: source, state, destination, weight, partition\n\nManages GTM Topology Records. Once created, only topology record C(weight) can be modified.',
 'bigip_gtm_topology_region': 'Manages GTM Topology Regions\n\nArguments: region_members, partition, name, state\n\nManages GTM Topology Regions.',
 'bigip_gtm_virtual_server': 'Manages F5 BIG-IP GTM virtual servers\n\nArguments: partition, virtual_server_dependencies, translation_port, limits, server_name, translation_address, port, state, link, availability_requirements, address, monitors, name\n\nManages F5 BIG-IP GTM virtual servers. A GTM server can have many virtual servers associated with it. They are arranged in much the same way that pool members are to pools.',
 'bigip_gtm_wide_ip': 'Manages F5 BIG-IP GTM wide ip\n\nArguments: name, pool_lb_method, partition, last_resort_pool, irules, state, pools, type, aliases\n\nManages F5 BIG-IP GTM wide ip.',
 'bigip_hostname': 'Manage the hostname of a BIG-IP\n\nArguments: hostname\n\nManage the hostname of a BIG-IP.',
 'bigip_iapp_service': 'Manages TCL iApp services on a BIG-IP\n\nArguments: force, description, parameters, strict_updates, partition, device_group, state, template, traffic_group, metadata, name\n\nManages TCL iApp services on a BIG-IP.\nIf you are looking for the API that is communicated with on the BIG-IP, the one the is used is C(/mgmt/tm/sys/application/service/).',
 'bigip_iapp_template': 'Manages TCL iApp templates on a BIG-IP\n\nArguments: content, state, partition, force, name\n\nManages TCL iApp templates on a BIG-IP. This module will allow you to deploy iApp templates to the BIG-IP and manage their lifecycle. The conventional way to use this module is to import new iApps as needed or by extracting the contents of the iApp archive that is provided at downloads.f5.com and then importing all the iApps with this module. This module can also update existing iApps provided that the source of the iApp changed while the name stayed the same. Note however that this module will not reconfigure any services that may have been created using the C(bigip_iapp_service) module. iApps are normally not updated in production. Instead, new versions are deployed and then existing services are changed to consume that new template. As such, the ability to update templates in-place requires the C(force) option to be used.',
 'bigip_ike_peer': 'Manage IPSec IKE Peer configuration on BIG-IP\n\nArguments: phase1_verify_peer_cert, update_password, verified_id_type, presented_id_type, description, remote_address, phase1_auth_method, phase1_key, phase1_hash_algorithm, phase1_cert, verified_id_value, name, presented_id_value, preshared_key, partition, phase1_perfect_forward_secrecy, state, version, phase1_encryption_algorithm\n\nManage IPSec IKE Peer configuration on BIG-IP.',
 'bigip_imish_config': 'Manage BIG-IP advanced routing configuration sections\n\nArguments: src, backup_options, after, lines, intended_config, diff_against, route_domain, parents, save_when, before, running_config, replace, backup, match, diff_ignore_lines\n\nThis module provides an implementation for working with advanced routing configuration sections in a deterministic way.',
 'bigip_ipsec_policy': 'Manage IPSec policies on a BIG-IP\n\nArguments: ipv4_interface, protocol, description, auth_algorithm, route_domain, perfect_forward_secrecy, encrypt_algorithm, lifetime, name, partition, tunnel_local_address, kb_lifetime, state, ipcomp, mode, tunnel_remote_address\n\nManage IPSec policies on a BIG-IP.',
 'bigip_irule': 'Manage iRules across different modules on a BIG-IP\n\nArguments: content, src, state, name, partition, module\n\nManage iRules across different modules on a BIG-IP.',
 'bigip_log_destination': 'Manages log destinations on a BIG-IP.\n\nArguments: protocol, description, pool_settings, transport_profile, syslog_format, forward_to, address, server_ssl_profile, port, pool, name, syslog_settings, partition, template_delete_delay, state, distribution, type, template_retransmit_interval\n\nManages log destinations on a BIG-IP.',
 'bigip_log_publisher': 'Manages log publishers on a BIG-IP\n\nArguments: description, state, partition, name, destinations\n\nManages log publishers on a BIG-IP.',
 'bigip_lx_package': 'Manages Javascript LX packages on a BIG-IP\n\nArguments: state, package\n\nManages Javascript LX packages on a BIG-IP. This module will allow you to deploy LX packages to the BIG-IP and manage their lifecycle.',
 'bigip_management_route': 'Manage system management routes on a BIG-IP\n\nArguments: state, network, name, partition, gateway, description\n\nConfigures route settings for the management interface of a BIG-IP.',
 'bigip_message_routing_peer': 'Manage peers for routing generic message protocol messages\n\nArguments: ratio, name, connection_mode, partition, auto_init_interval, state, auto_init, transport_config, number_of_connections, type, pool, description\n\nManage peers for routing generic message protocol messages.',
 'bigip_message_routing_protocol': 'Manage generic message parser profile.\n\nArguments: name, parent, max_msg_size, partition, max_egress_buffer, no_response, state, msg_terminator, disable_parser, description\n\nManages generic message parser profile for use with the message routing framework.',
 'bigip_message_routing_route': 'Manages static routes for routing message protocol messages\n\nArguments: peer_selection_mode, peers, name, src_address, partition, dst_address, state, type, description\n\nManages static routes for routing message protocol messages.',
 'bigip_message_routing_router': 'Manages router profiles for message-routing protocols\n\nArguments: ignore_client_port, description, parent, max_pending_messages, max_retries, mirrored_msg_sweeper_interval, mirror, name, inherited_traffic_group, type, partition, state, max_pending_bytes, routes, traffic_group, use_local_connection\n\nManages router profiles for message-routing protocols.',
 'bigip_message_routing_transport_config': 'Manages configuration for an outgoing connection\n\nArguments: src_port, name, rules, partition, profiles, state, src_addr_translation, type, description\n\nManages configuration for an outgoing connection in BIG-IP message routing.',
 'bigip_monitor_dns': 'Manage DNS monitors on a BIG-IP\n\nArguments: accept_rcode, interval, description, parent, ip, allowed_divergence_value, answer_section_contains, up_interval, port, reverse, sampling_timespan, name, receive, partition, adaptive_limit, allowed_divergence_type, state, time_until_up, query_name, manual_resume, timeout, query_type, adaptive, transparent\n\nManages DNS monitors on a BIG-IP.',
 'bigip_monitor_external': 'Manages external LTM monitors on a BIG-IP\n\nArguments: interval, name, parent, ip, variables, partition, state, arguments, timeout, external_program, port, description\n\nManages external LTM monitors on a BIG-IP.',
 'bigip_monitor_gateway_icmp': 'Manages F5 BIG-IP LTM gateway ICMP monitors\n\nArguments: interval, description, parent, ip, up_interval, port, sampling_timespan, name, time_until_up, partition, adaptive_limit, allowed_divergence_type, state, allowed_divergence_value, manual_resume, timeout, adaptive, transparent\n\nManages gateway ICMP monitors on a BIG-IP.',
 'bigip_monitor_http': 'Manages F5 BIG-IP LTM http monitors\n\nArguments: interval, description, parent, ip, target_username, receive_disable, reverse, receive, name, partition, send, port, state, time_until_up, timeout, target_password\n\nManages F5 BIG-IP LTM http monitors.',
 'bigip_monitor_https': 'Manages F5 BIG-IP LTM https monitors\n\nArguments: interval, description, parent, ssl_profile, ip, up_interval, target_username, name, receive_disable, receive, partition, send, port, state, time_until_up, timeout, target_password\n\nManages F5 BIG-IP LTM https monitors.',
 'bigip_monitor_ldap': 'Manages BIG-IP LDAP monitors\n\nArguments: update_password, interval, description, parent, ip, chase_referrals, mandatory_attributes, base, up_interval, target_username, name, partition, port, filter, state, time_until_up, manual_resume, timeout, debug, target_password, security\n\nManages BIG-IP LDAP monitors.',
 'bigip_monitor_snmp_dca': 'Manages BIG-IP SNMP data collecting agent (DCA) monitors\n\nArguments: interval, disk_threshold, parent, community, cpu_threshold, description, name, cpu_coefficient, time_until_up, partition, memory_threshold, disk_coefficient, state, version, agent_type, memory_coefficient, timeout\n\nThe BIG-IP has an SNMP data collecting agent (DCA) that can query remote SNMP agents of various types, including the UC Davis agent (UCD) and the Windows 2000 Server agent (WIN2000).',
 'bigip_monitor_tcp': 'Manages F5 BIG-IP LTM tcp monitors\n\nArguments: interval, name, parent, receive, ip, partition, send, state, time_until_up, timeout, port, description\n\nManages F5 BIG-IP LTM tcp monitors via iControl SOAP API.',
 'bigip_monitor_tcp_echo': 'Manages F5 BIG-IP LTM tcp echo monitors\n\nArguments: interval, name, parent, ip, partition, state, time_until_up, timeout, description\n\nManages F5 BIG-IP LTM tcp echo monitors.',
 'bigip_monitor_tcp_half_open': 'Manages F5 BIG-IP LTM tcp half-open monitors\n\nArguments: interval, name, parent, ip, partition, state, time_until_up, timeout, port, description\n\nManages F5 BIG-IP LTM tcp half-open monitors.',
 'bigip_monitor_udp': 'Manages F5 BIG-IP LTM udp monitors\n\nArguments: interval, receive_disable, parent, receive, ip, partition, send, name, state, time_until_up, timeout, port, description\n\nManages F5 BIG-IP LTM udp monitors.',
 'bigip_node': 'Manages F5 BIG-IP LTM nodes\n\nArguments: description, fqdn_auto_populate, rate_limit, fqdn_up_interval, address, monitors, name, ratio, quorum, fqdn_address_type, partition, connection_limit, fqdn, monitor_type, state, availability_requirements, fqdn_down_interval, dynamic_ratio\n\nManages F5 BIG-IP LTM nodes.',
 'bigip_partition': 'Manage BIG-IP partitions\n\nArguments: route_domain, description, state, name\n\nManage BIG-IP partitions.',
 'bigip_password_policy': 'Manages the authentication password policy on a BIG-IP\n\nArguments: password_memory, max_duration, required_special, required_uppercase, min_length, max_login_failures, min_duration, required_lowercase, policy_enforcement, expiration_warning, required_numeric\n\nManages the authentication password policy on a BIG-IP.',
 'bigip_policy': 'Manage general policy configuration on a BIG-IP\n\nArguments: state, description, name, rules, partition, strategy\n\nManages general policy configuration on a BIG-IP. This module is best used in conjunction with the C(bigip_policy_rule) module. This module can handle general configuration like setting the draft state of the policy, the description, and things unrelated to the policy rules themselves. It is also the first module that should be used when creating rules as the C(bigip_policy_rule) module requires a policy parameter.',
 'bigip_policy_rule': 'Manage LTM policy rules on a BIG-IP\n\nArguments: state, description, policy, partition, conditions, actions, name\n\nThis module will manage LTM policy rules on a BIG-IP.',
 'bigip_pool': 'Manages F5 BIG-IP LTM pools\n\nArguments: monitors, lb_method, quorum, replace_all_with, priority_group_activation, partition, slow_ramp_time, service_down_action, reselect_tries, state, description, aggregate, metadata, monitor_type, name\n\nManages F5 BIG-IP LTM pools via iControl REST API.',
 'bigip_pool_member': 'Manages F5 BIG-IP LTM pool members\n\nArguments: description, replace_all_with, fqdn_auto_populate, connection_limit, ip_encapsulation, preserve_node, address, aggregate, monitors, pool, ratio, name, partition, rate_limit, fqdn, reuse_nodes, port, state, availability_requirements, priority_group\n\nManages F5 BIG-IP LTM pool members via iControl SOAP API.',
 'bigip_profile_analytics': 'Manage HTTP analytics profiles on a BIG-IP\n\nArguments: partition, description, parent, notification_by_email, external_logging_publisher, collect_max_tps_and_throughput, collected_stats_external_logging, name, collect_ip, collect_geo, collect_user_sessions, notification_by_syslog, collect_page_load_time, state, collected_stats_internal_logging, collect_url, collect_user_agent, notification_email_addresses\n\nManage HTTP analytics profiles on a BIG-IP.',
 'bigip_profile_client_ssl': 'Manages client SSL profiles on a BIG-IP\n\nArguments: ciphers, allow_non_ssl, cert_key_chain, sni_require, client_auth_frequency, cert_auth_depth, client_auth_crl, allow_expired_crl, retain_certificate, advertised_cert_authority, strict_resume, name, parent, server_name, secure_renegotiation, partition, options, state, renegotiation, sni_default, trusted_cert_authority, client_certificate\n\nManages client SSL profiles on a BIG-IP.',
 'bigip_profile_dns': 'Manage DNS profiles on a BIG-IP\n\nArguments: enable_dns_firewall, enable_zone_transfer, name, parent, process_recursion_desired, unhandled_query_action, enable_cache, enable_dns_express, partition, state, use_local_bind, enable_gtm, enable_dnssec, cache_name\n\nManage DNS profiles on a BIG-IP. Many DNS profiles; each with their own adjustments to the standard C(dns) profile. Users of this module should be aware that many of the adjustable knobs have no module default. Instead, the default is assigned by the BIG-IP system itself which, in most cases, is acceptable.',
 'bigip_profile_fastl4': 'Manages Fast L4 profiles\n\nArguments: ip_df_mode, receive_window_size, tcp_handshake_timeout, ip_tos_to_client, tcp_timestamp_mode, late_binding, mss_override, tcp_close_timeout, server_timestamp, link_qos_to_server, state, tcp_time_wait_timeout, tcp_strip_sack, reassemble_fragments, ip_ttl_mode, ip_ttl_v6, ip_ttl_v4, loose_initialization, keep_alive_interval, description, parent, idle_timeout, timeout_recovery, name, server_sack, reset_on_timeout, partition, tcp_wscale_mode, rtt_from_client, rtt_from_server, explicit_flow_migration, ip_tos_to_server, link_qos_to_client, client_timeout, loose_close, tcp_generate_isn, syn_cookie_mss\n\nManages Fast L4 profiles.',
 'bigip_profile_http': 'Manage HTTP profiles on a BIG-IP\n\nArguments: enforcement, update_password, request_chunking, description, parent, insert_xforwarded_for, header_insert, fallback_host, maximum_age, accept_xff, dns_resolver, hsts_mode, encrypt_cookies, fallback_status_codes, server_agent_name, sflow, name, encrypt_cookie_secret, xff_alternative_names, partition, response_chunking, state, oneconnect_transformations, redirect_rewrite, header_erase, include_subdomains, proxy_type\n\nManage HTTP profiles on a BIG-IP.',
 'bigip_profile_http2': 'Manage HTTP2 profiles on a BIG-IP\n\nArguments: receive_window, insert_header_name, name, parent, activation_modes, partition, idle_timeout, write_size, state, enforce_tls_requirements, streams, frame_size, insert_header, header_table_size, description\n\nManage HTTP2 profiles on a BIG-IP.',
 'bigip_profile_http_compression': 'Manage HTTP compression profiles on a BIG-IP\n\nArguments: name, parent, partition, gzip_window_size, state, gzip_memory_level, buffer_size, gzip_level, description\n\nManage HTTP compression profiles on a BIG-IP.',
 'bigip_profile_oneconnect': 'Manage OneConnect profiles on a BIG-IP\n\nArguments: idle_timeout_override, source_mask, name, parent, maximum_reuse, partition, maximum_age, limit_type, state, maximum_size, share_pools, description\n\nManage OneConnect profiles on a BIG-IP.',
 'bigip_profile_persistence_cookie': 'Manage cookie persistence profiles on BIG-IP\n\nArguments: update_password, secure, parent, cookie_name, cookie_encryption, encrypt_cookie_pool_name, match_across_virtuals, always_send, cookie_method, name, match_across_pools, description, partition, match_across_services, state, expiration, override_connection_limit, http_only, encryption_passphrase\n\nManage cookie persistence profiles on BIG-IP.',
 'bigip_profile_persistence_src_addr': 'Manage source address persistence profiles\n\nArguments: name, parent, match_across_pools, entry_timeout, partition, match_across_services, state, match_across_virtuals, hash_algorithm, override_connection_limit\n\nManages source address persistence profiles.',
 'bigip_profile_server_ssl': 'Manages server SSL profiles on a BIG-IP\n\nArguments: update_password, ciphers, passphrase, parent, sni_require, server_certificate, key, name, server_name, secure_renegotiation, partition, ocsp_profile, state, certificate, chain, sni_default\n\nManages server SSL profiles on a BIG-IP.',
 'bigip_profile_tcp': 'Manage TCP profiles on a BIG-IP\n\nArguments: name, parent, initial_congestion_window_size, partition, proxy_options, syn_rto_base, idle_timeout, state, initial_receive_window_size, time_wait_recycle, nagle, early_retransmit\n\nManage TCP profiles on a BIG-IP. Many TCP profiles; each with their own adjustments to the standard C(tcp) profile. Users of this module should be aware that many of the adjustable knobs have no module default. Instead, the default is assigned by the BIG-IP system itself which, in most cases, is acceptable.',
 'bigip_profile_udp': 'Manage UDP profiles on a BIG-IP\n\nArguments: idle_timeout, datagram_load_balancing, name, parent, partition, state\n\nManage UDP profiles on a BIG-IP. Many of UDP profiles exist; each with their own adjustments to the standard C(udp) profile. Users of this module should be aware that many of the adjustable knobs have no module default. Instead, the default is assigned by the BIG-IP system itself which, in most cases, is acceptable.',
 'bigip_provision': 'Manage BIG-IP module provisioning\n\nArguments: state, level, module, memory\n\nManage BIG-IP module provisioning. This module will only provision at the standard levels of Dedicated, Nominal, and Minimum.',
 'bigip_qkview': 'Manage qkviews on the device\n\nArguments: max_file_size, force, asm_request_log, dest, filename, exclude_core, complete_information, exclude\n\nManages creating and downloading qkviews from a BIG-IP. Various options can be provided when creating qkviews. The qkview is important when dealing with F5 support. It may be required that you upload this qkview to the supported channels during resolution of an SRs that you may have opened.',
 'bigip_remote_role': 'Manage remote roles on a BIG-IP\n\nArguments: attribute_string, line_order, name, terminal_access, partition_access, state, remote_access, assigned_role\n\nManages remote roles on a BIG-IP. Remote roles are used in situations where user authentication is handled off-box. Local access control to the BIG-IP is controlled by the defined remote role. Where-as authentication (and by extension, assignment to the role) is handled off-box.',
 'bigip_remote_syslog': 'Manipulate remote syslog settings on a BIG-IP\n\nArguments: state, remote_port, remote_host, name, local_ip\n\nManipulate remote syslog settings on a BIG-IP.',
 'bigip_remote_user': 'Manages default settings for remote user accounts on a BIG-IP\n\nArguments: console_access, default_partition, default_role, description\n\nManages default settings for remote user accounts on a BIG-IP.',
 'bigip_routedomain': 'Manage route domains on a BIG-IP\n\nArguments: flow_eviction_policy, service_policy, description, parent, partition, connection_limit, name, strict, state, routing_protocol, bwc_policy, vlans, id, fw_enforced_policy\n\nManage route domains on a BIG-IP.',
 'bigip_selfip': 'Manage Self-IPs on a BIG-IP system\n\nArguments: vlan, description, partition, state, allow_service, netmask, route_domain, address, traffic_group, name\n\nManage Self-IPs on a BIG-IP system.',
 'bigip_service_policy': 'Manages service policies on a BIG-IP.\n\nArguments: state, port_misuse_policy, name, timer_policy, partition, description\n\nService policies allow you to configure timers and port misuse rules, if enabled, on a per rule or per context basis.',
 'bigip_smtp': 'Manages SMTP settings on the BIG-IP\n\nArguments: smtp_server_port, smtp_server_username, update_password, from_address, encryption, partition, smtp_server, authentication, state, local_host_name, smtp_server_password, name\n\nAllows configuring of the BIG-IP to send mail via an SMTP server by configuring the parameters of an SMTP server.',
 'bigip_snat_pool': 'Manage SNAT pools on a BIG-IP\n\nArguments: state, partition, description, members, name\n\nManage SNAT pools on a BIG-IP.',
 'bigip_snat_translation': 'Manage SNAT Translations on a BIG-IP\n\nArguments: arp, description, tcp_idle_timeout, udp_idle_timeout, partition, connection_limit, state, ip_idle_timeout, address, traffic_group, name\n\nManage SNAT Translations on a BIG-IP.',
 'bigip_snmp': 'Manipulate general SNMP settings on a BIG-IP\n\nArguments: contact, location, agent_status_traps, allowed_addresses, agent_authentication_traps, device_warning_traps\n\nManipulate general SNMP settings on a BIG-IP.',
 'bigip_snmp_community': 'Manages SNMP communities on a BIG-IP.\n\nArguments: snmp_privacy_protocol, update_password, oid, community, snmp_auth_protocol, port, snmp_privacy_password, name, source, partition, access, snmp_auth_password, state, version, snmp_username, ip_version\n\nAssists in managing SNMP communities on a BIG-IP. Different SNMP versions are supported by this module. Take note of the different parameters offered by this module, as different parameters work for different versions of SNMP. Typically this becomes an interest if you are mixing versions C(v2c) and C(3).',
 'bigip_snmp_trap': 'Manipulate SNMP trap information on a BIG-IP\n\nArguments: snmp_version, destination, network, partition, community, state, port, name\n\nManipulate SNMP trap information on a BIG-IP.',
 'bigip_software_image': 'Manage software images on a BIG-IP\n\nArguments: state, force, image\n\nManages software images on a BIG-IP. These images may include both base images and hotfix images.',
 'bigip_software_install': 'Install software images on a BIG-IP\n\nArguments: volume, image, state\n\nInstall new images on a BIG-IP.',
 'bigip_software_update': 'Manage the software update settings of a BIG-IP\n\nArguments: auto_phone_home, auto_check, frequency\n\nManage the software update settings of a BIG-IP.',
 'bigip_ssl_certificate': 'Import/Delete certificates from BIG-IP\n\nArguments: content, issuer_cert, state, partition, name\n\nThis module will import/delete SSL certificates on BIG-IP LTM. Certificates can be imported from certificate and key files on the local disk, in PEM format.',
 'bigip_ssl_key': 'Import/Delete SSL keys from BIG-IP\n\nArguments: content, state, partition, name, passphrase\n\nThis module will import/delete SSL keys on a BIG-IP. Keys can be imported from key files on the local disk, in PEM format.',
 'bigip_ssl_ocsp': 'Manage OCSP configurations on BIG-IP\n\nArguments: update_password, passphrase, strict_responder_checking, connections_limit, dns_resolver, key, clock_skew, responder_url, connection_timeout, cache_timeout, name, certificate, partition, cache_error_timeout, status_age, state, trusted_responders, route_domain, hash_algorithm, proxy_server_pool\n\nManage OCSP configurations on BIG-IP.',
 'bigip_static_route': 'Manipulate static routes on a BIG-IP\n\nArguments: partition, gateway_address, name, vlan, route_domain, mtu, state, reject, destination, netmask, pool, description\n\nManipulate static routes on a BIG-IP.',
 'bigip_sys_daemon_log_tmm': 'Manage BIG-IP tmm daemon log settings\n\nArguments: http_compression_log_level, pva_log_level, layer4_log_level, ip_log_level, arp_log_level, http_log_level, state, os_log_level, ssl_log_level, net_log_level, irule_log_level\n\nManage BIG-IP tmm log settings.',
 'bigip_sys_db': 'Manage BIG-IP system database variables\n\nArguments: state, key, value\n\nManage BIG-IP system database variables',
 'bigip_sys_global': 'Manage BIG-IP global settings\n\nArguments: security_banner, net_reboot, banner_text, console_timeout, quiet_boot, mgmt_dhcp, state, gui_setup, lcd_display\n\nManage BIG-IP global settings.',
 'bigip_timer_policy': 'Manage timer policies on a BIG-IP\n\nArguments: rules, state, partition, name, description\n\nManage timer policies on a BIG-IP.',
 'bigip_traffic_selector': 'Manage IPSec Traffic Selectors on BIG-IP\n\nArguments: description, partition, state, destination_address, ipsec_policy, source_address, order, name\n\nManage IPSec Traffic Selectors on BIG-IP.',
 'bigip_trunk': 'Manage trunks on a BIG-IP\n\nArguments: frame_distribution_hash, name, interfaces, lacp_mode, link_selection_policy, lacp_timeout, state, qinq_ethertype, lacp_enabled, description\n\nManages trunks on a BIG-IP.',
 'bigip_tunnel': 'Manage tunnels on a BIG-IP\n\nArguments: profile, description, secondary_address, remote_address, auto_last_hop, key, transparent, name, tos, partition, mtu, state, mode, use_pmtu, local_address, traffic_group\n\nManages tunnels on a BIG-IP. Tunnels are usually based upon a tunnel profile which defines both default arguments and constraints for the tunnel.\nDue to this, this module exposes a number of settings that may or may not be related to the type of tunnel you are working with. It is important that you take this into consideration when declaring your tunnel config.\nIf a specific tunnel does not support the parameter you are considering, the documentation of the parameter will usually make mention of this. Otherwise, when configuring that parameter on the device, the device will notify you.',
 'bigip_ucs': 'Manage upload, installation and removal of UCS files\n\nArguments: force, reset_trust, no_platform_check, state, include_chassis_level_config, passphrase, ucs, no_license\n\nManage upload, installation and removal of UCS files.',
 'bigip_ucs_fetch': "Fetches a UCS file from remote nodes\n\nArguments: create_on_missing, src, force, fail_on_missing, encryption_password, dest, backup\n\nThis module is used for fetching UCS files from remote machines and storing them locally in a file tree, organized by hostname. Note that this module is written to transfer UCS files that might not be present, so a missing remote UCS won't be an error unless fail_on_missing is set to 'yes'.",
 'bigip_user': 'Manage user accounts and user attributes on a BIG-IP\n\nArguments: update_password, shell, password_credential, partition_access, partition, state, full_name, username_credential\n\nManage user accounts and user attributes on a BIG-IP. Typically this module operates only on the REST API users and not the CLI users. When specifying C(root), you may only change the password. Your other parameters will be ignored in this case. Changing the C(root) password is not an idempotent operation. Therefore, it will change it every time this module attempts to change it.',
 'bigip_vcmp_guest': 'Manages vCMP guests on a BIG-IP\n\nArguments: mgmt_address, vlans, name, allowed_slots, delete_virtual_disk, partition, number_of_slots, initial_image, state, min_number_of_slots, mgmt_route, mgmt_network, cores_per_slot, initial_hotfix\n\nManages vCMP guests on a BIG-IP. This functionality only exists on actual hardware and must be enabled by provisioning C(vcmp) with the C(bigip_provision) module.',
 'bigip_virtual_address': 'Manage LTM virtual addresses on a BIG-IP\n\nArguments: arp, icmp_echo, name, auto_delete, partition, connection_limit, state, availability_calculation, route_domain, arp_state, address, traffic_group, netmask, route_advertisement, spanning\n\nManage LTM virtual addresses on a BIG-IP.',
 'bigip_virtual_server': 'Manage LTM virtual servers on a BIG-IP\n\nArguments: rate_limit_src_mask, fallback_persistence_profile, mask, default_persistence_profile, insert_metadata, firewall_enforced_policy, enabled_vlans, mirror, port, description, destination, rate_limit_mode, irules, source, state, pool, security_nat_policy, ip_intelligence_policy, address_translation, snat, metadata, disabled_vlans, ip_protocol, firewall_staged_policy, rate_limit_dst_mask, security_log_profiles, name, type, partition, rate_limit, profiles, clone_pools, policies, source_port, port_translation\n\nManage LTM virtual servers on a BIG-IP.',
 'bigip_vlan': 'Manage VLANs on a BIG-IP system\n\nArguments: fail_safe_timeout, tagged_interfaces, untagged_interfaces, interfaces, sflow_poll_interval, sflow_sampling_rate, tag, source_check, cmp_hash, dag_tunnel, fail_safe, dag_round_robin, name, description, partition, mtu, fail_safe_action, state\n\nManage VLANs on a BIG-IP system',
 'bigip_wait': 'Wait for a BIG-IP condition before continuing\n\nArguments: delay, msg, sleep, timeout\n\nYou can wait for BIG-IP to be "ready". By "ready", we mean that BIG-IP is ready to accept configuration.\nThis module can take into account situations where the device is in the middle of rebooting due to a configuration change.',
 'bigiq_application_fasthttp': 'Manages BIG-IQ FastHTTP applications\n\nArguments: service_environment, name, add_analytics, description, servers, state, inbound_virtual, wait\n\nManages BIG-IQ applications used for load balancing an HTTP-based application, speeding up connections and reducing the number of connections to the back-end server.',
 'bigiq_application_fastl4_tcp': 'Manages BIG-IQ FastL4 TCP applications\n\nArguments: service_environment, name, add_analytics, description, servers, state, inbound_virtual, wait\n\nManages BIG-IQ applications used for load balancing a TCP-based application with a FastL4 profile.',
 'bigiq_application_fastl4_udp': 'Manages BIG-IQ FastL4 UDP applications\n\nArguments: service_environment, name, add_analytics, description, servers, state, inbound_virtual, wait\n\nManages BIG-IQ applications used for load balancing a UDP-based application with a FastL4 profile.',
 'bigiq_application_http': 'Manages BIG-IQ HTTP applications\n\nArguments: service_environment, name, add_analytics, description, servers, state, inbound_virtual, wait\n\nManages BIG-IQ applications used for load balancing an HTTP application on port 80 on BIG-IP.',
 'bigiq_application_https_offload': 'Manages BIG-IQ HTTPS offload applications\n\nArguments: service_environment, name, add_analytics, description, servers, state, redirect_virtual, inbound_virtual, client_ssl_profile, wait\n\nManages BIG-IQ applications used for load balancing an HTTPS application on port 443 with SSL offloading on BIG-IP.',
 'bigiq_application_https_waf': 'Manages BIG-IQ HTTPS WAF applications\n\nArguments: service_environment, name, add_analytics, description, domain_names, servers, state, redirect_virtual, inbound_virtual, client_ssl_profile, wait\n\nManages BIG-IQ applications used for load balancing an HTTPS application on port 443 with a Web Application Firewall (WAF) using an ASM Rapid Deployment policy.',
 'bigiq_device_discovery': 'Manage BIG-IP devices through BIG-IQ\n\nArguments: device_address, force, access_group_first_device, access_group_name, ha_name, device_username, statistics, access_conflict_policy, use_bigiq_sync, modules, device_conflict_policy, versioned_conflict_policy, state, device_port, conflict_policy, device_password\n\nDiscovers and imports BIG-IP device configuration on the BIG-IQ.',
 'bigiq_device_info': 'Collect information from F5 BIG-IQ devices\n\nArguments: gather_subset\n\nCollect information from F5 BIG-IQ devices.\nThis module was called C(bigiq_device_facts) before Ansible 2.9. The usage did not change.',
 'bigiq_regkey_license': 'Manages licenses in a BIG-IQ registration key pool\n\nArguments: license_key, regkey_pool, accept_eula, description, state\n\nManages licenses in a BIG-IQ registration key pool.',
 'bigiq_regkey_license_assignment': 'Manage regkey license assignment on BIG-IPs from a BIG-IQ\n\nArguments: device_username, managed, state, device_port, key, device, device_password, pool\n\nManages the assignment of regkey licenses on a BIG-IQ. Assignment means that the license is assigned to a BIG-IP, or, it needs to be assigned to a BIG-IP. Additionally, this module supported revoking the assignments from BIG-IP devices.',
 'bigiq_regkey_pool': 'Manages registration key pools on BIG-IQ\n\nArguments: state, name, description\n\nManages registration key (regkey) pools on a BIG-IQ. These pools function as a container in-which you will add lists of registration keys. To add registration keys, use the C(bigiq_regkey_license) module.',
 'bigiq_utility_license': 'Manage utility licenses on a BIG-IQ\n\nArguments: license_key, accept_eula, state\n\nManages utility licenses on a BIG-IQ. Utility licenses are one form of licenses that BIG-IQ can distribute. These licenses, unlike regkey licenses, do not require a pool to be created before creation. Additionally, when assigning them, you assign by offering instead of key.',
 'bigiq_utility_license_assignment': 'Manage utility license assignment on BIG-IPs from a BIG-IQ\n\nArguments: device_username, managed, offering, state, device_port, key, device, unit_of_measure, device_password\n\nManages the assignment of utility licenses on a BIG-IQ. Assignment means that the license is assigned to a BIG-IP, or, it needs to be assigned to a BIG-IP. Additionally, this module supported revoking the assignments from BIG-IP devices.',
 'bigmon_chain': 'Create and remove a bigmon inline service chain.\n\nArguments: access_token, state, validate_certs, controller, name\n\nCreate and remove a bigmon inline service chain.',
 'bigmon_policy': 'Create and remove a bigmon out-of-band policy.\n\nArguments: policy_description, name, access_token, start_time, state, priority, action, controller, duration, validate_certs, delivery_packet_count\n\nCreate and remove a bigmon out-of-band policy.',
 'bigpanda': 'Notify BigPanda about deployments\n\nArguments: description, url, component, token, state, version, hosts, env, owner, validate_certs\n\nNotify BigPanda when deployments start and end (successfully or not). Returns a deployment object containing all the parameters for future module calls.',
 'bitbucket_access_key': 'Manages Bitbucket repository access keys\n\nArguments: username, state, client_id, repository, key, client_secret, label\n\nManages Bitbucket repository access keys (also called deploy keys).',
 'bitbucket_pipeline_key_pair': 'Manages Bitbucket pipeline SSH key pair\n\nArguments: username, public_key, private_key, client_id, repository, client_secret, state\n\nManages Bitbucket pipeline SSH key pair.',
 'bitbucket_pipeline_known_host': 'Manages Bitbucket pipeline known hosts\n\nArguments: username, key, state, repository, client_id, client_secret, name\n\nManages Bitbucket pipeline known hosts under the "SSH Keys" menu.\nThe host fingerprint will be retrieved automatically, but in case of an error, one can use I(key) field to specify it manually.',
 'bitbucket_pipeline_variable': 'Manages Bitbucket pipeline variables\n\nArguments: username, name, repository, secured, value, state, client_id, client_secret\n\nManages Bitbucket pipeline variables.',
 'blockinfile': 'Insert/update/remove a text block surrounded by marker lines\n\nArguments: insertbefore, backup, create, marker, state, block, insertafter, path, marker_begin, marker_end\n\nThis module will insert/update/remove a block of multi-line text surrounded by customizable marker lines.',
 'bower': 'Manage bower packages with bower\n\nArguments: state, production, name, version, relative_execpath, path, offline\n\nManage bower packages with bower',
 'bundler': 'Manage Ruby Gem dependencies with Bundler\n\nArguments: executable, chdir, gemfile, clean, user_install, extra_args, state, deployment_mode, binstub_directory, exclude_groups, local, gem_path\n\nManage installation and Gem version dependencies for Ruby using the Bundler gem',
 'bzr': 'Deploy software (or files) from bzr branches\n\nArguments: dest, executable, version, force, name\n\nManage I(bzr) branches to deploy files or software.',
 'campfire': 'Send a message to Campfire\n\nArguments: msg, token, subscription, notify, room\n\nSend a message to Campfire.\nMessages with newlines will result in a "Paste" message being sent.',
 'capabilities': 'Manage Linux capabilities\n\nArguments: capability, path, state\n\nThis module manipulates files privileges using the Linux capabilities(7) system.',
 'catapult': 'Send a sms / mms using the catapult bandwidth api\n\nArguments: src, user_id, api_secret, dest, media, api_token, msg\n\nAllows notifications to be sent using sms / mms via the catapult bandwidth api.',
 'ce_aaa_server': 'Manages AAA server global configuration on HUAWEI CloudEngine switches.\n\nArguments: acct_scheme_name, first_author_mode, authen_scheme_name, author_scheme_name, radius_server_group, domain_name, first_authen_mode, state, local_user_group, hwtacas_template, accounting_mode\n\nManages AAA server global configuration on HUAWEI CloudEngine switches.',
 'ce_aaa_server_host': 'Manages AAA server host configuration on HUAWEI CloudEngine switches.\n\nArguments: radius_server_port, hwtacacs_server_ipv6, local_service_type, radius_server_name, radius_server_mode, hwtacacs_server_type, radius_vpn_name, radius_server_ipv6, radius_server_type, hwtacacs_server_ip, local_user_group, local_user_level, radius_server_ip, local_ftp_dir, hwtacacs_vpn_name, hwtacacs_is_secondary_server, radius_group_name, hwtacacs_template, local_password, state, hwtacacs_server_host_name, local_user_name, hwtacacs_is_public_net\n\nManages AAA server host configuration on HUAWEI CloudEngine switches.',
 'ce_acl': 'Manages base ACL configuration on HUAWEI CloudEngine switches.\n\nArguments: acl_step, acl_name, log_flag, source_ip, state, src_mask, rule_action, rule_name, acl_num, vrf_name, acl_description, rule_id, time_range, rule_description, frag_type\n\nManages base ACL configurations on HUAWEI CloudEngine switches.',
 'ce_acl_advance': 'Manages advanced ACL configuration on HUAWEI CloudEngine switches.\n\nArguments: acl_step, protocol, precedence, src_port_op, log_flag, time_range, src_port_begin, frag_type, dest_port_op, dest_pool_name, acl_description, ttl_expired, icmp_type, src_mask, icmp_name, established, igmp_type, tos, acl_num, rule_action, state, tcp_flag_mask, src_port_end, dest_ip, icmp_code, dest_port_end, acl_name, dscp, rule_name, rule_description, dest_mask, src_port_pool_name, source_ip, syn_flag, vrf_name, src_pool_name, dest_port_begin, dest_port_pool_name, rule_id\n\nManages advanced ACL configurations on HUAWEI CloudEngine switches.',
 'ce_acl_interface': 'Manages applying ACLs to interfaces on HUAWEI CloudEngine switches.\n\nArguments: interface, direction, state, acl_name\n\nManages applying ACLs to interfaces on HUAWEI CloudEngine switches.',
 'ce_bfd_global': 'Manages BFD global configuration on HUAWEI CloudEngine devices.\n\nArguments: tos_exp_dynamic, default_ip, damp_init_wait_time, bfd_enable, delay_up_time, state, damp_max_wait_time, damp_second_wait_time, tos_exp_static\n\nManages BFD global configuration on HUAWEI CloudEngine devices.',
 'ce_bfd_session': 'Manages BFD session configuration on HUAWEI CloudEngine devices.\n\nArguments: local_discr, src_addr, out_if_name, state, dest_addr, vrf_name, create_type, remote_discr, session_name, use_default_ip, addr_type\n\nManages BFD session configuration, creates a BFD session or deletes a specified BFD session on HUAWEI CloudEngine devices.',
 'ce_bfd_view': 'Manages BFD session view configuration on HUAWEI CloudEngine devices.\n\nArguments: local_discr, detect_multi, remote_discr, description, admin_down, tos_exp, min_tx_interval, min_rx_interval, state, session_name, wtr_interval\n\nManages BFD session view configuration on HUAWEI CloudEngine devices.',
 'ce_bgp': 'Manages BGP configuration on HUAWEI CloudEngine switches.\n\nArguments: router_id, memory_limit, vrf_rid_auto_sel, suppress_interval, as_number, confed_id_number, bgp_rid_auto_sel, default_af_type, conn_retry_time, is_shutdown, keepalive_time, confed_peer_as_num, min_hold_time, ebgp_if_sensitive, check_first_as, clear_interval, confed_nonstanded, time_wait_for_rib, hold_time, as_path_limit, hold_interval, state, vrf_name, keep_all_routes, gr_peer_reset, graceful_restart\n\nManages BGP configurations on HUAWEI CloudEngine switches.',
 'ce_bgp_af': 'Manages BGP Address-family configuration on HUAWEI CloudEngine switches.\n\nArguments: reflector_cluster_id, ingress_lsp_policy_name, vrf_rid_auto_sel, preference_internal, maximum_load_balance, preference_local, preference_external, router_id_neglect, default_local_pref, reflector_cluster_ipv4, prefrence_policy_name, default_rt_import_enable, nhp_relay_route_policy_name, igp_metric_ignore, as_path_neglect, auto_frr_enable, mask_len, ibgp_ecmp_nexthop_changed, af_type, nexthop_third_party, state, default_med, add_path_sel_num, med_none_as_maximum, ebgp_ecmp_nexthop_changed, ecmp_nexthop_changed, lowest_priority, rr_filter_number, import_process_id, router_id, determin_med, load_balancing_as_path_ignore, reflect_chg_path, always_compare_med, allow_invalid_as, relay_delay_enable, rib_only_policy_name, max_load_ebgp_num, import_protocol, ebgp_if_sensitive, network_address, supernet_uni_adv, next_hop_sel_depend_type, originator_prior, active_route_advertise, reflect_between_client, policy_vpn_target, summary_automatic, rib_only_enable, max_load_ibgp_num, route_sel_delay, supernet_label_adv, vrf_name, policy_ext_comm_enable\n\nManages BGP Address-family configurations on HUAWEI CloudEngine switches.',
 'ce_bgp_neighbor': 'Manages BGP peer configuration on HUAWEI CloudEngine switches.\n\nArguments: prepend_global_as, ebgp_max_hop, is_ignore, prepend_fake_as, fake_as, is_single_hop, conventional, remote_as, hold_time, tx_interval, pswd_cipher_text, local_if_name, rx_interval, state, vrf_name, dual_as, connect_mode, description, is_log_change, keep_alive_time, key_chain_name, conn_retry_time, min_hold_time, multiplier, valid_ttl_hops, is_bfd_block, tcp_MSS, is_bfd_enable, route_refresh, peer_addr, pswd_type, mpls_local_ifnet_disable\n\nManages BGP peer configurations on HUAWEI CloudEngine switches.',
 'ce_bgp_neighbor_af': 'Manages BGP neighbor Address-family configuration on HUAWEI CloudEngine switches.\n\nArguments: import_pref_filt_name, advertise_irb, substitute_as_enable, advertise_ext_community, default_rt_match_mode, redirect_ip, route_limit, import_as_path_filter, public_as_only_force, vpls_enable, allow_as_loop_enable, advertise_arp, import_as_path_name_or_num, af_type, orf_mode, nexthop_configure, discard_ext_community, is_nonstd_ipprefix_mod, keep_all_routes, orftype, advertise_community, export_as_path_name_or_num, adv_add_path_num, ipprefix_orf_enable, route_limit_type, remote_address, public_as_only_skip_peer_as, origin_as_valid, route_limit_idle_timeout, reflect_client, import_rt_policy_name, route_limit_percent, export_rt_policy_name, public_as_only, redirect_ip_vaildation, import_acl_name_or_num, allow_as_loop_limit, add_path_mode, export_as_path_filter, vpls_ad_disable, public_as_only_replace, public_as_only_limited, preferred_value, export_acl_name_or_num, soostring, update_pkt_standard_compatible, advertise_remote_nexthop, vrf_name, default_rt_adv_policy, export_pref_filt_name, default_rt_adv_enable, rt_updt_interval\n\nManages BGP neighbor Address-family configurations on HUAWEI CloudEngine switches.',
 'ce_command': 'Run arbitrary command on HUAWEI CloudEngine devices.\n\nArguments: retries, commands, wait_for, match, interval\n\nSends an arbitrary command to an HUAWEI CloudEngine node and returns the results read from the device.  The ce_command module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'ce_config': 'Manage Huawei CloudEngine configuration sections.\n\nArguments: src, backup_options, backup, after, lines, replace, parents, defaults, save, config, match, before\n\nHuawei CloudEngine configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with CloudEngine configuration sections in a deterministic way.  This module works with CLI transports.',
 'ce_dldp': 'Manages global DLDP configuration on HUAWEI CloudEngine switches.\n\nArguments: reset, enable, work_mode, auth_pwd, time_internal, auth_mode\n\nManages global DLDP configuration on HUAWEI CloudEngine switches.',
 'ce_dldp_interface': 'Manages interface DLDP configuration on HUAWEI CloudEngine switches.\n\nArguments: reset, state, enable, interface, mode_enable, local_mac\n\nManages interface DLDP configuration on HUAWEI CloudEngine switches.',
 'ce_eth_trunk': 'Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches.\n\nArguments: state, force, mode, members, min_links, trunk_id, hash_type\n\nManages Eth-Trunk specific configuration parameters on HUAWEI CloudEngine switches.',
 'ce_evpn_bd_vni': 'Manages EVPN VXLAN Network Identifier (VNI) on HUAWEI CloudEngine switches.\n\nArguments: vpn_target_export, state, route_distinguisher, vpn_target_both, evpn, vpn_target_import, bridge_domain_id\n\nManages Ethernet Virtual Private Network (EVPN) VXLAN Network Identifier (VNI) configurations on HUAWEI CloudEngine switches.',
 'ce_evpn_bgp': 'Manages BGP EVPN configuration on HUAWEI CloudEngine switches.\n\nArguments: as_number, advertise_l2vpn_evpn, advertise_router_type, vpn_name, peer_group_name, state, bgp_instance, peer_enable, peer_address\n\nThis module offers the ability to configure a BGP EVPN peer relationship on HUAWEI CloudEngine switches.',
 'ce_evpn_bgp_rr': 'Manages RR for the VXLAN Network on HUAWEI CloudEngine switches.\n\nArguments: as_number, bgp_instance, reflect_client, peer, bgp_evpn_enable, policy_vpn_target, peer_type\n\nConfigure an RR in BGP-EVPN address family view on HUAWEI CloudEngine switches.',
 'ce_evpn_global': 'Manages global configuration of EVPN on HUAWEI CloudEngine switches.\n\nArguments: evpn_overlay_enable\n\nManages global configuration of EVPN on HUAWEI CloudEngine switches.',
 'ce_facts': 'Gets facts about HUAWEI CloudEngine switches.\n\nArguments: gather_subset\n\nCollects facts from CloudEngine devices running the CloudEngine operating system.  Fact collection is supported over Cli transport.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'ce_file_copy': 'Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches.\n\nArguments: local_file, remote_file, file_system\n\nCopy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches.',
 'ce_info_center_debug': 'Manages information center debug configuration on HUAWEI CloudEngine switches.\n\nArguments: debug_enable, state, debug_level, channel_id, module_name, debug_time_stamp\n\nManages information center debug configurations on HUAWEI CloudEngine switches.',
 'ce_info_center_global': 'Manages outputting logs on HUAWEI CloudEngine switches.\n\nArguments: server_ip, filter_log_name, facility, ssl_policy_name, transport_mode, channel_cfg_name, suppress_enable, channel_out_direct, channel_id, filter_feature_name, is_default_vpn, server_domain, level, packet_priority, source_ip, channel_name, state, vrf_name, logfile_max_size, server_port, timestamp, info_center_enable, ip_type, logfile_max_num\n\nThis module offers the ability to be output to the log buffer, log file, console, terminal, or log host on HUAWEI CloudEngine switches.',
 'ce_info_center_log': 'Manages information center log configuration on HUAWEI CloudEngine switches.\n\nArguments: log_level, log_enable, log_buff_size, channel_id, state, log_buff_enable, log_time_stamp, module_name\n\nSetting the Timestamp Format of Logs. Configuring the Device to Output Logs to the Log Buffer.',
 'ce_info_center_trap': 'Manages information center trap configuration on HUAWEI CloudEngine switches.\n\nArguments: trap_time_stamp, trap_buff_size, channel_id, state, trap_level, trap_buff_enable, module_name, trap_enable\n\nManages information center trap configurations on HUAWEI CloudEngine switches.',
 'ce_interface': 'Manages physical attributes of interfaces on HUAWEI CloudEngine switches.\n\nArguments: state, admin_state, description, interface, interface_type, mode, l2sub\n\nManages physical attributes of interfaces on HUAWEI CloudEngine switches.',
 'ce_interface_ospf': 'Manages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches.\n\nArguments: cost, area, silent_interface, auth_mode, auth_key_id, dead_interval, auth_text_simple, state, process_id, hello_interval, auth_text_md5, interface\n\nManages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches.',
 'ce_ip_interface': 'Manages L3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches.\n\nArguments: state, version, addr, interface, mask, ipv4_type\n\nManages Layer 3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches.',
 'ce_link_status': 'Get interface link status on HUAWEI CloudEngine switches.\n\nArguments: interface\n\nGet interface link status on HUAWEI CloudEngine switches.',
 'ce_mlag_config': 'Manages MLAG configuration on HUAWEI CloudEngine switches.\n\nArguments: eth_trunk_id, pseudo_priority, ip_address, priority_id, vpn_instance_name, peer_link_id, state, dfs_group_id, nickname, pseudo_nickname\n\nManages MLAG configuration on HUAWEI CloudEngine switches.',
 'ce_mlag_interface': 'Manages MLAG interfaces on HUAWEI CloudEngine switches.\n\nArguments: eth_trunk_id, mlag_id, mlag_error_down, mlag_system_id, state, dfs_group_id, interface, mlag_priority_id\n\nManages MLAG interface attributes on HUAWEI CloudEngine switches.',
 'ce_mtu': 'Manages MTU settings on HUAWEI CloudEngine switches.\n\nArguments: interface, state, jumbo_max, jumbo_min, mtu\n\nManages MTU settings on HUAWEI CloudEngine switches.',
 'ce_netconf': 'Run an arbitrary netconf command on HUAWEI CloudEngine switches.\n\nArguments: rpc, cfg_xml\n\nSends an arbitrary netconf command on HUAWEI CloudEngine switches.',
 'ce_netstream_aging': 'Manages timeout mode of NetStream on HUAWEI CloudEngine switches.\n\nArguments: timeout_type, state, type, manual_slot, timeout_interval\n\nManages timeout mode of NetStream on HUAWEI CloudEngine switches.',
 'ce_netstream_export': 'Manages netstream export on HUAWEI CloudEngine switches.\n\nArguments: bgp_nexthop, host_port, source_ip, host_ip, as_option, state, version, type, host_vpn\n\nConfigure NetStream flow statistics exporting and versions for exported packets on HUAWEI CloudEngine switches.',
 'ce_netstream_global': 'Manages global parameters of NetStream on HUAWEI CloudEngine switches.\n\nArguments: statistics_direction, index_switch, state, sampler_interval, statistics_record, sampler_direction, interface, type\n\nManages global parameters of NetStream on HUAWEI CloudEngine switches.',
 'ce_netstream_template': 'Manages NetStream template configuration on HUAWEI CloudEngine switches.\n\nArguments: state, collect_interface, record_name, description, type, collect_counter, match\n\nManages NetStream template configuration on HUAWEI CloudEngine switches.',
 'ce_ntp': 'Manages core NTP configuration on HUAWEI CloudEngine switches.\n\nArguments: state, is_preferred, peer, key_id, vpn_name, server, source_int\n\nManages core NTP configuration on HUAWEI CloudEngine switches.',
 'ce_ntp_auth': 'Manages NTP authentication configuration on HUAWEI CloudEngine switches.\n\nArguments: auth_type, state, auth_pwd, key_id, trusted_key, auth_mode, authentication\n\nManages NTP authentication configuration on HUAWEI CloudEngine switches.',
 'ce_ospf': 'Manages configuration of an OSPF instance on HUAWEI CloudEngine switches.\n\nArguments: addr, area, max_load_balance, mask, auth_mode, auth_key_id, auth_text_simple, state, process_id, nexthop_addr, auth_text_md5, nexthop_weight\n\nManages configuration of an OSPF instance on HUAWEI CloudEngine switches.',
 'ce_ospf_vrf': 'Manages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches.\n\nArguments: description, lsaostartinterval, lsaastartinterval, lsaointerval, bandwidth, spfintervalmi, spfinterval, lsaointervalflag, lsaomaxinterval, lsaalflag, lsaamaxinterval, lsaoholdinterval, spfintervaltype, lsaainterval, spfstartinterval, route_id, state, spfmaxinterval, spfholdinterval, lsaaholdinterval, ospf, vrf\n\nManages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches.',
 'ce_reboot': 'Reboot a HUAWEI CloudEngine switches.\n\nArguments: save_config, confirm\n\nReboot a HUAWEI CloudEngine switches.',
 'ce_rollback': 'Set a checkpoint or rollback to a checkpoint on HUAWEI CloudEngine switches.\n\nArguments: commit_id, oldest, last, action, filename, label\n\nThis module offers the ability to set a configuration checkpoint file or rollback to a configuration checkpoint file on HUAWEI CloudEngine switches.',
 'ce_sflow': 'Manages sFlow configuration on HUAWEI CloudEngine switches.\n\nArguments: agent_ip, export_route, counter_collector, rate_limit_slot, source_ip, collector_datagram_size, sample_collector, rate_limit, sample_direction, collector_meth, collector_ip_vpn, forward_enp_slot, collector_ip, sflow_interface, sample_length, state, collector_id, sample_rate, collector_udp_port, counter_interval, collector_description\n\nConfigure Sampled Flow (sFlow) to monitor traffic on an interface in real time, detect abnormal traffic, and locate the source of attack traffic, ensuring stable running of the network.',
 'ce_snmp_community': 'Manages SNMP community configuration on HUAWEI CloudEngine switches.\n\nArguments: notify_view, community_name, community_mib_view, read_view, acl_number, group_name, write_view, state, security_level, access_right\n\nManages SNMP community configuration on HUAWEI CloudEngine switches.',
 'ce_snmp_contact': 'Manages SNMP contact configuration on HUAWEI CloudEngine switches.\n\nArguments: state, contact\n\nManages SNMP contact configurations on HUAWEI CloudEngine switches.',
 'ce_snmp_location': 'Manages SNMP location configuration on HUAWEI CloudEngine switches.\n\nArguments: state, location\n\nManages SNMP location configurations on HUAWEI CloudEngine switches.',
 'ce_snmp_target_host': 'Manages SNMP target host configuration on HUAWEI CloudEngine switches.\n\nArguments: security_name_v3, recv_port, security_model, vpn_name, address, security_name, notify_type, connect_port, version, host_name, security_level, interface_name, is_public_net\n\nManages SNMP target host configurations on HUAWEI CloudEngine switches.',
 'ce_snmp_traps': 'Manages SNMP traps configuration on HUAWEI CloudEngine switches.\n\nArguments: feature_name, interface_type, trap_name, port_number, interface_number\n\nManages SNMP traps configurations on HUAWEI CloudEngine switches.',
 'ce_snmp_user': 'Manages SNMP user configuration on HUAWEI CloudEngine switches.\n\nArguments: priv_key, aaa_local_user, auth_key, usm_user_name, acl_number, auth_protocol, remote_engine_id, priv_protocol, user_group\n\nManages SNMP user configurations on CloudEngine switches.',
 'ce_startup': 'Manages a system startup information on HUAWEI CloudEngine switches.\n\nArguments: slot, action, cfg_file, patch_file, software_file\n\nManages a system startup information on HUAWEI CloudEngine switches.',
 'ce_static_route': 'Manages static route configuration on HUAWEI CloudEngine switches.\n\nArguments: prefix, aftype, description, pref, mask, destvrf, nhp_interface, state, next_hop, vrf, tag\n\nManages the static routes on HUAWEI CloudEngine switches.',
 'ce_stp': 'Manages STP configuration on HUAWEI CloudEngine switches.\n\nArguments: loop_protection, tc_protection_threshold, bpdu_filter, stp_converge, stp_mode, bpdu_protection, root_protection, state, cost, stp_enable, interface, tc_protection, edged_port, tc_protection_interval\n\nManages STP configurations on HUAWEI CloudEngine switches.',
 'ce_switchport': 'Manages Layer 2 switchport interfaces on HUAWEI CloudEngine switches.\n\nArguments: pvid_vlan, tagged_vlans, default_vlan, trunk_vlans, state, untagged_vlans, mode, interface\n\nManages Layer 2 switchport interfaces on HUAWEI CloudEngine switches.',
 'ce_vlan': 'Manages VLAN resources and attributes on Huawei CloudEngine switches.\n\nArguments: state, vlan_range, name, vlan_id, description\n\nManages VLAN configurations on Huawei CloudEngine switches.',
 'ce_vrf': 'Manages VPN instance on HUAWEI CloudEngine switches.\n\nArguments: state, vrf, description\n\nManages VPN instance of HUAWEI CloudEngine switches.',
 'ce_vrf_af': 'Manages VPN instance address family on HUAWEI CloudEngine switches.\n\nArguments: vpn_target_type, vpn_target_state, vrf_aftype, state, route_distinguisher, vrf, evpn, vpn_target_value\n\nManages VPN instance address family of HUAWEI CloudEngine switches.',
 'ce_vrf_interface': 'Manages interface specific VPN configuration on HUAWEI CloudEngine switches.\n\nArguments: state, vrf, vpn_interface\n\nManages interface specific VPN configuration of HUAWEI CloudEngine switches.',
 'ce_vrrp': 'Manages VRRP interfaces on HUAWEI CloudEngine devices.\n\nArguments: vrrp_type, auth_mode, is_plain, interface, preempt_timer_delay, gratuitous_arp_interval, auth_key, vrid, priority, recover_delay, state, version, virtual_ip, admin_interface, admin_ignore_if_down, fast_resume, admin_flowdown, holding_multiplier, admin_vrid, advertise_interval\n\nManages VRRP interface attributes on HUAWEI CloudEngine devices.',
 'ce_vxlan_arp': 'Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices.\n\nArguments: evn_bgp, vbdif_name, bridge_domain_id, state, evn_server, evn_peer_ip, evn_source_ip, arp_collect_host, arp_suppress, evn_reflect_client, host_collect_protocol\n\nManages ARP attributes of VXLAN on HUAWEI CloudEngine devices.',
 'ce_vxlan_gateway': 'Manages gateway for the VXLAN network on HUAWEI CloudEngine devices.\n\nArguments: dfs_source_vpn, dfs_id, arp_direct_route, dfs_peer_vpn, vbdif_name, vpn_vni, vbdif_mac, vbdif_bind_vpn, dfs_source_ip, dfs_udp_port, arp_distribute_gateway, state, dfs_all_active, vpn_instance, dfs_peer_ip\n\nConfiguring Centralized All-Active Gateways or Distributed Gateway for the VXLAN Network on HUAWEI CloudEngine devices.',
 'ce_vxlan_global': 'Manages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices.\n\nArguments: nvo3_prevent_loops, nvo3_eth_trunk_hash, tunnel_mode_vxlan, nvo3_acl_extend, bridge_domain_id, nvo3_gw_enhanced, state, nvo3_ecmp_hash, nvo3_service_extend\n\nManages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices.',
 'ce_vxlan_tunnel': 'Manages VXLAN tunnel configuration on HUAWEI CloudEngine devices.\n\nArguments: vni_id, nve_mode, source_ip, bridge_domain_id, peer_list_ip, state, nve_name, protocol_type\n\nThis module offers the ability to set the VNI and mapped to the BD, and configure an ingress replication list on HUAWEI CloudEngine devices.',
 'ce_vxlan_vap': 'Manages VXLAN virtual access point on HUAWEI CloudEngine Devices.\n\nArguments: state, pe_vid, l2_sub_interface, ce_vid, encapsulation, bind_vlan_id, bridge_domain_id\n\nManages VXLAN Virtual access point on HUAWEI CloudEngine Devices.',
 'certificate_complete_chain': 'Complete certificate chain given a set of untrusted and root certificates\n\nArguments: root_certificates, intermediate_certificates, input_chain\n\nThis module completes a given chain of certificates in PEM format by finding intermediate certificates from a given set of certificates, until it finds a root certificate in another given set of certificates.\nThis can for example be used to find the root certificate for a certificate chain returned by M(acme_certificate).\nNote that this module does I(not) check for validity of the chains. It only checks that issuer and subject match, and that the signature is correct. It ignores validity dates and key usage completely. If you need to verify that a generated chain is valid, please use C(openssl verify ...).',
 'checkpoint_access_layer_facts': 'Get access layer facts on Check Point over Web Services API\n\nArguments: uid, name\n\nGet access layer facts on Check Point devices. All operations are performed over Web Services API.',
 'checkpoint_access_rule': 'Manages access rules on Check Point over Web Services API\n\nArguments: layer, name, source, destination, enabled, auto_install_policy, state, auto_publish_session, position, action, policy_package, targets\n\nManages access rules on Check Point devices including creating, updating, removing access rules objects, All operations are performed over Web Services API.',
 'checkpoint_access_rule_facts': 'Get access rules objects facts on Check Point over Web Services API\n\nArguments: layer, name, uid\n\nGet access rules objects facts on Check Point devices. All operations are performed over Web Services API.',
 'checkpoint_host': 'Manages host objects on Check Point over Web Services API\n\nArguments: auto_install_policy, state, auto_publish_session, name, policy_package, ip_address, targets\n\nManages host objects on Check Point devices including creating, updating, removing access rules objects. All operations are performed over Web Services API.',
 'checkpoint_host_facts': 'Get host objects facts on Check Point over Web Services API\n\nArguments: name, uid\n\nGet host objects facts on Check Point devices. All operations are performed over Web Services API.',
 'checkpoint_object_facts': 'Get object facts on Check Point over Web Services API\n\nArguments: object_type, ip_only, object_filter, uid\n\nGet object facts on Check Point devices. All operations are performed over Web Services API.',
 'checkpoint_run_script': 'Run scripts on Check Point devices over Web Services API\n\nArguments: targets, script_name, script\n\nRun scripts on Check Point devices. All operations are performed over Web Services API.',
 'checkpoint_session': 'Manages session objects on Check Point over Web Services API\n\nArguments: state, uid\n\nManages session objects on Check Point devices performing actions like publish and discard. All operations are performed over Web Services API.',
 'checkpoint_task_facts': 'Get task objects facts on Check Point over Web Services API\n\nArguments: task_id\n\nGet task objects facts on Check Point devices. All operations are performed over Web Services API.',
 'circonus_annotation': 'create an annotation in circonus\n\nArguments: category, start, description, title, duration, api_key, stop\n\nCreate an annotation event with a given category, title and description. Optionally start, end or durations can be provided',
 'cisco_spark': 'Send a message to a Cisco Spark Room or Individual.\n\nArguments: personal_token, message, recipient_id, message_type, recipient_type\n\nSend a message to a Cisco Spark Room or Individual with options to control the formatting.',
 'clc_aa_policy': 'Create or Delete Anti Affinity Policies at CenturyLink Cloud.\n\nArguments: state, location, name, wait\n\nAn Ansible module to Create or Delete Anti Affinity Policies at CenturyLink Cloud.',
 'clc_alert_policy': 'Create or Delete Alert Policies at CenturyLink Cloud.\n\nArguments: name, metric, alert_recipients, alias, state, threshold, id, duration\n\nAn Ansible module to Create or Delete Alert Policies at CenturyLink Cloud.',
 'clc_blueprint_package': 'deploys a blue print package on a set of servers in CenturyLink Cloud.\n\nArguments: server_ids, package_id, package_params, state, wait\n\nAn Ansible module to deploy blue print package on a set of servers in CenturyLink Cloud.',
 'clc_firewall_policy': 'Create/delete/update firewall policies\n\nArguments: destination_account_alias, destination, enabled, location, source, state, firewall_policy_id, source_account_alias, ports, wait\n\nCreate or delete or update firewall policies on Centurylink Cloud',
 'clc_group': 'Create/delete Server Groups at Centurylink Cloud\n\nArguments: state, name, parent, wait, location, description\n\nCreate or delete Server Groups at Centurylink Centurylink Cloud',
 'clc_loadbalancer': 'Create, Delete shared loadbalancers in CenturyLink Cloud.\n\nArguments: status, name, method, alias, state, location, nodes, port, persistence, description\n\nAn Ansible module to Create, Delete shared loadbalancers in CenturyLink Cloud.',
 'clc_modify_server': 'modify servers in CenturyLink Cloud.\n\nArguments: alert_policy_id, anti_affinity_policy_name, state, anti_affinity_policy_id, alert_policy_name, memory, server_ids, cpu, wait\n\nAn Ansible module to modify servers in CenturyLink Cloud.',
 'clc_publicip': 'Add and Delete public ips on servers in CenturyLink Cloud.\n\nArguments: server_ids, state, protocol, ports, wait\n\nAn Ansible module to add or delete public ip addresses on an existing server or servers in CenturyLink Cloud.',
 'clc_server': 'Create, Delete, Start and Stop servers in CenturyLink Cloud.\n\nArguments: cpu_autoscale_policy_id, anti_affinity_policy_name, storage_type, anti_affinity_policy_id, ttl, count_group, secondary_dns, custom_fields, packages, group, exact_count, state, location, template, memory, server_ids, type, managed_os, additional_disks, description, add_public_ip, alert_policy_id, alert_policy_name, password, ip_address, public_ip_protocol, wait, count, name, network_id, primary_dns, alias, public_ip_ports, source_server_password, os_type, configuration_id, cpu\n\nAn Ansible module to Create, Delete, Start and Stop servers in CenturyLink Cloud.',
 'clc_server_snapshot': 'Create, Delete and Restore server snapshots in CenturyLink Cloud.\n\nArguments: server_ids, expiration_days, state, wait\n\nAn Ansible module to Create, Delete and Restore server snapshots in CenturyLink Cloud.',
 'cli_command': 'Run a cli command on cli-based network devices\n\nArguments: sendonly, prompt, check_all, answer, command, newline\n\nSends a command to a network device and returns the result read from the device.',
 'cli_config': 'Push text based configuration to network devices over network_cli\n\nArguments: multiline_delimiter, backup_options, rollback, commit_comment, diff_replace, replace, defaults, commit, diff_match, config, backup, diff_ignore_lines\n\nThis module provides platform agnostic way of pushing text based configuration to network devices over network_cli connection plugin.',
 'cloud_init_data_facts': 'Retrieve facts of cloud-init.\n\nArguments: filter\n\nGathers facts by reading the status.json and result.json of cloud-init.',
 'cloudflare_dns': 'Manage Cloudflare DNS records\n\nArguments: solo, account_email, weight, proxied, hash_type, selector, ttl, port, account_api_token, service, algorithm, proto, value, priority, record, state, timeout, key_tag, cert_usage, zone, type\n\nManages dns records via the Cloudflare API, see the docs: U(https://api.cloudflare.com/)',
 'cloudformation': 'Create or delete an AWS CloudFormation stack\n\nArguments: template_body, disable_rollback, notification_arns, backoff_max_delay, template_format, stack_name, termination_protection, template_url, template_parameters, role_arn, backoff_retries, stack_policy, tags, capabilities, events_limit, state, template, on_create_failure, create_timeout, changeset_name, create_changeset, backoff_delay\n\nLaunches or updates an AWS CloudFormation stack and waits for it complete.',
 'cloudformation_info': 'Obtain information about an AWS CloudFormation stack\n\nArguments: stack_events, all_facts, stack_resources, stack_template, stack_name, stack_policy\n\nGets information about an AWS CloudFormation stack\nThis module was called C(cloudformation_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(cloudformation_info) module no longer returns C(ansible_facts)!',
 'cloudformation_stack_set': 'Manage groups of CloudFormation stacks\n\nArguments: template_body, description, tags, wait_timeout, template_url, administration_role_arn, wait, failure_tolerance, name, parameters, state, capabilities, regions, execution_role_name, template, purge_stacks, accounts\n\nLaunches/updates/deletes AWS CloudFormation Stack Sets',
 'cloudfront_distribution': 'create, update and delete aws cloudfront distributions.\n\nArguments: comment, purge_custom_error_responses, e_tag, tags, purge_tags, caller_reference, default_root_object, alias, wait_timeout, purge_aliases, default_origin_domain_name, ipv6_enabled, purge_cache_behaviors, aliases, restrictions, logging, http_version, origins, web_acl_id, viewer_certificate, price_class, purge_origins, default_cache_behavior, distribution_id, state, cache_behaviors, custom_error_responses, default_origin_path, wait, enabled\n\nAllows for easy creation, updating and deletion of CloudFront distributions.',
 'cloudfront_info': 'Obtain facts about an AWS CloudFront distribution\n\nArguments: list_streaming_distributions, origin_access_identity_config, invalidation, domain_name_alias, list_invalidations, origin_access_identity_id, list_distributions_by_web_acl_id, origin_access_identity, streaming_distribution_config, all_lists, list_distributions, summary, web_acl_id, streaming_distribution, distribution_id, distribution_config, invalidation_id, distribution, list_origin_access_identities\n\nGets information about an AWS CloudFront distribution\nThis module was called C(cloudfront_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(cloudfront_info) module no longer returns C(ansible_facts)!',
 'cloudfront_invalidation': 'create invalidations for aws cloudfront distributions\n\nArguments: distribution_id, alias, target_paths, caller_reference\n\nAllows for invalidation of a batch of paths for a CloudFront distribution.',
 'cloudfront_origin_access_identity': 'create, update and delete origin access identities for a cloudfront distribution.\n\nArguments: comment, state, origin_access_identity_id, caller_reference\n\nAllows for easy creation, updating and deletion of origin access identities.',
 'cloudscale_floating_ip': 'Manages floating IPs on the cloudscale.ch IaaS service\n\nArguments: state, reverse_ptr, prefix_length, ip_version, ip, server\n\nCreate, assign and delete floating IPs on the cloudscale.ch IaaS service.',
 'cloudscale_server': 'Manages servers on the cloudscale.ch IaaS service\n\nArguments: server_groups, force, use_public_network, tags, image, api_timeout, user_data, anti_affinity_with, use_private_network, flavor, password, ssh_keys, uuid, name, state, volume_size_gb, bulk_volume_size_gb, use_ipv6\n\nCreate, update, start, stop and delete servers on the cloudscale.ch IaaS service.',
 'cloudscale_server_group': 'Manages server groups on the cloudscale.ch IaaS service\n\nArguments: uuid, state, type, name, tags\n\nCreate, update and remove server groups.',
 'cloudscale_volume': 'Manages volumes on the cloudscale.ch IaaS service.\n\nArguments: size_gb, name, tags, server_uuids, type, state, uuid\n\nCreate, attach/detach, update and delete volumes on the cloudscale.ch IaaS service.',
 'cloudtrail': 'manage CloudTrail create, delete, update\n\nArguments: enable_log_file_validation, include_global_events, name, is_multi_region_trail, kms_key_id, cloudwatch_logs_log_group_arn, s3_bucket_name, cloudwatch_logs_role_arn, state, sns_topic_name, s3_key_prefix, enable_logging, tags\n\nCreates, deletes, or updates CloudTrail configuration. Ensures logging is also enabled.',
 'cloudwatchevent_rule': 'Manage CloudWatch Event rules and targets\n\nArguments: state, role_arn, description, name, targets, event_pattern, schedule_expression\n\nThis module creates and manages CloudWatch event rules and targets.',
 'cloudwatchlogs_log_group': 'create or delete log_group in CloudWatchLogs\n\nArguments: state, log_group_name, tags, kms_key_id, overwrite, retention\n\nCreate or delete log_group in CloudWatchLogs.',
 'cloudwatchlogs_log_group_info': 'get information about log_group in CloudWatchLogs\n\nArguments: log_group_name\n\nLists the specified log groups. You can list all your log groups or filter the results by prefix.\nThis module was called C(cloudwatchlogs_log_group_facts) before Ansible 2.9. The usage did not change.',
 'cnos_backup': "Backup the current running or startup configuration to a remote server on devices running Lenovo CNOS\n\nArguments: serverpassword, configType, protocol, serverusername, rcserverip, rcpath\n\nThis module allows you to work with switch configurations. It provides a way to back up the running or startup configurations of a switch to a remote server. This is achieved by periodically saving a copy of the startup or running configuration of the network device to a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of the location where the configuration will be backed up. Authentication details required by the remote server must be provided as well. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_banner': 'Manage multiline banners on Lenovo CNOS devices\n\nArguments: text, state, banner, provider\n\nThis will configure both login and motd banners on remote devices running Lenovo CNOS.  It allows playbooks to add or remote banner text from the active running configuration.',
 'cnos_bgp': "Manage BGP resources and attributes on devices running CNOS\n\nArguments: bgpArg8, asNum, bgpArg4, bgpArg5, bgpArg6, bgpArg7, bgpArg1, bgpArg2, bgpArg3\n\nThis module allows you to work with Border Gateway Protocol (BGP) related configurations. The operators used are overloaded to ensure control over switch BGP configurations. This module is invoked using method with asNumber as one of its arguments. The first level of the BGP configuration allows to set up an AS number, with the following attributes going into various configuration operations under the context of BGP. After passing this level, there are eight BGP arguments that will perform further configurations. They are bgpArg1, bgpArg2, bgpArg3, bgpArg4, bgpArg5, bgpArg6, bgpArg7, and bgpArg8. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_command': 'Run arbitrary commands on Lenovo CNOS devices\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an CNOS node and returns the results read from the device. The C(cnos_command) module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'cnos_conditional_command': 'Execute a single command based on condition on devices running Lenovo CNOS\n\nArguments: flag, clicommand, condition\n\nThis module allows you to modify the running configuration of a switch. It provides a way to execute a single CNOS command on a network device by evaluating the current running configuration and executing the command only if the specific settings have not been already configured. The CNOS command is passed as an argument of the method. This module functions the same as the cnos_command module. The only exception is that following inventory variable can be specified ["condition = <flag string>"] When this inventory variable is specified as the variable of a task, the command is executed for the network element that matches the flag string. Usually, commands are executed across a group of network devices. When there is a requirement to skip the execution of the command on one or more devices, it is recommended to use this module. This module uses SSH to manage network device configuration.',
 'cnos_conditional_template': 'Manage switch configuration using templates based on condition on devices running Lenovo CNOS\n\nArguments: flag, commandfile, condition\n\nThis module allows you to work with the running configuration of a switch. It provides a way to execute a set of CNOS commands on a switch by evaluating the current running configuration and executing the commands only if the specific settings have not been already configured. The configuration source can be a set of commands or a template written in the Jinja2 templating language. This module functions the same as the cnos_template module. The only exception is that the following inventory variable can be specified. ["condition = <flag string>"] When this inventory variable is specified as the variable of a task, the template is executed for the network element that matches the flag string. Usually, templates are used when commands are the same across a group of network devices. When there is a requirement to skip the execution of the template on one or more devices, it is recommended to use this module. This module uses SSH to manage network device configuration.',
 'cnos_config': 'Manage Lenovo CNOS configuration sections\n\nArguments: comment, src, backup_options, admin, config, after, lines, replace, parents, backup, match, before\n\nLenovo CNOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with CNOS configuration sections in a deterministic way.',
 'cnos_factory': "Reset the switch startup configuration to default (factory) on devices running Lenovo CNOS.\n\nArguments: \n\nThis module allows you to reset a switch's startup configuration. The method provides a way to reset the startup configuration to its factory settings. This is helpful when you want to move the switch to another topology as a new network device. This module uses SSH to manage network device configuration. The result of the operation can be viewed in results directory.",
 'cnos_facts': 'Collect facts from remote devices running Lenovo CNOS\n\nArguments: authorize, auth_pass, gather_subset\n\nCollects a base set of device facts from a remote Lenovo device running on CNOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'cnos_image': "Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS\n\nArguments: serverpassword, protocol, serverusername, imgtype, serverip, imgpath\n\nThis module allows you to work with switch firmware images. It provides a way to download a firmware image to a network device from a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of the image's location. Authentication details required by the remote server must be provided as well. By default, this method makes the newly downloaded firmware image the active image, which will be used by the switch during the next restart. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_interface': 'Manage Interface on Lenovo CNOS network devices\n\nArguments: neighbors, rx_rate, name, duplex, enabled, mtu, delay, state, provider, aggregate, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on Lenovo CNOS network devices.',
 'cnos_l2_interface': 'Manage Layer-2 interface on Lenovo CNOS devices.\n\nArguments: native_vlan, access_vlan, name, trunk_vlans, state, trunk_allowed_vlans, mode, provider, aggregate\n\nThis module provides declarative management of Layer-2 interfaces on Lenovo CNOS devices.',
 'cnos_l3_interface': 'Manage Layer-3 interfaces on Lenovo CNOS network devices.\n\nArguments: state, name, ipv6, aggregate, provider, ipv4\n\nThis module provides declarative management of Layer-3 interfaces on CNOS network devices.',
 'cnos_linkagg': 'Manage link aggregation groups on Lenovo CNOS devices\n\nArguments: purge, state, group, mode, members, provider, aggregate\n\nThis module provides declarative management of link aggregation groups on Lenovo CNOS network devices.',
 'cnos_lldp': 'Manage LLDP configuration on Lenovo CNOS network devices.\n\nArguments: state\n\nThis module provides declarative management of LLDP service on Lenovc CNOS network devices.',
 'cnos_logging': 'Manage logging on network devices\n\nArguments: aggregate, state, name, level, dest, facility, size\n\nThis module provides declarative management of logging on Cisco Cnos devices.',
 'cnos_reload': 'Perform switch restart on devices running Lenovo CNOS\n\nArguments: \n\nThis module allows you to restart the switch using the current startup configuration. The module is usually invoked after the running configuration has been saved over the startup configuration. This module uses SSH to manage network device configuration. The results of the operation can be viewed in results directory.',
 'cnos_rollback': "Roll back the running or startup configuration from a remote server on devices running Lenovo CNOS\n\nArguments: serverpassword, configType, protocol, serverusername, rcserverip, rcpath\n\nThis module allows you to work with switch configurations. It provides a way to roll back configurations of a switch from a remote server. This is achieved by using startup or running configurations of the target device that were previously backed up to a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory from where the remote server can be reached. The next step is to provide the full file path of he backup configuration's location. Authentication details required by the remote server must be provided as well. By default, this method overwrites the switch's configuration file with the newly downloaded file. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_save': "Save the running configuration as the startup configuration on devices running Lenovo CNOS\n\nArguments: \n\nThis module allows you to copy the running configuration of a switch over its startup configuration. It is recommended to use this module shortly after any major configuration changes so they persist after a switch restart. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_showrun': "Collect the current running configuration on devices running on CNOS\n\nArguments: \n\nThis module allows you to view the switch running configuration. It executes the display running-config CLI command on a switch and returns a file containing the current running configuration of the target network device. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_static_route': 'Manage static IP routes on Lenovo CNOS network devices\n\nArguments: description, mask, prefix, admin_distance, interface, state, next_hop, aggregate, tag\n\nThis module provides declarative management of static IP routes on Lenovo CNOS network devices.',
 'cnos_system': 'Manage the system attributes on Lenovo CNOS devices\n\nArguments: state, lookup_source, name_servers, domain_search, hostname, domain_name, lookup_enabled\n\nThis module provides declarative management of node system attributes on Lenovo CNOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 'cnos_template': "Manage switch configuration using templates on devices running Lenovo CNOS\n\nArguments: commandfile\n\nThis module allows you to work with the running configuration of a switch. It provides a way to execute a set of CNOS commands on a switch by evaluating the current running configuration and executing the commands only if the specific settings have not been already configured. The configuration source can be a set of commands or a template written in the Jinja2 templating language. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_user': 'Manage the collection of local users on Lenovo CNOS devices\n\nArguments: update_password, configured_password, name, purge, state, role, aggregate, sshkey\n\nThis module provides declarative management of the local usernames configured on Lenovo CNOS devices.  It allows playbooks to manage either individual usernames or the collection of usernames in the current running config.  It also supports purging usernames from the configuration that are not explicitly defined.',
 'cnos_vlag': "Manage VLAG resources and attributes on devices running Lenovo CNOS\n\nArguments: vlagArg2, vlagArg3, vlagArg1, vlagArg4\n\nThis module allows you to work with virtual Link Aggregation Groups (vLAG) related configurations. The operators used are overloaded to ensure control over switch vLAG configurations. Apart from the regular device connection related attributes, there are four vLAG arguments which are overloaded variables that will perform further configurations. They are vlagArg1, vlagArg2, vlagArg3, and vlagArg4. For more details on how to use these arguments, see [Overloaded Variables]. This module uses SSH to manage network device configuration. The results of the operation will be placed in a directory named 'results' that must be created by the user in their local directory to where the playbook is run.",
 'cnos_vlan': 'Manage VLANs on CNOS network devices\n\nArguments: delay, name, interfaces, purge, associated_interfaces, state, provider, aggregate, vlan_id\n\nThis module provides declarative management of VLANs on Lenovo CNOS network devices.',
 'cnos_vrf': 'Manage VRFs on Lenovo CNOS network devices\n\nArguments: rd, name, interfaces, purge, associated_interfaces, state, delay, aggregate\n\nThis module provides declarative management of VRFs on Lenovo CNOS network devices.',
 'cobbler_sync': 'Sync Cobbler\n\nArguments: username, host, use_ssl, password, validate_certs, port\n\nSync Cobbler to commit changes.',
 'cobbler_system': 'Manage system objects in Cobbler\n\nArguments: username, name, interfaces, sync, port, state, host, use_ssl, password, validate_certs, properties\n\nAdd, modify or remove systems in Cobbler',
 'command': 'Execute commands on targets\n\nArguments: creates, chdir, strip_empty_ends, cmd, removes, argv, warn, free_form, stdin_add_newline, stdin\n\nThe C(command) module takes the command name followed by a list of space-delimited arguments.\nThe given command will be executed on all selected nodes.\nThe command(s) will not be processed through the shell, so variables like C($HOME) and operations like C("<"), C(">"), C("|"), C(";") and C("&") will not work. Use the M(shell) module if you need these features.\nTo create C(command) tasks that are easier to read than the ones using space-delimited arguments, pass parameters using the C(args) L(task keyword,../reference_appendices/playbooks_keywords.html#task) or use C(cmd) parameter.\nEither a free form command or C(cmd) parameter is required, see the examples.\nFor Windows targets, use the M(win_command) module instead.',
 'composer': 'Dependency Manager for PHP\n\nArguments: executable, prefer_source, no_scripts, apcu_autoloader, prefer_dist, working_dir, global_command, command, arguments, classmap_authoritative, ignore_platform_reqs, no_dev, no_plugins, optimize_autoloader\n\nComposer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you.\n',
 'consul': "Add, modify & delete services within a consul cluster.\n\nArguments: service_address, http, tags, check_name, service_name, host, ttl, port, script, check_id, service_port, notes, interval, token, state, timeout, service_id, scheme, validate_certs\n\nRegisters services and checks for an agent with a consul cluster. A service is some process running on the agent node that should be advertised by consul's discovery mechanism. It may optionally supply a check definition, a periodic service test to notify the consul cluster of service's health.\nChecks may also be registered per node e.g. disk usage, or cpu usage and notify the health of the entire node to the cluster. Service level checks do not require a check name or id as these are derived by Consul from the Service name and id respectively by appending 'service:' Node level checks require a I(check_name) and optionally a I(check_id).\nCurrently, there is no complete way to retrieve the script, interval or ttl metadata for a registered check. Without this metadata it is  not possible to tell if the data supplied with ansible represents a change to a check. As a result this does not attempt to determine changes and will always report a changed occurred. An API method is planned to supply this metadata so at that stage change management will be added.\nSee U(http://consul.io) for more details.",
 'consul_acl': 'Manipulate Consul ACL keys and rules\n\nArguments: name, rules, state, token_type, token, mgmt_token, host, scheme, validate_certs, port\n\nAllows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more details on using and configuring ACLs, see https://www.consul.io/docs/guides/acl.html.',
 'consul_kv': 'Manipulate entries in the key/value store of a consul cluster\n\nArguments: retrieve, cas, recurse, state, value, token, session, flags, key, host, scheme, validate_certs, port\n\nAllows the retrieval, addition, modification and deletion of key/value entries in a consul cluster via the agent. The entire contents of the record, including the indices, flags and session are returned as C(value).\nIf the C(key) represents a prefix then note that when a value is removed, the existing value if any is returned as part of the results.\nSee http://www.consul.io/docs/agent/http.html#kv for more details.',
 'consul_session': 'Manipulate consul sessions\n\nArguments: node, datacenter, name, state, checks, delay, host, behavior, id, scheme, validate_certs, port\n\nAllows the addition, modification and deletion of sessions in a consul cluster. These sessions can then be used in conjunction with key value pairs to implement distributed locks. In depth documentation for working with sessions can be found at http://www.consul.io/docs/internals/sessions.html',
 'copy': 'Copy files to remote locations\n\nArguments: src, directory_mode, force, remote_src, dest, checksum, content, mode, follow, backup, local_follow\n\nThe C(copy) module copies a file from the local or remote machine to a location on the remote machine.\nUse the M(fetch) module to copy files from remote locations to the local box.\nIf you need variable interpolation in copied files, use the M(template) module. Using a variable in the C(content) field will result in unpredictable output.\nFor Windows targets, use the M(win_copy) module instead.',
 'cp_mgmt_access_layer': 'Manages access-layer objects on Check Point over Web Services API\n\nArguments: applications_and_url_filtering, content_awareness, name, tags, firewall, ignore_warnings, implicit_cleanup_action, detect_using_x_forward_for, color, mobile_access, details_level, comments, shared, ignore_errors, add_default_rule\n\nManages access-layer objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_access_layer_facts': "Get access-layer objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet access-layer objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_access_role': 'Manages access-role objects on Check Point over Web Services API\n\nArguments: users, tags, color, ignore_warnings, comments, details_level, ignore_errors, remote_access_clients, networks, machines, name\n\nManages access-role objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_access_role_facts': "Get access-role objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet access-role objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_access_rule': 'Manages access-rule objects on Check Point over Web Services API\n\nArguments: layer, install_on, track, service_negate, position, ignore_errors, vpn, custom_fields, inline_layer, content_direction, destination_negate, name, service, destination, enabled, ignore_warnings, comments, content, source, details_level, source_negate, content_negate, time, action, action_settings, user_check\n\nManages access-rule objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_access_rule_facts': "Get access-rule objects facts on Check Point over Web Services API\n\nArguments: filter_settings, layer, name, package, show_hits, use_object_dictionary, order, filter, hits_settings, details_level, show_as_ranges, offset, limit, show_membership, dereference_group_members\n\nGet access-rule objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_address_range': 'Manages address-range objects on Check Point over Web Services API\n\nArguments: nat_settings, name, ipv4_address_last, tags, color, ipv6_address_first, ignore_warnings, comments, ip_address_first, ip_address_last, ipv6_address_last, groups, ignore_errors, details_level, ipv4_address_first\n\nManages address-range objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_address_range_facts': "Get address-range objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet address-range objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_administrator': 'Manages administrator objects on Check Point over Web Services API\n\nArguments: phone_number, tacacs_server, tags, color, authentication_method, permissions_profile, radius_server, ignore_errors, password, password_hash, name, expiration_date, multi_domain_profile, ignore_warnings, comments, must_change_password, details_level, email\n\nManages administrator objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_administrator_facts': "Get administrator objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet administrator objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_application_site': 'Manages application-site objects on Check Point over Web Services API\n\nArguments: description, tags, application_signature, url_list, ignore_warnings, comments, name, color, details_level, groups, additional_categories, ignore_errors, primary_category, urls_defined_as_regular_expression\n\nManages application-site objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_application_site_category': 'Manages application-site-category objects on Check Point over Web Services API\n\nArguments: name, tags, color, ignore_warnings, comments, details_level, groups, ignore_errors, description\n\nManages application-site-category objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_application_site_category_facts': "Get application-site-category objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet application-site-category objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_application_site_facts': "Get application-site objects facts on Check Point over Web Services API\n\nArguments: application_id, name, offset, details_level, limit, show_membership, order\n\nGet application-site objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_application_site_group': 'Manages application-site-group objects on Check Point over Web Services API\n\nArguments: name, tags, color, ignore_warnings, comments, members, details_level, groups, ignore_errors\n\nManages application-site-group objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_application_site_group_facts': "Get application-site-group objects facts on Check Point over Web Services API\n\nArguments: limit, name, dereference_group_members, offset, details_level, show_membership, order\n\nGet application-site-group objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_assign_global_assignment': 'assign global assignment on Check Point over Web Services API\n\nArguments: global_domains, dependent_domains, details_level\n\nassign global assignment on Check Point over Web Services API\nAll operations are performed over Web Services API.',
 'cp_mgmt_discard': 'All changes done by user are discarded and removed from database.\n\nArguments: uid\n\nAll changes done by user are discarded and removed from database.\nAll operations are performed over Web Services API.',
 'cp_mgmt_dns_domain': 'Manages dns-domain objects on Check Point over Web Services API\n\nArguments: name, tags, color, is_sub_domain, ignore_warnings, comments, details_level, ignore_errors\n\nManages dns-domain objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_dns_domain_facts': "Get dns-domain objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet dns-domain objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_dynamic_object': 'Manages dynamic-object objects on Check Point over Web Services API\n\nArguments: details_level, name, tags, color, ignore_errors, ignore_warnings, comments\n\nManages dynamic-object objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_dynamic_object_facts': "Get dynamic-object objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet dynamic-object objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_exception_group': 'Manages exception-group objects on Check Point over Web Services API\n\nArguments: name, applied_threat_rules, tags, color, apply_on, ignore_warnings, comments, details_level, ignore_errors, applied_profile\n\nManages exception-group objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_exception_group_facts': "Get exception-group objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet exception-group objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_global_assignment': 'Manages global-assignment objects on Check Point over Web Services API\n\nArguments: manage_protection_actions, ignore_warnings, dependent_domain, global_domain, details_level, global_threat_prevention_policy, ignore_errors, global_access_policy\n\nManages global-assignment objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_global_assignment_facts': "Get global-assignment objects facts on Check Point over Web Services API\n\nArguments: dependent_domain, global_domain, details_level, offset, limit, order\n\nGet global-assignment objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_group': 'Manages group objects on Check Point over Web Services API\n\nArguments: name, tags, color, ignore_warnings, comments, members, details_level, groups, ignore_errors\n\nManages group objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_group_facts': "Get group objects facts on Check Point over Web Services API\n\nArguments: name, order, limit, show_as_ranges, offset, details_level, show_membership, dereference_group_members\n\nGet group objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_group_with_exclusion': 'Manages group-with-exclusion objects on Check Point over Web Services API\n\nArguments: name, tags, color, except, comments, ignore_warnings, details_level, groups, ignore_errors, include\n\nManages group-with-exclusion objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_group_with_exclusion_facts': "Get group-with-exclusion objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_as_ranges\n\nGet group-with-exclusion objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_host': 'Manages host objects on Check Point over Web Services API\n\nArguments: ipv6_address, nat_settings, name, tags, color, interfaces, ignore_warnings, comments, ipv4_address, host_servers, details_level, groups, ignore_errors, ip_address\n\nManages host objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_host_facts': "Get host objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet host objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_install_policy': 'install policy on Check Point over Web Services API\n\nArguments: qos, threat_prevention, prepare_only, desktop_security, targets, access, policy_package, install_on_all_cluster_members_or_fail, revision\n\ninstall policy on Check Point over Web Services API\nAll operations are performed over Web Services API.',
 'cp_mgmt_mds_facts': "Get Multi-Domain Server (mds) objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet mds objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_multicast_address_range': 'Manages multicast-address-range objects on Check Point over Web Services API\n\nArguments: ipv6_address, ipv4_address_first, ipv4_address_last, tags, color, ipv4_address, ip_address_first, groups, ignore_errors, ip_address, name, ipv6_address_first, ignore_warnings, comments, ip_address_last, ipv6_address_last, details_level\n\nManages multicast-address-range objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_multicast_address_range_facts': "Get multicast-address-range objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet multicast-address-range objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_network': 'Manages network objects on Check Point over Web Services API\n\nArguments: subnet6, subnet4, tags, color, broadcast, subnet_mask, groups, ignore_errors, mask_length, subnet, nat_settings, name, ignore_warnings, comments, details_level, mask_length4, mask_length6\n\nManages network objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_network_facts': "Get network objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet network objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_package': 'Manages package objects on Check Point over Web Services API\n\nArguments: qos, access_layers, tags, color, vpn_traditional_mode, qos_policy_type, ignore_errors, installation_targets, access, name, threat_prevention, desktop_security, ignore_warnings, comments, threat_layers, details_level\n\nManages package objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_package_facts': "Get package objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet package objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_publish': 'All the changes done by this user will be seen by all users only after publish is called.\n\nArguments: uid\n\nAll the changes done by this user will be seen by all users only after publish is called.\nAll operations are performed over Web Services API.',
 'cp_mgmt_put_file': 'put file on Check Point over Web Services API\n\nArguments: file_content, file_name, targets, comments, file_path\n\nput file on Check Point over Web Services API\nAll operations are performed over Web Services API.',
 'cp_mgmt_run_ips_update': 'Runs IPS database update. If "package-path" is not provided server will try to get the latest package from the User Center.\n\nArguments: package_path\n\nRuns IPS database update. If "package-path" is not provided server will try to get the latest package from the User Center.\nAll operations are performed over Web Services API.',
 'cp_mgmt_run_script': 'Executes the script on a given list of targets.\n\nArguments: script_name, args, targets, comments, script\n\nExecutes the script on a given list of targets.\nAll operations are performed over Web Services API.',
 'cp_mgmt_security_zone': 'Manages security-zone objects on Check Point over Web Services API\n\nArguments: details_level, name, tags, color, ignore_errors, ignore_warnings, comments\n\nManages security-zone objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_security_zone_facts': "Get security-zone objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet security-zone objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_dce_rpc': 'Manages service-dce-rpc objects on Check Point over Web Services API\n\nArguments: name, tags, color, ignore_warnings, comments, details_level, groups, ignore_errors, interface_uuid, keep_connections_open_after_policy_installation\n\nManages service-dce-rpc objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_dce_rpc_facts': "Get service-dce-rpc objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-dce-rpc objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_group': 'Manages service-group objects on Check Point over Web Services API\n\nArguments: name, tags, color, ignore_warnings, comments, members, details_level, groups, ignore_errors\n\nManages service-group objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_group_facts': "Get service-group objects facts on Check Point over Web Services API\n\nArguments: name, order, limit, show_as_ranges, offset, details_level, show_membership, dereference_group_members\n\nGet service-group objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_icmp': 'Manages service-icmp objects on Check Point over Web Services API\n\nArguments: icmp_code, name, tags, color, ignore_warnings, comments, details_level, groups, ignore_errors, icmp_type, keep_connections_open_after_policy_installation\n\nManages service-icmp objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_icmp6': 'Manages service-icmp6 objects on Check Point over Web Services API\n\nArguments: icmp_code, name, tags, color, ignore_warnings, comments, details_level, groups, ignore_errors, icmp_type, keep_connections_open_after_policy_installation\n\nManages service-icmp6 objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_icmp6_facts': "Get service-icmp6 objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-icmp6 objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_icmp_facts': "Get service-icmp objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-icmp objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_other': 'Manages service-other objects on Check Point over Web Services API\n\nArguments: ip_protocol, tags, color, ignore_warnings, match_for_any, groups, use_default_session_timeout, ignore_errors, accept_replies, name, override_default_settings, sync_connections_on_cluster, comments, session_timeout, details_level, action, keep_connections_open_after_policy_installation, aggressive_aging, match\n\nManages service-other objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_other_facts': "Get service-other objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-other objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_rpc': 'Manages service-rpc objects on Check Point over Web Services API\n\nArguments: program_number, name, tags, color, ignore_warnings, comments, details_level, groups, ignore_errors, keep_connections_open_after_policy_installation\n\nManages service-rpc objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_rpc_facts': "Get service-rpc objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-rpc objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_sctp': 'Manages service-sctp objects on Check Point over Web Services API\n\nArguments: tags, color, ignore_warnings, match_for_any, groups, use_default_session_timeout, ignore_errors, port, name, sync_connections_on_cluster, comments, session_timeout, details_level, source_port, keep_connections_open_after_policy_installation, aggressive_aging\n\nManages service-sctp objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_sctp_facts': "Get service-sctp objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-sctp objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_tcp': 'Manages service-tcp objects on Check Point over Web Services API\n\nArguments: protocol, tags, color, ignore_warnings, match_for_any, groups, use_default_session_timeout, ignore_errors, port, name, override_default_settings, match_by_protocol_signature, sync_connections_on_cluster, comments, session_timeout, details_level, source_port, keep_connections_open_after_policy_installation, aggressive_aging\n\nManages service-tcp objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_tcp_facts': "Get service-tcp objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-tcp objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_service_udp': 'Manages service-udp objects on Check Point over Web Services API\n\nArguments: protocol, tags, color, ignore_warnings, match_for_any, groups, use_default_session_timeout, ignore_errors, accept_replies, port, name, override_default_settings, match_by_protocol_signature, sync_connections_on_cluster, comments, session_timeout, details_level, source_port, keep_connections_open_after_policy_installation, aggressive_aging\n\nManages service-udp objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_service_udp_facts': "Get service-udp objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet service-udp objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_session_facts': "Get session objects facts on Check Point over Web Services API\n\nArguments: limit, view_published_sessions, details_level, order, offset\n\nGet session objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_simple_gateway': 'Manages simple-gateway objects on Check Point over Web Services API\n\nArguments: ipv6_address, firewall, one_time_password, ips, logs_settings, firewall_settings, send_logs_to_server, save_logs_locally, ignore_warnings, comments, url_filtering, version, threat_extraction, vpn_settings, threat_emulation, content_awareness, os_name, tags, interfaces, application_control, ipv4_address, send_alerts_to_server, groups, ignore_errors, anti_bot, vpn, ip_address, color, send_logs_to_backup_server, name, anti_virus, details_level\n\nManages simple-gateway objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_simple_gateway_facts': "Get simple-gateway objects facts on Check Point over Web Services API\n\nArguments: limit, name, offset, details_level, order, show_membership\n\nGet simple-gateway objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_tag': 'Manages tag objects on Check Point over Web Services API\n\nArguments: details_level, name, tags, color, ignore_errors, ignore_warnings, comments\n\nManages tag objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_tag_facts': "Get tag objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet tag objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_threat_exception': 'Manages threat-exception objects on Check Point over Web Services API\n\nArguments: layer, install_on, track, protected_scope, protected_scope_negate, service_negate, protection_or_site, exception_group_name, ignore_errors, destination_negate, name, service, rule_name, destination, enabled, ignore_warnings, comments, source, details_level, source_negate, exception_group_uid, action, position\n\nManages threat-exception objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_threat_exception_facts': "Get threat-exception objects facts on Check Point over Web Services API\n\nArguments: filter_settings, layer, name, package, exception_group_uid, use_object_dictionary, order, filter, rule_name, exception_group_name, details_level, offset, limit, show_membership, dereference_group_members\n\nGet threat-exception objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_threat_indicator': 'Manages threat-indicator objects on Check Point over Web Services API\n\nArguments: name, tags, color, ignore_warnings, comments, observables_raw_data, details_level, observables, action, ignore_errors, profile_overrides\n\nManages threat-indicator objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_threat_indicator_facts': "Get threat-indicator objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet threat-indicator objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_threat_layer': 'Manages threat-layer objects on Check Point over Web Services API\n\nArguments: name, tags, color, ignore_warnings, comments, details_level, ignore_errors, add_default_rule\n\nManages threat-layer objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_threat_layer_facts': "Get threat-layer objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet threat-layer objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_threat_profile': 'Manages threat-profile objects on Check Point over Web Services API\n\nArguments: active_protections_severity, tags, color, ips_settings, activate_protections_by_extended_attributes, use_indicators, ips, indicator_overrides, confidence_level_high, ignore_errors, anti_bot, anti_virus, confidence_level_low, name, deactivate_protections_by_extended_attributes, overrides, ignore_warnings, comments, confidence_level_medium, active_protections_performance_impact, malicious_mail_policy_settings, use_extended_attributes, details_level, threat_emulation\n\nManages threat-profile objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_threat_profile_facts': "Get threat-profile objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet threat-profile objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_threat_protection_override': 'Edit existing object using object name or uid.\n\nArguments: follow_up, overrides, details_level, name, comments\n\nEdit existing object using object name or uid.\nAll operations are performed over Web Services API.',
 'cp_mgmt_threat_rule': 'Manages threat-rule objects on Check Point over Web Services API\n\nArguments: layer, install_on, track, enabled, protected_scope_negate, service_negate, ignore_errors, destination_negate, name, service, destination, protected_scope, ignore_warnings, comments, source, details_level, source_negate, track_settings, action, position\n\nManages threat-rule objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_threat_rule_facts': "Get threat-rule objects facts on Check Point over Web Services API\n\nArguments: filter_settings, layer, name, package, use_object_dictionary, order, filter, limit, offset, details_level, show_membership, dereference_group_members\n\nGet threat-rule objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_time': 'Manages time objects on Check Point over Web Services API\n\nArguments: end_never, end, name, tags, color, ignore_warnings, comments, recurrence, start, details_level, groups, ignore_errors, hours_ranges, start_now\n\nManages time objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_time_facts': "Get time objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet time objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_verify_policy': 'Verifies the policy of the selected package.\n\nArguments: policy_package\n\nVerifies the policy of the selected package.\nAll operations are performed over Web Services API.',
 'cp_mgmt_vpn_community_meshed': 'Manages vpn-community-meshed objects on Check Point over Web Services API\n\nArguments: ike_phase_2, ike_phase_1, name, tags, color, ignore_warnings, comments, shared_secrets, encryption_method, gateways, ignore_errors, encryption_suite, details_level, use_shared_secret\n\nManages vpn-community-meshed objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_vpn_community_meshed_facts': "Get vpn-community-meshed objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet vpn-community-meshed objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_vpn_community_star': 'Manages vpn-community-star objects on Check Point over Web Services API\n\nArguments: ike_phase_2, ike_phase_1, satellite_gateways, tags, color, ignore_warnings, center_gateways, ignore_errors, name, mesh_center_gateways, comments, shared_secrets, encryption_method, details_level, encryption_suite, use_shared_secret\n\nManages vpn-community-star objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_vpn_community_star_facts': "Get vpn-community-star objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet vpn-community-star objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_mgmt_wildcard': 'Manages wildcard objects on Check Point over Web Services API\n\nArguments: ipv6_address, name, tags, color, ipv6_mask_wildcard, comments, ignore_warnings, ipv4_address, details_level, groups, ignore_errors, ipv4_mask_wildcard\n\nManages wildcard objects on Check Point devices including creating, updating and removing objects.\nAll operations are performed over Web Services API.',
 'cp_mgmt_wildcard_facts': "Get wildcard objects facts on Check Point over Web Services API\n\nArguments: details_level, offset, limit, order, name\n\nGet wildcard objects facts on Check Point devices.\nAll operations are performed over Web Services API.\nThis module handles both operations, get a specific object and get several objects, For getting a specific object use the parameter 'name'.",
 'cp_publish': 'All the changes done by this user will be seen by all users only after publish is called.\n\nArguments: uid\n\nAll the changes done by this user will be seen by all users only after publish is called. All operations are performed over Web Services API.',
 'cpanm': 'Manages Perl library dependencies.\n\nArguments: executable, name, installdeps, system_lib, mirror_only, from_path, version, mirror, locallib, notest\n\nManage Perl library dependencies.',
 'cpm_plugconfig': 'Get and Set Plug Parameters on WTI OOB and PDU power devices\n\nArguments: plug_default, use_proxy, cpm_password, cpm_url, plug_name, plug_bootdelay, plug_id, cpm_action, plug_bootpriority, cpm_username, validate_certs, use_https\n\nGet and Set Plug Parameters on WTI OOB and PDU devices',
 'cpm_plugcontrol': 'Get and Set Plug actions on WTI OOB and PDU power devices\n\nArguments: use_proxy, cpm_password, cpm_url, plug_id, plug_state, cpm_action, cpm_username, validate_certs, use_https\n\nGet and Set Plug actions on WTI OOB and PDU devices',
 'cpm_serial_port_config': 'Set Serial port parameters in WTI OOB and PDU devices\n\nArguments: baud, parity, seq, cpm_url, echo, stopbits, break_allow, port, use_https, handshake, use_proxy, cpm_password, cmd, logoff, tout, mode, portname, cpm_username, validate_certs\n\nSet Serial port parameters in WTI OOB and PDU devices',
 'cpm_serial_port_info': 'Get Serial port parameters in WTI OOB and PDU devices\n\nArguments: use_proxy, cpm_password, cpm_url, cpm_username, validate_certs, port, use_https\n\nGet Serial port parameters from WTI OOB and PDU devices',
 'cpm_user': 'Get various status and parameters from WTI OOB and PDU devices\n\nArguments: user_accessweb, cpm_url, user_accessserial, user_portaccess, user_plugaccess, user_groupaccess, user_callbackphone, use_https, user_accessoutbound, user_accessapi, use_proxy, cpm_password, validate_certs, user_accessssh, user_accessmonitor, user_accesslevel, cpm_action, user_pass, cpm_username, user_name\n\nGet/Add/Edit Delete Users from WTI OOB and PDU devices',
 'cron': 'Manage cron.d and crontab entries\n\nArguments: cron_file, month, disabled, job, special_time, user, insertafter, insertbefore, day, minute, name, hour, reboot, state, weekday, env, backup\n\nUse this module to manage crontab and environment variables entries. This module allows you to create environment variables and named crontab entries, update, or delete them.\nWhen crontab jobs are managed: the module includes one line with the description of the crontab entry C("#Ansible: <name>") corresponding to the "name" passed to the module, which is used by future ansible/module calls to find/check the state. The "name" parameter should be unique, and changing the "name" value will result in a new cron task being created (or a different one being removed).\nWhen environment variables are managed, no comment line is added, but, when the module needs to find/check the state, it uses the "name" parameter to find the environment variable definition line.\nWhen using symbols such as %, they must be properly escaped.',
 'cronvar': 'Manage variables in crontabs\n\nArguments: name, insertbefore, cron_file, value, state, user, insertafter, backup\n\nUse this module to manage crontab variables.\nThis module allows you to create, update, or delete cron variable definitions.',
 'crypttab': 'Encrypted Linux block devices\n\nArguments: state, name, backing_device, path, password, opts\n\nControl Linux encrypted block devices that are set up during system boot in C(/etc/crypttab).',
 'cs_account': 'Manages accounts on Apache CloudStack based clouds.\n\nArguments: username, first_name, last_name, account_type, name, password, domain, timezone, state, role, ldap_domain, poll_async, network_domain, email, ldap_type\n\nCreate, disable, lock, enable and remove accounts.',
 'cs_affinitygroup': 'Manages affinity groups on Apache CloudStack based clouds.\n\nArguments: account, poll_async, name, domain, affinity_type, project, state, description\n\nCreate and remove affinity groups.',
 'cs_cluster': 'Manages host clusters on Apache CloudStack based clouds.\n\nArguments: username, guest_vswitch_type, ovm3_cluster, ovm3_pool, pod, hypervisor, guest_vswitch_name, vms_username, password, public_vswitch_type, name, zone, url, cluster_type, ovm3_vip, vms_ip_address, state, public_vswitch_name, vms_password\n\nCreate, update and remove clusters.',
 'cs_configuration': 'Manages configuration on Apache CloudStack based clouds.\n\nArguments: cluster, domain, name, zone, storage, account, value\n\nManages global, zone, account, storage and cluster configurations.',
 'cs_disk_offering': 'Manages disk offerings on Apache CloudStack based clouds.\n\nArguments: domain, storage_tags, storage_type, name, display_text, disk_size, iops_read_rate, iops_min, iops_max, bytes_read_rate, customized, iops_write_rate, state, provisioning_type, display_offering, hypervisor_snapshot_reserve, bytes_write_rate\n\nCreate and delete disk offerings for guest VMs.\nUpdate display_text or display_offering of existing disk offering.',
 'cs_domain': 'Manages domains on Apache CloudStack based clouds.\n\nArguments: path, state, network_domain, poll_async, clean_up\n\nCreate, update and remove domains.',
 'cs_facts': 'Gather facts on instances of Apache CloudStack based clouds.\n\nArguments: filter, meta_data_host\n\nThis module fetches data from the metadata API in CloudStack. The module must be called from within the instance itself.',
 'cs_firewall': 'Manages firewall rules on Apache CloudStack based clouds.\n\nArguments: icmp_code, domain, protocol, tags, end_port, start_port, icmp_type, ip_address, account, poll_async, network, zone, cidrs, project, state, type\n\nCreates and removes firewall rules.',
 'cs_host': 'Manages hosts on Apache CloudStack based clouds.\n\nArguments: username, name, zone, host_tags, url, hypervisor, cluster, state, pod, password, allocation_state\n\nCreate, update and remove hosts.',
 'cs_image_store': 'Manages CloudStack Image Stores.\n\nArguments: force_recreate, state, name, zone, provider, url\n\nDeploy, remove, recreate CloudStack Image Stores.',
 'cs_instance': 'Manages instances and virtual machines on Apache CloudStack based clouds.\n\nArguments: domain, force, disk_offering, allow_root_disk_shrink, keyboard, user_data, root_disk_size, cpu_speed, ip6_address, networks, security_groups, group, zone, state, details, template, memory, iso, template_filter, tags, ssh_key, host, display_name, service_offering, ip_address, account, disk_size, name, hypervisor, ip_to_networks, project, affinity_groups, poll_async, cpu\n\nDeploy, start, update, scale, restart, restore, stop and destroy instances.',
 'cs_instance_info': 'Gathering information from the API of instances from Apache CloudStack based clouds.\n\nArguments: project, account, domain, name\n\nGathering information from the API of an instance.',
 'cs_instance_nic': 'Manages NICs of an instance on Apache CloudStack based clouds.\n\nArguments: account, poll_async, network, zone, domain, vm, project, state, vpc, ip_address\n\nAdd and remove nic to and from network',
 'cs_instance_nic_secondaryip': 'Manages secondary IPs of an instance on Apache CloudStack based clouds.\n\nArguments: vm_guest_ip, account, poll_async, network, zone, domain, vm, project, state, vpc\n\nAdd and remove secondary IPs to and from a NIC of an instance.',
 'cs_instance_password_reset': "Allows resetting VM the default passwords on Apache CloudStack based clouds.\n\nArguments: project, account, poll_async, zone, domain, vm\n\nResets the default user account's password on an instance.\nRequires cloud-init to be installed in the virtual machine.\nThe passwordenabled flag must be set on the template associated with the VM.",
 'cs_instancegroup': 'Manages instance groups on Apache CloudStack based clouds.\n\nArguments: project, account, state, domain, name\n\nCreate and remove instance groups.',
 'cs_ip_address': 'Manages public IP address associations on Apache CloudStack based clouds.\n\nArguments: account, poll_async, network, zone, tags, domain, project, state, vpc, ip_address\n\nAcquires and associates a public IP to an account or project.\nDue to API limitations this is not an idempotent call, so be sure to only conditionally call this when I(state=present).\nTagging the IP address can also make the call idempotent.',
 'cs_iso': 'Manages ISO images on Apache CloudStack based clouds.\n\nArguments: is_featured, tags, iso_filter, domain, is_public, display_text, account, poll_async, name, zone, url, checksum, is_dynamically_scalable, cross_zones, project, bootable, state, is_ready, os_type\n\nRegister and remove ISO images.',
 'cs_loadbalancer_rule': 'Manages load balancer rules on Apache CloudStack based clouds.\n\nArguments: domain, protocol, description, tags, private_port, vpc, cidr, ip_address, network, account, poll_async, name, algorithm, open_firewall, public_port, project, state, zone\n\nAdd, update and remove load balancer rules.',
 'cs_loadbalancer_rule_member': 'Manages load balancer rule members on Apache CloudStack based clouds.\n\nArguments: domain, poll_async, name, zone, account, project, state, ip_address, vms\n\nAdd and remove load balancer rule members.',
 'cs_network': 'Manages networks on Apache CloudStack based clouds.\n\nArguments: domain, end_ipv6, tags, vlan, clean_up, netmask, network_offering, vpc, start_ip, acl, gateway, gateway_ipv6, display_text, isolated_pvlan, account, subdomain_access, poll_async, name, zone, acl_type, start_ipv6, cidr_ipv6, project, state, end_ip, network_domain\n\nCreate, update, restart and delete networks.',
 'cs_network_acl': 'Manages network access control lists (ACL) on Apache CloudStack based clouds.\n\nArguments: account, poll_async, name, zone, domain, project, state, vpc, description\n\nCreate and remove network ACLs.',
 'cs_network_acl_rule': 'Manages network access control list (ACL) rules on Apache CloudStack based clouds.\n\nArguments: icmp_code, domain, protocol, vpc, tags, end_port, network_acl, action_policy, start_port, icmp_type, account, poll_async, zone, protocol_number, cidrs, rule_position, project, state, traffic_type\n\nAdd, update and remove network ACL rules.',
 'cs_network_offering': 'Manages network offerings on Apache CloudStack based clouds.\n\nArguments: keepalive_enabled, specify_vlan, egress_default_policy, specify_ip_ranges, service_capabilities, service_offering, supported_services, conserve_mode, availability, guest_ip_type, max_connections, display_text, for_vpc, service_providers, name, persistent, state, details, network_rate, traffic_type\n\nCreate, update, enable, disable and remove network offerings.',
 'cs_physical_network': 'Manages physical networks on Apache CloudStack based clouds.\n\nArguments: domain, nsps_disabled, name, zone, tags, isolation_method, vlan, nsps_enabled, network_speed, broadcast_domain_range, state, poll_async\n\nCreate, update and remove networks.\nEnabled and disabled Network Service Providers\nEnables Internal LoadBalancer and VPC/VirtualRouter elements as required',
 'cs_pod': 'Manages pods on Apache CloudStack based clouds.\n\nArguments: name, zone, netmask, gateway, state, end_ip, start_ip, id\n\nCreate, update, delete pods.',
 'cs_portforward': 'Manages port forwarding rules on Apache CloudStack based clouds.\n\nArguments: vm_guest_ip, domain, protocol, tags, vm, private_port, vpc, private_end_port, ip_address, account, poll_async, network, open_firewall, public_port, public_end_port, project, state, zone\n\nCreate, update and remove port forwarding rules.',
 'cs_project': 'Manages projects on Apache CloudStack based clouds.\n\nArguments: display_text, account, state, poll_async, name, tags, domain\n\nCreate, update, suspend, activate and remove projects.',
 'cs_region': 'Manages regions on Apache CloudStack based clouds.\n\nArguments: state, endpoint, id, name\n\nAdd, update and remove regions.',
 'cs_resourcelimit': 'Manages resource limits on Apache CloudStack based clouds.\n\nArguments: project, domain, limit, account, resource_type\n\nManage limits of resources for domains, accounts and projects.',
 'cs_role': 'Manages user roles on Apache CloudStack based clouds.\n\nArguments: id, state, description, role_type, name\n\nCreate, update, delete user roles.',
 'cs_role_permission': 'Manages role permissions on Apache CloudStack based clouds.\n\nArguments: state, role, description, parent, permission, name\n\nCreate, update and remove CloudStack role permissions.\nManaging role permissions only supported in CloudStack >= 4.9.',
 'cs_router': 'Manages routers on Apache CloudStack based clouds.\n\nArguments: account, poll_async, name, zone, domain, project, state, service_offering\n\nStart, restart, stop and destroy routers.\nI(state=present) is not able to create routers, use M(cs_network) instead.',
 'cs_securitygroup': 'Manages security groups on Apache CloudStack based clouds.\n\nArguments: project, account, name, state, domain, description\n\nCreate and remove security groups.',
 'cs_securitygroup_rule': 'Manages security group rules on Apache CloudStack based clouds.\n\nArguments: icmp_code, protocol, start_port, user_security_group, end_port, project, state, security_group, poll_async, cidr, icmp_type, type\n\nAdd and remove security group rules.',
 'cs_service_offering': 'Manages service offerings on Apache CloudStack based clouds.\n\nArguments: offer_ha, cpu_number, domain, disk_bytes_read_rate, system_vm_type, limit_cpu_usage, memory, is_system, storage_tags, storage_type, is_volatile, network_rate, cpu_speed, service_offering_details, disk_iops_max, disk_iops_read_rate, display_text, is_customized, name, is_iops_customized, host_tags, deployment_planner, state, disk_iops_min, disk_iops_write_rate, provisioning_type, hypervisor_snapshot_reserve, disk_bytes_write_rate\n\nCreate and delete service offerings for guest and system VMs.\nUpdate display_text of existing service offering.',
 'cs_snapshot_policy': 'Manages volume snapshot policies on Apache CloudStack based clouds.\n\nArguments: volume, domain, schedule, interval_type, vm, volume_type, time_zone, project, state, vpc, account, max_snaps, device_id\n\nCreate, update and delete volume snapshot policies.',
 'cs_sshkeypair': 'Manages SSH keys on Apache CloudStack based clouds.\n\nArguments: project, public_key, account, name, state, domain\n\nCreate, register and remove SSH keys.\nIf no key was found and no public key was provided and a new SSH private/public key pair will be created and the private key will be returned.',
 'cs_staticnat': 'Manages static NATs on Apache CloudStack based clouds.\n\nArguments: vm_guest_ip, domain, poll_async, network, zone, vm, project, state, vpc, account, ip_address\n\nCreate, update and remove static NATs.',
 'cs_storage_pool': 'Manages Primary Storage Pools on Apache CloudStack based clouds.\n\nArguments: managed, name, zone, cluster, hypervisor, storage_tags, capacity_iops, state, capacity_bytes, provider, scope, pod, allocation_state, storage_url\n\nCreate, update, put into maintenance, disable, enable and remove storage pools.',
 'cs_template': 'Manages templates on Apache CloudStack based clouds.\n\nArguments: is_featured, format, vm, domain, is_extractable, checksum, poll_async, password_enabled, zone, sshkey_enabled, is_dynamically_scalable, state, is_ready, details, template_find_options, is_routing, template_tag, template_filter, tags, is_public, requires_hvm, display_text, account, name, url, bits, cross_zones, project, snapshot, mode, hypervisor, os_type\n\nRegister templates from an URL.\nCreate templates from a ROOT volume of a stopped VM or its snapshot.\nUpdate (since version 2.7), extract and delete templates.',
 'cs_traffic_type': 'Manages traffic types on CloudStack Physical Networks\n\nArguments: poll_async, zone, hyperv_networklabel, vlan, vmware_networklabel, isolation_method, state, physical_network, xen_networklabel, traffic_type, kvm_networklabel, ovm3_networklabel\n\nAdd, remove, update Traffic Types associated with CloudStack Physical Networks.',
 'cs_user': 'Manages users on Apache CloudStack based clouds.\n\nArguments: username, keys_registered, account, last_name, poll_async, first_name, state, domain, timezone, password, email\n\nCreate, update, disable, lock, enable and remove users.',
 'cs_vlan_ip_range': 'Manages VLAN IP ranges on Apache CloudStack based clouds.\n\nArguments: domain, end_ipv6, vlan, netmask, for_virtual_network, start_ip, gateway, gateway_ipv6, account, network, zone, start_ipv6, cidr_ipv6, project, state, end_ip, physical_network\n\nCreate and delete VLAN IP range.',
 'cs_vmsnapshot': 'Manages VM snapshots on Apache CloudStack based clouds.\n\nArguments: snapshot_memory, domain, poll_async, description, zone, tags, vm, project, state, account, name\n\nCreate, remove and revert VM from snapshots.',
 'cs_volume': 'Manages volumes on Apache CloudStack based clouds.\n\nArguments: custom_id, domain, force, disk_offering, tags, shrink_ok, vm, display_volume, min_iops, size, account, poll_async, name, zone, url, format, state, project, max_iops, snapshot, mode, device_id\n\nCreate, destroy, attach, detach, extract or upload volumes.',
 'cs_vpc': 'Manages VPCs on Apache CloudStack based clouds.\n\nArguments: display_text, vpc_offering, poll_async, name, zone, tags, clean_up, project, state, domain, account, cidr, network_domain\n\nCreate, update and delete VPCs.',
 'cs_vpc_offering': 'Manages vpc offerings on Apache CloudStack based clouds.\n\nArguments: display_text, service_providers, poll_async, name, state, supported_services, service_capabilities, service_offering\n\nCreate, update, enable, disable and remove CloudStack VPC offerings.',
 'cs_vpn_connection': 'Manages site-to-site VPN connections on Apache CloudStack based clouds.\n\nArguments: vpn_customer_gateway, passive, domain, force, zone, account, project, state, vpc, poll_async\n\nCreate and remove VPN connections.',
 'cs_vpn_customer_gateway': 'Manages site-to-site VPN customer gateway configurations on Apache CloudStack based clouds.\n\nArguments: domain, poll_async, name, ipsec_psk, esp_lifetime, esp_policy, cidrs, account, gateway, project, state, dpd, ike_policy, force_encap, ike_lifetime\n\nCreate, update and remove VPN customer gateways.',
 'cs_vpn_gateway': 'Manages site-to-site VPN gateways on Apache CloudStack based clouds.\n\nArguments: project, account, poll_async, vpc, zone, state, domain\n\nCreates and removes VPN site-to-site gateways.',
 'cs_zone': 'Manages zones on Apache CloudStack based clouds.\n\nArguments: domain, dhcp_provider, dns2_ipv6, id, securitygroups_enabled, dns1_ipv6, internal_dns1, internal_dns2, name, dns2, dns1, state, guest_cidr_address, network_domain, local_storage_enabled, network_type\n\nCreate, update and remove zones.',
 'cs_zone_info': 'Gathering information about zones from Apache CloudStack based clouds.\n\nArguments: zone\n\nGathering information from the API of a zone.',
 'cv_server_provision': 'Provision server port by applying or removing template configuration to an Arista CloudVision Portal configlet that is applied to a switch.\n\nArguments: username, port_vlan, protocol, switch_port, server_name, port, host, template, auto_run, action, password, switch_name\n\nThis module allows a server team to provision server network ports for new servers without having to access Arista CVP or asking the network team to do it for them. Provide the information for connecting to CVP, switch rack, port the new server is connected to, optional vlan, and an action and the module will apply the configuration to the switch port via CVP. Actions are add (applies template config to port), remove (defaults the interface config) and show (returns the current port config).',
 'cyberark_authentication': 'Module for CyberArk Vault Authentication using PAS Web Services SDK\n\nArguments: username, use_radius_authentication, new_password, cyberark_session, state, password, validate_certs, use_shared_logon_authentication, api_base_url\n\nAuthenticates to CyberArk Vault using Privileged Account Security Web Services SDK and creates a session fact that can be used by other modules. It returns an Ansible fact called I(cyberark_session). Every module can use this fact as C(cyberark_session) parameter.',
 'cyberark_user': 'Module for CyberArk User Management using PAS Web Services SDK\n\nArguments: username, first_name, last_name, initial_password, user_type_name, new_password, cyberark_session, group_name, disabled, change_password_on_the_next_logon, state, expiry_date, location, email\n\nCyberArk User Management using PAS Web Services SDK.\nIt currently supports the following actions Get User Details, Add User, Update User, Delete User.',
 'data_pipeline': 'Create and manage AWS Datapipelines\n\nArguments: name, parameters, tags, state, objects, values, timeout, description\n\nCreate and manage AWS Datapipelines. Creation is not idempotent in AWS, so the I(uniqueId) is created by hashing the options (minus objects) given to the datapipeline.\nThe pipeline definition must be in the format given here U(https://docs.aws.amazon.com/datapipeline/latest/APIReference/API_PutPipelineDefinition.html#API_PutPipelineDefinition_RequestSyntax).\nAlso operations will wait for a configurable amount of time to ensure the pipeline is in the requested state.',
 'datadog_event': 'Posts events to Datadog  service\n\nArguments: date_happened, alert_type, title, text, tags, app_key, priority, host, aggregation_key, api_key, validate_certs\n\nAllows to post events to Datadog (www.datadoghq.com) service.\nUses http://docs.datadoghq.com/api/#events API.',
 'datadog_monitor': 'Manages Datadog monitors\n\nArguments: notify_audit, timeout_h, tags, thresholds, new_host_delay, app_key, evaluation_delay, query, message, id, locked, name, no_data_timeframe, silenced, require_full_window, notify_no_data, renotify_interval, state, escalation_message, api_key, type\n\nManages monitors within Datadog.\nOptions as described on https://docs.datadoghq.com/api/.',
 'dconf': 'Modify and read dconf database\n\nArguments: state, key, value\n\nThis module allows modifications and reading of dconf database. The module is implemented as a wrapper around dconf tool. Please see the dconf(1) man page for more details.\nSince C(dconf) requires a running D-Bus session to change values, the module will try to detect an existing session and reuse it, or run the tool via C(dbus-run-session).',
 'debconf': 'Configure a .deb package\n\nArguments: value, vtype, question, name, unseen\n\nConfigure a .deb package using debconf-set-selections.\nOr just query existing selections.',
 'debug': "Print statements during execution\n\nArguments: msg, var, verbosity\n\nThis module prints statements during execution and can be useful for debugging variables or expressions without necessarily halting the playbook.\nUseful for debugging together with the 'when:' directive.\nThis module is also supported for Windows targets.",
 'dellos10_command': 'Run commands on remote devices running Dell OS10\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to a Dell EMC OS10 node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(dellos10_config) to configure Dell EMC OS10 devices.',
 'dellos10_config': 'Manage Dell EMC Networking OS10 configuration sections\n\nArguments: src, backup_options, config, after, lines, update, replace, parents, save, backup, match, before\n\nOS10 configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with OS10 configuration sections in a deterministic way.',
 'dellos10_facts': 'Collect facts from remote devices running Dell EMC Networking OS10\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running OS10.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'dellos6_command': 'Run commands on remote devices running Dell OS6\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to a Dell OS6 node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(dellos6_config) to configure Dell OS6 devices.',
 'dellos6_config': 'Manage Dell EMC Networking OS6 configuration sections\n\nArguments: src, backup_options, config, after, lines, update, replace, parents, save, backup, match, before\n\nOS6 configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with OS6 configuration sections in a deterministic way.',
 'dellos6_facts': 'Collect facts from remote devices running Dell EMC Networking OS6\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running OS6.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'dellos9_command': 'Run commands on remote devices running Dell OS9\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to a Dell OS9 node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(dellos9_config) to configure Dell OS9 devices.',
 'dellos9_config': 'Manage Dell EMC Networking OS9 configuration sections\n\nArguments: src, backup_options, config, after, lines, update, replace, parents, save, backup, match, before\n\nOS9 configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with OS9 configuration sections in a deterministic way.',
 'dellos9_facts': 'Collect facts from remote devices running Dell EMC Networking OS9\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running OS9.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'deploy_helper': "Manages some of the steps common in deploying projects.\n\nArguments: unfinished_filename, keep_releases, current_path, state, shared_path, releases_path, clean, release, path\n\nThe Deploy Helper manages some of the steps common in deploying software. It creates a folder structure, manages a symlink for the current release and cleans up old releases.\nRunning it with the C(state=query) or C(state=present) will return the C(deploy_helper) fact. C(project_path), whatever you set in the path parameter, C(current_path), the path to the symlink that points to the active release, C(releases_path), the path to the folder to keep releases in, C(shared_path), the path to the folder to keep shared resources in, C(unfinished_filename), the file to check for to recognize unfinished builds, C(previous_release), the release the 'current' symlink is pointing to, C(previous_release_path), the full path to the 'current' symlink target, C(new_release), either the 'release' parameter or a generated timestamp, C(new_release_path), the path to the new release folder (not created by the module).",
 'digital_ocean_account_info': 'Gather information about DigitalOcean User account\n\nArguments: \n\nThis module can be used to gather information about User account.\nThis module was called C(digital_ocean_account_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_block_storage': 'Create/destroy or attach/detach Block Storage volumes in DigitalOcean\n\nArguments: droplet_id, description, region, volume_name, state, command, snapshot_id, block_size\n\nCreate/destroy Block Storage volume in DigitalOcean, or attach/detach Block Storage volume to a droplet.',
 'digital_ocean_certificate': 'Manage certificates in DigitalOcean.\n\nArguments: leaf_certificate, private_key, state, certificate_chain, name\n\nCreate, Retrieve and remove certificates DigitalOcean.',
 'digital_ocean_certificate_info': 'Gather information about DigitalOcean certificates\n\nArguments: certificate_id\n\nThis module can be used to gather information about DigitalOcean provided certificates.\nThis module was called C(digital_ocean_certificate_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_domain': 'Create/delete a DNS domain in DigitalOcean\n\nArguments: ip, state, id, name\n\nCreate/delete a DNS domain in DigitalOcean.',
 'digital_ocean_domain_info': 'Gather information about DigitalOcean Domains\n\nArguments: domain_name\n\nThis module can be used to gather information about DigitalOcean provided Domains.\nThis module was called C(digital_ocean_domain_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_droplet': 'Create and delete a DigitalOcean droplet\n\nArguments: size, unique_name, tags, image, user_data, wait_timeout, backups, id, name, monitoring, ssh_keys, region, state, oauth_token, volumes, ipv6, private_networking, wait\n\nCreate and delete a droplet in DigitalOcean and optionally wait for it to be active.',
 'digital_ocean_firewall_info': 'Gather information about DigitalOcean firewalls\n\nArguments: name\n\nThis module can be used to gather information about DigitalOcean firewalls.\nThis module was called C(digital_ocean_firewall_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_floating_ip': 'Manage DigitalOcean Floating IPs\n\nArguments: ip, state, oauth_token, region, droplet_id\n\nCreate/delete/assign a floating IP.',
 'digital_ocean_floating_ip_info': 'DigitalOcean Floating IPs information\n\nArguments: \n\nThis module can be used to fetch DigitalOcean Floating IPs information.\nThis module was called C(digital_ocean_floating_ip_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_image_info': 'Gather information about DigitalOcean images\n\nArguments: image_type\n\nThis module can be used to gather information about DigitalOcean provided images.\nThese images can be either of type C(distribution), C(application) and C(private).\nThis module was called C(digital_ocean_image_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_load_balancer_info': 'Gather information about DigitalOcean load balancers\n\nArguments: load_balancer_id\n\nThis module can be used to gather information about DigitalOcean provided load balancers.\nThis module was called C(digital_ocean_load_balancer_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_region_info': 'Gather information about DigitalOcean regions\n\nArguments: \n\nThis module can be used to gather information about regions.\nThis module was called C(digital_ocean_region_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_size_info': 'Gather information about DigitalOcean Droplet sizes\n\nArguments: \n\nThis module can be used to gather information about droplet sizes.\nThis module was called C(digital_ocean_size_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_snapshot_info': 'Gather information about DigitalOcean Snapshot\n\nArguments: snapshot_type, snapshot_id\n\nThis module can be used to gather information about snapshot information based upon provided values such as droplet, volume and snapshot id.\nThis module was called C(digital_ocean_snapshot_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_sshkey': 'Manage DigitalOcean SSH keys\n\nArguments: state, fingerprint, oauth_token, ssh_pub_key, name\n\nCreate/delete DigitalOcean SSH keys.',
 'digital_ocean_sshkey_info': 'Gather information about DigitalOcean SSH keys\n\nArguments: \n\nThis module can be used to gather information about DigitalOcean SSH keys.\nThis module replaces the C(digital_ocean_sshkey_facts) module.',
 'digital_ocean_tag': 'Create and remove tag(s) to DigitalOcean resource.\n\nArguments: state, name, resource_type, resource_id\n\nCreate and remove tag(s) to DigitalOcean resource.',
 'digital_ocean_tag_info': 'Gather information about DigitalOcean tags\n\nArguments: tag_name\n\nThis module can be used to gather information about DigitalOcean provided tags.\nThis module was called C(digital_ocean_tag_facts) before Ansible 2.9. The usage did not change.',
 'digital_ocean_volume_info': 'Gather information about DigitalOcean volumes\n\nArguments: region_name\n\nThis module can be used to gather information about DigitalOcean provided volumes.\nThis module was called C(digital_ocean_volume_facts) before Ansible 2.9. The usage did not change.',
 'dimensiondata_network': 'Create, update, and delete MCP 1.0 & 2.0 networks\n\nArguments: service_plan, state, name, description\n\nCreate, update, and delete MCP 1.0 & 2.0 networks',
 'dimensiondata_vlan': 'Manage a VLAN in a Cloud Control network domain.\n\nArguments: private_ipv4_prefix_size, state, network_domain, name, private_ipv4_base_address, allow_expand, description\n\nManage VLANs in Cloud Control network domains.',
 'django_manage': 'Manages a Django application.\n\nArguments: virtualenv, app_path, settings, pythonpath, clear, database, apps, cache_table, merge, command, skip, link, fixtures, failfast\n\nManages a Django application using the I(manage.py) application frontend to I(django-admin). With the I(virtualenv) parameter, all management commands will be executed by the given I(virtualenv) installation.',
 'dladm_etherstub': 'Manage etherstubs on Solaris/illumos systems.\n\nArguments: state, temporary, name\n\nCreate or delete etherstubs on Solaris/illumos systems.',
 'dladm_iptun': 'Manage IP tunnel interfaces on Solaris/illumos systems.\n\nArguments: state, temporary, name, local_address, type, remote_address\n\nManage IP tunnel interfaces on Solaris/illumos systems.',
 'dladm_linkprop': 'Manage link properties on Solaris/illumos systems.\n\nArguments: link, state, property, temporary, value\n\nSet / reset link properties on Solaris/illumos systems.',
 'dladm_vlan': 'Manage VLAN interfaces on Solaris/illumos systems.\n\nArguments: link, state, temporary, name, vlan_id\n\nCreate or delete VLAN interfaces on Solaris/illumos systems.',
 'dladm_vnic': 'Manage VNICs on Solaris/illumos systems.\n\nArguments: state, temporary, name, link, vlan, mac\n\nCreate or delete VNICs on Solaris/illumos systems.',
 'dms_endpoint': 'creates or destroys a data migration services endpoint\n\nArguments: username, databasename, elasticsearchsettings, servername, dynamodbsettings, aws_region, serviceaccessrolearn, kmskeyid, dmstransfersettings, enginename, password, endpointidentifier, port, ec2_region, certificatearn, retries, region, tags, endpointtype, state, externaltabledefinition, extraconnectionattributes, timeout, sslmode, wait, mongodbsettings, kinesissettings, s3settings\n\ncreates or destroys a data migration services endpoint, that can be used to replicate data.',
 'dms_replication_subnet_group': 'creates or destroys a data migration services subnet group\n\nArguments: state, identifier, subnet_ids, description\n\nCreates or destroys a data migration services subnet group',
 'dnf': 'Manages packages with the I(dnf) package manager\n\nArguments: install_weak_deps, autoremove, lock_timeout, download_dir, install_repoquery, update_cache, disable_excludes, exclude, installroot, allow_downgrade, name, download_only, bugfix, list, disable_gpg_check, conf_file, update_only, validate_certs, state, disablerepo, releasever, disable_plugin, enablerepo, skip_broken, security, enable_plugin\n\nInstalls, upgrade, removes, and lists packages and groups with the I(dnf) package manager.',
 'dnsimple': 'Interface with dnsimple.com (a DNS hosting service)\n\nArguments: solo, domain, account_email, record_ids, value, priority, record, state, ttl, type, account_api_token\n\nManages domains and records via the DNSimple API, see the docs: U(http://developer.dnsimple.com/).',
 'dnsmadeeasy': 'Interface with dnsmadeeasy.com (a DNS hosting service).\n\nArguments: httpFqdn, domain, protocol, autoFailover, record_ttl, sensitivity, contactList, account_key, ip2, record_type, ip1, ip4, ip5, record_name, port, monitor, ip3, httpQueryString, failover, sandbox, maxEmails, state, systemDescription, record_value, httpFile, validate_certs, account_secret\n\nManages DNS records via the v2 REST API of the DNS Made Easy service.  It handles records only; there is no manipulation of domains or monitor/account support yet. See: U(https://www.dnsmadeeasy.com/integration/restapi/)\n',
 'docker_compose': 'Manage multi-container Docker applications with Docker Compose.\n\nArguments: files, project_name, project_src, hostname_check, recreate, dependencies, remove_images, services, pull, definition, scale, nocache, remove_orphans, restarted, state, remove_volumes, stopped, build, timeout\n\nUses Docker Compose to start, shutdown and scale services.\nWorks with compose versions 1 and 2.\nConfiguration can be read from a C(docker-compose.yml) or C(docker-compose.yaml) file or inline using the I(definition) option.\nSee the examples for more details.\nSupports check mode.\nThis module was called C(docker_service) before Ansible 2.8. The usage did not change.',
 'docker_config': "Manage docker configs.\n\nArguments: state, force, name, data_is_b64, labels, data\n\nCreate and remove Docker configs in a Swarm environment. Similar to C(docker config create) and C(docker config rm).\nAdds to the metadata of new configs 'ansible_key', an encrypted hash representation of the data, which is then used in future runs to test if a config has changed. If 'ansible_key' is not present, then a config will not be updated unless the I(force) option is set.\nUpdates to configs are performed by removing the config and creating it again.",
 'docker_container': 'manage docker containers\n\nArguments: tty, dns_servers, image, labels, pids_limit, cpuset_cpus, force_kill, pid_mode, networks_cli_compatible, networks, cpu_period, tmpfs, device_read_bps, domainname, working_dir, capabilities, init, memory_swap, mac_address, volumes_from, log_options, device_write_iops, recreate, ipc_mode, memory, memory_swappiness, network_mode, detach, restart, pull, name, stop_signal, devices, uts, blkio_weight, mounts, stop_timeout, cap_drop, ulimits, cpu_shares, interactive, links, oom_score_adj, command, paused, dns_search_domains, kernel_memory, env_file, cpu_quota, read_only, cpuset_mems, hostname, dns_opts, state, cleanup, entrypoint, env, healthcheck, keep_volumes, published_ports, privileged, exposed_ports, trust_image_content, auto_remove, log_driver, oom_killer, shm_size, kill_signal, volume_driver, restart_retries, groups, userns_mode, purge_networks, output_logs, ignore_image, device_read_iops, restart_policy, security_opts, etc_hosts, sysctls, memory_reservation, volumes, comparisons, runtime, device_write_bps, user\n\nManage the life cycle of docker containers.\nSupports check mode. Run with C(--check) and C(--diff) to view config difference and list of actions to be taken.',
 'docker_container_info': 'Retrieves facts about docker container\n\nArguments: name\n\nRetrieves facts about a docker container.\nEssentially returns the output of C(docker inspect <name>), similar to what M(docker_container) returns for a non-absent container.',
 'docker_host_info': 'Retrieves facts about docker host and lists of objects of the services.\n\nArguments: networks_filters, images_filters, disk_usage, volumes_filters, verbose_output, networks, volumes, images, containers_filters, containers\n\nRetrieves facts about a docker host.\nEssentially returns the output of C(docker system info).\nThe module also allows to list object names for containers, images, networks and volumes. It also allows to query information on disk usage.\nThe output differs depending on API version of the docker daemon.\nIf the docker daemon cannot be contacted or does not meet the API version requirements, the module will fail.',
 'docker_image': "Manage docker images.\n\nArguments: archive_path, force, repository, force_absent, tag, force_source, path, pull, name, nocache, container_limits, dockerfile, force_tag, load_path, use_tls, source, state, build, buildargs, push, rm, http_timeout\n\nBuild, load or pull an image, making the image available for creating containers. Also supports tagging an image into a repository and archiving an image to a .tar file.\nSince Ansible 2.8, it is recommended to explicitly specify the image's source (I(source) can be C(build), C(load), C(pull) or C(local)). This will be required from Ansible 2.12 on.",
 'docker_image_info': 'Inspect docker images\n\nArguments: name\n\nProvide one or more image names, and the module will inspect each, returning an array of inspection results.\nIf an image does not exist locally, it will not appear in the results. If you want to check whether an image exists locally, you can call the module with the image name, then check whether the result list is empty (image does not exist) or has one element (the image exists locally).\nThe module will not attempt to pull images from registries. Use M(docker_image) with I(source) set to C(pull) to ensure an image is pulled.',
 'docker_login': 'Log into a Docker registry.\n\nArguments: username, state, config_path, reauthorize, password, email, registry_url\n\nProvides functionality similar to the "docker login" command.\nAuthenticate with a docker registry and add the credentials to your local Docker config file. Adding the credentials to the config files allows future connections to the registry using tools such as Ansible\'s Docker modules, the Docker CLI and Docker SDK for Python without needing to provide credentials.\nRunning in check mode will perform the authentication without updating the config file.',
 'docker_network': 'Manage Docker networks\n\nArguments: force, ipam_config, labels, driver, driver_options, connected, ipam_driver, attachable, name, ipam_driver_options, enable_ipv6, ipam_options, state, internal, scope, appends\n\nCreate/remove Docker networks and connect containers to them.\nPerforms largely the same function as the "docker network" CLI subcommand.',
 'docker_network_info': 'Retrieves facts about docker network\n\nArguments: name\n\nRetrieves facts about a docker network.\nEssentially returns the output of C(docker network inspect <name>), similar to what M(docker_network) returns for a non-absent network.',
 'docker_node': "Manage Docker Swarm node\n\nArguments: labels, role, labels_state, labels_to_remove, hostname, availability\n\nManages the Docker nodes via Swarm Manager.\nThis module allows to change the node's role, its availability, and to modify, add or remove node labels.",
 'docker_node_info': 'Retrieves facts about docker swarm node from Swarm Manager\n\nArguments: self, name\n\nRetrieves facts about a docker node.\nEssentially returns the output of C(docker node inspect <name>).\nMust be executed on a host running as Swarm Manager, otherwise the module will fail.',
 'docker_prune': 'Allows to prune various docker objects\n\nArguments: networks_filters, images_filters, volumes_filters, builder_cache, networks, volumes, images, containers_filters, containers\n\nAllows to run C(docker container prune), C(docker image prune), C(docker network prune) and C(docker volume prune) via the Docker API.',
 'docker_secret': "Manage docker secrets.\n\nArguments: state, force, name, data_is_b64, labels, data\n\nCreate and remove Docker secrets in a Swarm environment. Similar to C(docker secret create) and C(docker secret rm).\nAdds to the metadata of new secrets 'ansible_key', an encrypted hash representation of the data, which is then used in future runs to test if a secret has changed. If 'ansible_key is not present, then a secret will not be updated unless the I(force) option is set.\nUpdates to secrets are performed by removing the secret and creating it again.",
 'docker_stack': "docker stack module\n\nArguments: compose, name, resolve_image, state, absent_retries_interval, with_registry_auth, absent_retries, prune\n\nManage docker stacks using the 'docker stack' command on the target node (see examples).",
 'docker_swarm': 'Manage Swarm cluster\n\nArguments: rotate_worker_token, force, snapshot_interval, node_cert_expiry, election_tick, labels, node_id, dispatcher_heartbeat_period, ca_force_rotate, subnet_size, advertise_addr, task_history_retention_limit, log_entries_for_slow_followers, join_token, name, heartbeat_tick, listen_addr, keep_old_snapshots, state, rotate_manager_token, signing_ca_cert, autolock_managers, signing_ca_key, remote_addrs, default_addr_pool\n\nCreate a new Swarm cluster.\nAdd/Remove nodes or managers to an existing cluster.',
 'docker_swarm_info': 'Retrieves facts about Docker Swarm cluster.\n\nArguments: tasks, services_filters, verbose_output, nodes_filters, tasks_filters, services, nodes, unlock_key\n\nRetrieves facts about a Docker Swarm.\nReturns lists of swarm objects names for the services - nodes, services, tasks.\nThe output differs depending on API version available on docker host.\nMust be run on Swarm Manager node; otherwise module fails with error message. It does return boolean flags in on both error and success which indicate whether the docker daemon can be communicated with, whether it is in Swarm mode, and whether it is a Swarm Manager node.',
 'docker_swarm_service': 'docker swarm service\n\nArguments: tty, reserve_memory, update_max_failure_ratio, reservations, image, labels, restart_policy_window, networks, read_only, dns_options, log_driver_options, hostname, state, publish, update_config, working_dir, env, healthcheck, command, update_monitor, rollback_config, update_delay, log_driver, endpoint_mode, resolve_image, replicas, args, env_files, limit_memory, limit_cpu, user, groups, reserve_cpu, logging, configs, restart_policy, restart_config, limits, dns, placement, name, stop_grace_period, stop_signal, update_parallelism, force_update, restart_policy_attempts, dns_search, update_failure_action, secrets, restart_policy_delay, hosts, mode, mounts, update_order, constraints, container_labels\n\nManages docker services via a swarm manager node.',
 'docker_swarm_service_info': 'Retrieves information about docker services from a Swarm Manager\n\nArguments: name\n\nRetrieves information about a docker service.\nEssentially returns the output of C(docker service inspect <name>).\nMust be executed on a host running as Swarm Manager, otherwise the module will fail.',
 'docker_volume': 'Manage Docker volumes\n\nArguments: state, labels, force, volume_name, driver_options, recreate, driver\n\nCreate/remove Docker volumes.\nPerforms largely the same function as the "docker volume" CLI subcommand.',
 'docker_volume_info': 'Retrieve facts about Docker volumes\n\nArguments: name\n\nPerforms largely the same function as the "docker volume inspect" CLI subcommand.',
 'dpkg_selections': 'Dpkg package selection selections\n\nArguments: selection, name\n\nChange dpkg package selection state via --get-selections and --set-selections.',
 'dynamodb_table': 'Create, update or delete AWS Dynamo DB tables.\n\nArguments: read_capacity, hash_key_name, range_key_type, name, tags, write_capacity, indexes, range_key_name, state, wait_for_active_timeout, hash_key_type\n\nCreate or delete AWS Dynamo DB tables.\nCan update the provisioned throughput on existing tables.\nReturns the status of the specified table.',
 'dynamodb_ttl': 'set TTL for a given DynamoDB table.\n\nArguments: table_name, state, attribute_name\n\nUses boto3 to set TTL.\nrequires botocore version 1.5.24 or higher.',
 'easy_install': 'Installs Python libraries\n\nArguments: virtualenv, virtualenv_site_packages, virtualenv_command, name, state, executable\n\nInstalls Python libraries, optionally in a I(virtualenv)',
 'ec2': 'create, terminate, start or stop an instance in ec2\n\nArguments: kernel, image, monitoring, user_data, termination_protection, private_ip, spot_type, id, source_dest_check, spot_wait_timeout, group, zone, exact_count, ebs_optimized, state, placement_group, key_name, ramdisk, count_tag, spot_launch_group, vpc_subnet_id, instance_ids, tenancy, assign_public_ip, spot_price, wait, count, instance_profile_name, region, network_interfaces, instance_initiated_shutdown_behavior, instance_type, wait_timeout, volumes, instance_tags, group_id\n\nCreates or terminates ec2 instances.',
 'ec2_ami': 'create or destroy an image in ec2\n\nArguments: image_location, description, tags, enhanced_networking, purge_tags, launch_permissions, ramdisk_id, image_id, no_reboot, wait_timeout, wait, name, delete_snapshot, billing_products, instance_id, kernel_id, state, architecture, device_mapping, virtualization_type, sriov_net_support, root_device_name\n\nRegisters or deregisters ec2 images.',
 'ec2_ami_copy': 'copies AMI between AWS regions, return new image id\n\nArguments: name, tags, encrypted, description, kms_key_id, source_image_id, tag_equality, wait_timeout, source_region, wait\n\nCopies AMI from a source region to a destination region. B(Since version 2.3 this module depends on boto3.)',
 'ec2_ami_info': 'Gather information about ec2 AMIs\n\nArguments: image_ids, owners, describe_image_attributes, filters, executable_users\n\nGather information about ec2 AMIs\nThis module was called C(ec2_ami_facts) before Ansible 2.9. The usage did not change.',
 'ec2_asg': 'Create or delete AWS Autoscaling Groups\n\nArguments: health_check_type, target_group_arns, default_cooldown, tags, metrics_list, min_size, wait_timeout, launch_template, health_check_period, load_balancers, launch_config_name, name, metrics_collection, lc_check, availability_zones, replace_batch_size, replace_all_instances, metrics_granularity, suspend_processes, termination_policies, replace_instances, desired_capacity, state, vpc_zone_identifier, max_size, placement_group, notification_topic, notification_types, wait_for_instances, lt_check\n\nCan create or delete AWS Autoscaling Groups\nCan be used with the ec2_lc module to manage Launch Configurations',
 'ec2_asg_info': 'Gather information about ec2 Auto Scaling Groups (ASGs) in AWS\n\nArguments: name, tags\n\nGather information about ec2 Auto Scaling Groups (ASGs) in AWS\nThis module was called C(ec2_asg_facts) before Ansible 2.9. The usage did not change.',
 'ec2_asg_lifecycle_hook': 'Create, delete or update AWS ASG Lifecycle Hooks.\n\nArguments: lifecycle_hook_name, role_arn, autoscaling_group_name, transition, heartbeat_timeout, state, notification_target_arn, default_result, notification_meta_data\n\nWhen no given Hook found, will create one.\nIn case Hook found, but provided parameters are differes, will update existing Hook.\nIn case state=absent and Hook exists, will delete it.',
 'ec2_customer_gateway': 'Manage an AWS customer gateway\n\nArguments: state, bgp_asn, ip_address, routing, name\n\nManage an AWS customer gateway',
 'ec2_customer_gateway_info': 'Gather information about customer gateways in AWS\n\nArguments: customer_gateway_ids, filters\n\nGather information about customer gateways in AWS\nThis module was called C(ec2_customer_gateway_facts) before Ansible 2.9. The usage did not change.',
 'ec2_eip': 'manages EC2 elastic IP (EIP) addresses.\n\nArguments: release_on_disassociation, public_ip, state, reuse_existing_ip_allowed, allow_reassociation, tag_value, public_ipv4_pool, tag_name, in_vpc, private_ip_address, device_id\n\nThis module can allocate or release an EIP.\nThis module can associate/disassociate an EIP with instances or network interfaces.',
 'ec2_eip_info': 'List EC2 EIP details\n\nArguments: filters\n\nList details of EC2 Elastic IP addresses.\nThis module was called C(ec2_eip_facts) before Ansible 2.9. The usage did not change.',
 'ec2_elb': 'De-registers or registers instances from EC2 ELBs\n\nArguments: instance_id, state, wait_timeout, wait, validate_certs, enable_availability_zone, ec2_elbs\n\nThis module de-registers or registers an AWS EC2 instance from the ELBs that it belongs to.\nReturns fact "ec2_elbs" which is a list of elbs attached to the instance if state=absent is passed as an argument.\nWill be marked changed when called only if there are ELBs found to operate on.',
 'ec2_elb_info': 'Gather information about EC2 Elastic Load Balancers in AWS\n\nArguments: names\n\nGather information about EC2 Elastic Load Balancers in AWS\nThis module was called C(ec2_elb_facts) before Ansible 2.9. The usage did not change.',
 'ec2_elb_lb': 'Creates, updates or destroys an Amazon ELB.\n\nArguments: subnets, health_check, tags, purge_subnets, instance_ids, zones, idle_timeout, wait_timeout, cross_az_load_balancing, security_group_ids, purge_zones, wait, purge_instance_ids, connection_draining_timeout, name, listeners, access_logs, state, security_group_names, purge_listeners, scheme, validate_certs, stickiness\n\nReturns information about the load balancer.\nWill be marked changed when called only if state is changed.',
 'ec2_eni': "Create and optionally attach an Elastic Network Interface (ENI) to an instance\n\nArguments: allow_reassignment, description, purge_secondary_private_ip_addresses, source_dest_check, secondary_private_ip_addresses, subnet_id, device_index, attached, force_detach, instance_id, state, security_groups, private_ip_address, secondary_private_ip_address_count, eni_id, delete_on_termination\n\nCreate and optionally attach an Elastic Network Interface (ENI) to an instance. If an ENI ID or private_ip is provided, the existing ENI (if any) will be modified. The 'attached' parameter controls the attachment status of the network interface.",
 'ec2_eni_info': 'Gather information about ec2 ENI interfaces in AWS\n\nArguments: filters\n\nGather information about ec2 ENI interfaces in AWS\nThis module was called C(ec2_eni_facts) before Ansible 2.9. The usage did not change.',
 'ec2_group': 'maintain an ec2 VPC security group.\n\nArguments: rules_egress, name, purge_rules, tags, rules, purge_tags, description, state, vpc_id, group_id, purge_rules_egress\n\nmaintains ec2 security groups. This module has a dependency on python-boto >= 2.5',
 'ec2_group_info': 'Gather information about ec2 security groups in AWS.\n\nArguments: filters\n\nGather information about ec2 security groups in AWS.\nThis module was called C(ec2_group_facts) before Ansible 2.9. The usage did not change.',
 'ec2_instance': 'Create & manage EC2 instances\n\nArguments: volumes, availability_zone, purge_tags, image, vpc_subnet_id, user_data, instance_ids, tower_callback, image_id, termination_protection, tenancy, launch_template, filters, security_groups, wait, instance_role, network, wait_timeout, ebs_optimized, cpu_credit_specification, instance_initiated_shutdown_behavior, name, instance_type, state, tags, placement_group, key_name, security_group, cpu_options, detailed_monitoring\n\nCreate and manage AWS EC2 instance',
 'ec2_instance_info': 'Gather information about ec2 instances in AWS\n\nArguments: instance_ids, filters\n\nGather information about ec2 instances in AWS\nThis module was called C(ec2_instance_facts) before Ansible 2.9. The usage did not change.',
 'ec2_key': 'create or delete an ec2 key pair\n\nArguments: state, wait_timeout, force, name, wait, key_material\n\ncreate or delete an ec2 key pair.',
 'ec2_launch_template': 'Manage EC2 launch templates\n\nArguments: default_version, network_interfaces, tags, kernel_id, template_name, user_data, instance_initiated_shutdown_behavior, image_id, cpu_options, ram_disk_id, placement, security_group_ids, security_groups, block_device_mappings, elastic_gpu_specifications, monitoring, credit_specification, ebs_optimized, iam_instance_profile, instance_type, state, disable_api_termination, instance_market_options, template_id, key_name\n\nCreate, modify, and delete EC2 Launch Templates, which can be used to create individual instances or with Autoscaling Groups.\nThe I(ec2_instance) and I(ec2_asg) modules can, instead of specifying all parameters on those tasks, be passed a Launch Template which contains settings like instance size, disk type, subnet, and more.',
 'ec2_lc': 'Create or delete AWS Autoscaling Launch Configurations\n\nArguments: kernel_id, key_name, ramdisk_id, user_data, image_id, assign_public_ip, instance_monitoring, classic_link_vpc_id, security_groups, classic_link_vpc_security_groups, spot_price, name, instance_profile_name, user_data_path, ebs_optimized, instance_id, instance_type, state, volumes, vpc_id, placement_tenancy\n\nCan create or delete AWS Autoscaling Configurations\nWorks with the ec2_asg module to manage Autoscaling Groups',
 'ec2_lc_find': 'Find AWS Autoscaling Launch Configurations\n\nArguments: sort_order, region, name_regex, limit\n\nReturns list of matching Launch Configurations for a given name, along with other useful information\nResults can be sorted and sliced\nIt depends on boto\nBased on the work by Tom Bamford (https://github.com/tombamford)',
 'ec2_lc_info': 'Gather information about AWS Autoscaling Launch Configurations\n\nArguments: sort, sort_end, sort_order, name, sort_start\n\nGather information about AWS Autoscaling Launch Configurations\nThis module was called C(ec2_lc_facts) before Ansible 2.9. The usage did not change.',
 'ec2_metadata_facts': 'Gathers facts (instance metadata) about remote hosts within ec2\n\nArguments: \n\nThis module fetches data from the instance metadata endpoint in ec2 as per U(https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html). The module must be called from within the EC2 instance itself.',
 'ec2_metric_alarm': "Create/update or delete AWS Cloudwatch 'metric alarms'\n\nArguments: comparison, alarm_actions, ok_actions, name, evaluation_periods, metric, description, namespace, period, state, insufficient_data_actions, statistic, threshold, unit, dimensions\n\nCan create or delete AWS metric alarms.\nMetrics you wish to alarm on must already exist.",
 'ec2_placement_group': 'Create or delete an EC2 Placement Group\n\nArguments: state, name, strategy\n\nCreate an EC2 Placement Group; if the placement group already exists, nothing is done. Or, delete an existing placement group. If the placement group is absent, do nothing. See also U(https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html)',
 'ec2_placement_group_info': 'List EC2 Placement Group(s) details\n\nArguments: names\n\nList details of EC2 Placement Group(s).\nThis module was called C(ec2_placement_group_facts) before Ansible 2.9. The usage did not change.',
 'ec2_scaling_policy': 'Create or delete AWS scaling policies for Autoscaling groups\n\nArguments: state, cooldown, name, asg_name, adjustment_type, min_adjustment_step, scaling_adjustment\n\nCan create or delete scaling policies for autoscaling groups\nReferenced autoscaling groups must already exist',
 'ec2_snapshot': 'creates a snapshot from an existing volume\n\nArguments: description, snapshot_tags, volume_id, device_name, instance_id, state, wait_timeout, snapshot_id, last_snapshot_min_age, wait\n\ncreates an EC2 snapshot from an existing EBS volume',
 'ec2_snapshot_copy': 'copies an EC2 snapshot and returns the new Snapshot ID.\n\nArguments: description, tags, encrypted, kms_key_id, wait_timeout, source_region, source_snapshot_id, wait\n\nCopies an EC2 Snapshot from a source region to a destination region.',
 'ec2_snapshot_info': 'Gather information about ec2 volume snapshots in AWS\n\nArguments: restorable_by_user_ids, snapshot_ids, filters, owner_ids\n\nGather information about ec2 volume snapshots in AWS\nThis module was called C(ec2_snapshot_facts) before Ansible 2.9. The usage did not change.',
 'ec2_tag': 'create and remove tags on ec2 resources.\n\nArguments: purge_tags, state, resource, tags\n\nCreates, removes and lists tags for any EC2 resource.  The resource is referenced by its resource id (e.g. an instance being i-XXXXXXX). It is designed to be used with complex args (tags), see the examples.',
 'ec2_transit_gateway': 'Create and delete AWS Transit Gateways.\n\nArguments: transit_gateway_id, description, dns_support, tags, purge_tags, state, wait_timeout, auto_attach, auto_associate, auto_propagate, vpn_ecmp_support, asn, wait\n\nCreates AWS Transit Gateways\nDeletes AWS Transit Gateways\nUpdates tags on existing transit gateways',
 'ec2_transit_gateway_info': 'Gather information about ec2 transit gateways in AWS\n\nArguments: transit_gateway_ids, filters\n\nGather information about ec2 transit gateways in AWS',
 'ec2_vol': 'create and attach a volume, return volume id and device map\n\nArguments: name, zone, instance, encrypted, kms_key_id, volume_type, device_name, volume_size, state, iops, snapshot, id, validate_certs, delete_on_termination, tags\n\ncreates an EBS volume and optionally attaches it to an instance. If both an instance ID and a device name is given and the instance has a device at the device name, then no volume is created and no attachment is made. This module has a dependency on python-boto.',
 'ec2_vol_info': 'Gather information about ec2 volumes in AWS\n\nArguments: filters\n\nGather information about ec2 volumes in AWS\nThis module was called C(ec2_vol_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_dhcp_option': "Manages DHCP Options, and can ensure the DHCP options for the given VPC match what's requested\n\nArguments: dns_servers, tags, ntp_servers, domain_name, delete_old, state, netbios_node_type, vpc_id, inherit_existing, dhcp_options_id, netbios_name_servers\n\nThis module removes, or creates DHCP option sets, and can associate them to a VPC. Optionally, a new DHCP Options set can be created that converges a VPC's existing DHCP option set with values provided. When dhcp_options_id is provided, the module will 1. remove (with state='absent') 2. ensure tags are applied (if state='present' and tags are provided 3. attach it to a VPC (if state='present' and a vpc_id is provided. If any of the optional values are missing, they will either be treated as a no-op (i.e., inherit what already exists for the VPC) To remove existing options while inheriting, supply an empty value (e.g. set ntp_servers to [] if you want to remove them from the VPC's options) Most of the options should be self-explanatory.",
 'ec2_vpc_dhcp_option_info': 'Gather information about dhcp options sets in AWS\n\nArguments: dhcp_options_ids, filters\n\nGather information about dhcp options sets in AWS\nThis module was called C(ec2_vpc_dhcp_option_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_egress_igw': 'Manage an AWS VPC Egress Only Internet gateway\n\nArguments: vpc_id, state\n\nManage an AWS VPC Egress Only Internet gateway',
 'ec2_vpc_endpoint': 'Create and delete AWS VPC Endpoints.\n\nArguments: policy_file, service, state, vpc_endpoint_id, wait_timeout, policy, vpc_id, client_token, route_table_ids, wait\n\nCreates AWS VPC endpoints.\nDeletes AWS VPC endpoints.\nThis module support check mode.',
 'ec2_vpc_endpoint_info': 'Retrieves AWS VPC endpoints details using AWS methods.\n\nArguments: query, vpc_endpoint_ids, filters\n\nGets various details related to AWS VPC Endpoints\nThis module was called C(ec2_vpc_endpoint_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_igw': 'Manage an AWS VPC Internet gateway\n\nArguments: vpc_id, state, tags\n\nManage an AWS VPC Internet gateway',
 'ec2_vpc_igw_info': 'Gather information about internet gateways in AWS\n\nArguments: filters, internet_gateway_ids\n\nGather information about internet gateways in AWS.\nThis module was called C(ec2_vpc_igw_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_nacl': 'create and delete Network ACLs.\n\nArguments: subnets, ingress, name, tags, state, egress, vpc_id, nacl_id\n\nRead the AWS documentation for Network ACLS U(https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html)',
 'ec2_vpc_nacl_info': 'Gather information about Network ACLs in an AWS VPC\n\nArguments: nacl_ids, filters\n\nGather information about Network ACLs in an AWS VPC\nThis module was called C(ec2_vpc_nacl_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_nat_gateway': 'Manage AWS VPC NAT Gateways.\n\nArguments: release_eip, nat_gateway_id, allocation_id, subnet_id, if_exist_do_not_create, eip_address, state, wait_timeout, client_token, wait\n\nEnsure the state of AWS VPC NAT Gateways based on their id, allocation and subnet ids.',
 'ec2_vpc_nat_gateway_info': 'Retrieves AWS VPC Managed Nat Gateway details using AWS methods.\n\nArguments: nat_gateway_ids, filters\n\nGets various details related to AWS VPC Managed Nat Gateways\nThis module was called C(ec2_vpc_nat_gateway_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_net': 'Configure AWS virtual private clouds\n\nArguments: purge_cidrs, name, dns_support, tags, multi_ok, state, tenancy, dns_hostnames, cidr_block, dhcp_opts_id\n\nCreate, modify, and terminate AWS virtual private clouds.',
 'ec2_vpc_net_info': 'Gather information about ec2 VPCs in AWS\n\nArguments: vpc_ids, filters\n\nGather information about ec2 VPCs in AWS\nThis module was called C(ec2_vpc_net_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_peer': 'create, delete, accept, and reject VPC peering connections between two VPCs.\n\nArguments: state, peering_id, tags, peer_region, vpc_id, peer_vpc_id, peer_owner_id\n\nRead the AWS documentation for VPC Peering Connections U(https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-peering.html).',
 'ec2_vpc_peering_info': 'Retrieves AWS VPC Peering details using AWS methods.\n\nArguments: peer_connection_ids, filters\n\nGets various details related to AWS VPC Peers\nThis module was called C(ec2_vpc_peering_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_route_table': 'Manage route tables for AWS virtual private clouds\n\nArguments: subnets, tags, purge_tags, purge_subnets, purge_routes, route_table_id, state, lookup, routes, vpc_id, propagating_vgw_ids\n\nManage route tables for AWS virtual private clouds',
 'ec2_vpc_route_table_info': 'Gather information about ec2 VPC route tables in AWS\n\nArguments: filters\n\nGather information about ec2 VPC route tables in AWS\nThis module was called C(ec2_vpc_route_table_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_subnet': 'Manage subnets in AWS virtual private clouds\n\nArguments: az, ipv6_cidr, tags, purge_tags, state, wait_timeout, map_public, vpc_id, cidr, assign_instances_ipv6, wait\n\nManage subnets in AWS virtual private clouds',
 'ec2_vpc_subnet_info': 'Gather information about ec2 VPC subnets in AWS\n\nArguments: subnet_ids, filters\n\nGather information about ec2 VPC subnets in AWS\nThis module was called C(ec2_vpc_subnet_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_vgw': 'Create and delete AWS VPN Virtual Gateways.\n\nArguments: name, tags, state, wait_timeout, vpc_id, vpn_gateway_id, type, asn\n\nCreates AWS VPN Virtual Gateways\nDeletes AWS VPN Virtual Gateways\nAttaches Virtual Gateways to VPCs\nDetaches Virtual Gateways from VPCs',
 'ec2_vpc_vgw_info': 'Gather information about virtual gateways in AWS\n\nArguments: vpn_gateway_ids, filters\n\nGather information about virtual gateways in AWS.\nThis module was called C(ec2_vpc_vgw_facts) before Ansible 2.9. The usage did not change.',
 'ec2_vpc_vpn': 'Create, modify, and delete EC2 VPN connections.\n\nArguments: connection_type, customer_gateway_id, tags, purge_tags, tunnel_options, state, delay, purge_routes, wait_timeout, vpn_connection_id, filters, routes, vpn_gateway_id, static_only\n\nThis module creates, modifies, and deletes VPN connections. Idempotence is achieved by using the filters option or specifying the VPN connection identifier.',
 'ec2_vpc_vpn_info': 'Gather information about VPN Connections in AWS.\n\nArguments: filters, vpn_connection_ids\n\nGather information about VPN Connections in AWS.\nThis module was called C(ec2_vpc_vpn_facts) before Ansible 2.9. The usage did not change.',
 'ec2_win_password': 'gets the default administrator password for ec2 windows instances\n\nArguments: key_data, instance_id, key_passphrase, wait_timeout, key_file, wait\n\nGets the default administrator password from any EC2 Windows instance. The instance is referenced by its id (e.g. C(i-XXXXXXX)). This module has a dependency on python-boto.',
 'ecs_attribute': 'manage ecs attributes\n\nArguments: cluster, state, ec2_instance_id, attributes\n\nCreate, update or delete ECS container instance attributes.',
 'ecs_certificate': 'Request SSL/TLS certificates with the Entrust Certificate Services (ECS) API\n\nArguments: requester_email, force, full_chain_path, subject_alt_name, cert_lifetime, end_user_key_storage_agreement, cert_type, request_type, client_id, org, path, remaining_days, eku, custom_fields, additional_emails, cert_expiry, requester_name, tracking_info, requester_phone, tracking_id, ct_log, ou, backup, csr\n\nCreate, reissue, and renew certificates with the Entrust Certificate Services (ECS) API.\nRequires credentials for the L(Entrust Certificate Services,https://www.entrustdatacard.com/products/categories/ssl-certificates) (ECS) API.\nIn order to request a certificate, the domain and organization used in the certificate signing request must be already validated in the ECS system. It is I(not) the responsibility of this module to perform those steps.',
 'ecs_cluster': 'create or terminate ecs clusters\n\nArguments: delay, state, repeat, name\n\nCreates or terminates ecs clusters.',
 'ecs_ecr': 'Manage Elastic Container Registry repositories\n\nArguments: force_set_policy, state, name, policy, registry_id, delete_policy\n\nManage Elastic Container Registry repositories',
 'ecs_service': 'create, terminate, start or stop a service in ecs\n\nArguments: repeat, network_configuration, health_check_grace_period_seconds, desired_count, cluster, deployment_configuration, scheduling_strategy, load_balancers, force_new_deployment, name, placement_constraints, state, delay, task_definition, service_registries, role, client_token, placement_strategy, launch_type\n\nCreates or terminates ecs services.',
 'ecs_service_info': 'list or describe services in ecs\n\nArguments: cluster, details, service, events\n\nLists or describes services in ecs.\nThis module was called C(ecs_service_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ecs_service_info) module no longer returns C(ansible_facts)!',
 'ecs_task': 'run, start or stop a task in ecs\n\nArguments: count, task, network_configuration, overrides, started_by, cluster, task_definition, container_instances, operation, launch_type\n\nCreates or deletes instances of task definitions.',
 'ecs_taskdefinition': 'register a task definition in ecs\n\nArguments: family, task_role_arn, force_create, execution_role_arn, network_mode, state, containers, volumes, memory, revision, cpu, arn, launch_type\n\nRegisters or deregisters task definitions in the Amazon Web Services (AWS) EC2 Container Service (ECS)',
 'ecs_taskdefinition_info': 'describe a task definition in ecs\n\nArguments: task_definition\n\nDescribes a task definition in ecs.',
 'edgeos_command': 'Run one or more commands on EdgeOS devices\n\nArguments: retries, commands, wait_for, match, interval\n\nThis command module allows running one or more commands on a remote device running EdgeOS, such as the Ubiquiti EdgeRouter.\nThis module does not support running commands in configuration mode.\nCertain C(show) commands in EdgeOS produce many lines of output and use a custom pager that can cause this module to hang.  If the value of the environment variable C(ANSIBLE_EDGEOS_TERMINAL_LENGTH) is not set, the default number of 10000 is used.\nThis is a network module and requires C(connection: network_cli) in order to work properly.\nFor more information please see the L(Network Guide,../network/getting_started/index.html).',
 'edgeos_config': 'Manage EdgeOS configuration on remote device\n\nArguments: comment, src, backup_options, config, lines, save, backup, match\n\nThis module provides configuration file management of EdgeOS devices. It provides arguments for managing both the configuration file and state of the active configuration. All configuration statements are based on `set` and `delete` commands in the device configuration.\nThis is a network module and requires the C(connection: network_cli) in order to work properly.\nFor more information please see the L(Network Guide,../network/getting_started/index.html).',
 'edgeos_facts': 'Collect facts from remote devices running EdgeOS\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running EdgeOS. This module prepends all of the base network fact keys with U(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'edgeswitch_facts': 'Collect facts from remote devices running Edgeswitch\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running Ubiquiti Edgeswitch.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'edgeswitch_vlan': 'Manage VLANs on Ubiquiti Edgeswitch network devices\n\nArguments: auto_tag, name, untagged_interfaces, auto_exclude, excluded_interfaces, purge, state, tagged_interfaces, aggregate, auto_untag, vlan_id\n\nThis module provides declarative management of VLANs on Ubiquiti Edgeswitch network devices.',
 'efs': 'create and maintain EFS file systems\n\nArguments: encrypt, name, tags, purge_tags, kms_key_id, provisioned_throughput_in_mibps, id, state, wait_timeout, throughput_mode, performance_mode, targets, wait\n\nModule allows create, search and destroy Amazon EFS file systems',
 'efs_info': 'Get information about Amazon EFS file systems\n\nArguments: id, targets, name, tags\n\nThis module can be used to search Amazon EFS file systems.\nThis module was called C(efs_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(efs_info) module no longer returns C(ansible_facts)!',
 'ejabberd_user': 'Manages users for ejabberd servers\n\nArguments: username, host, password, logging, state\n\nThis module provides user management for ejabberd servers',
 'elasticache': 'Manage cache clusters in Amazon Elasticache.\n\nArguments: engine, cache_port, cache_parameter_group, name, cache_engine_version, state, node_type, num_nodes, zone, cache_security_groups, cache_subnet_group, hard_modify, security_group_ids, wait\n\nManage cache clusters in Amazon Elasticache.\nReturns information about the specified cache cluster.',
 'elasticache_info': 'Retrieve information for AWS Elasticache clusters\n\nArguments: name\n\nRetrieve information from AWS Elasticache clusters\nThis module was called C(elasticache_facts) before Ansible 2.9. The usage did not change.',
 'elasticache_parameter_group': 'Manage cache security groups in Amazon Elasticache.\n\nArguments: group_family, state, values, name, description\n\nManage cache security groups in Amazon Elasticache.\nReturns information about the specified cache cluster.',
 'elasticache_snapshot': 'Manage cache snapshots in Amazon Elasticache.\n\nArguments: state, replication_id, name, cluster_id, bucket, target\n\nManage cache snapshots in Amazon Elasticache.\nReturns information about the specified snapshot.',
 'elasticache_subnet_group': 'manage Elasticache subnet groups\n\nArguments: subnets, state, name, description\n\nCreates, modifies, and deletes Elasticache subnet groups. This module has a dependency on python-boto >= 2.5.',
 'elasticsearch_plugin': 'Manage Elasticsearch plugins\n\nArguments: src, force, name, proxy_host, url, proxy_port, state, version, timeout, plugin_dir, plugin_bin\n\nManages Elasticsearch plugins.',
 'elb_application_lb': 'Manage an Application load balancer\n\nArguments: subnets, purge_rules, tags, purge_tags, idle_timeout, wait_timeout, access_logs_s3_prefix, security_groups, wait, access_logs_enabled, access_logs_s3_bucket, listeners, name, state, deletion_protection, purge_listeners, http2, scheme\n\nManage an AWS Application Elastic Load Balancer. See U(https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/) for details.',
 'elb_application_lb_info': 'Gather information about application ELBs in AWS\n\nArguments: names, load_balancer_arns\n\nGather information about application ELBs in AWS\nThis module was called C(elb_application_lb_facts) before Ansible 2.9. The usage did not change.',
 'elb_classic_lb': 'Creates or destroys Amazon ELB.\n\nArguments: subnets, health_check, tags, purge_subnets, instance_ids, zones, idle_timeout, wait_timeout, cross_az_load_balancing, security_group_ids, purge_zones, wait, purge_instance_ids, connection_draining_timeout, name, listeners, access_logs, state, security_group_names, purge_listeners, scheme, validate_certs, stickiness\n\nReturns information about the load balancer.\nWill be marked changed when called only if state is changed.',
 'elb_classic_lb_info': 'Gather information about EC2 Elastic Load Balancers in AWS\n\nArguments: names\n\nGather information about EC2 Elastic Load Balancers in AWS\nThis module was called C(elb_classic_lb_facts) before Ansible 2.9. The usage did not change.',
 'elb_instance': 'De-registers or registers instances from EC2 ELBs\n\nArguments: instance_id, state, wait_timeout, wait, validate_certs, enable_availability_zone, ec2_elbs\n\nThis module de-registers or registers an AWS EC2 instance from the ELBs that it belongs to.\nReturns fact "ec2_elbs" which is a list of elbs attached to the instance if state=absent is passed as an argument.\nWill be marked changed when called only if there are ELBs found to operate on.',
 'elb_network_lb': 'Manage a Network Load Balancer\n\nArguments: subnets, name, tags, purge_tags, listeners, deletion_protection, state, wait_timeout, purge_listeners, cross_zone_load_balancing, scheme, subnet_mappings, wait\n\nManage an AWS Network Elastic Load Balancer. See U(https://aws.amazon.com/blogs/aws/new-network-load-balancer-effortless-scaling-to-millions-of-requests-per-second/) for details.',
 'elb_target': 'Manage a target in a target group\n\nArguments: target_status_timeout, target_id, target_group_name, state, target_group_arn, target_port, target_status, deregister_unused, target_az\n\nUsed to register or deregister a target in a target group',
 'elb_target_group': 'Manage a target group for an Application or Network load balancer\n\nArguments: protocol, tags, purge_tags, health_check_port, successful_response_codes, wait_timeout, health_check_interval, modify_targets, healthy_threshold_count, targets, health_check_path, health_check_protocol, unhealthy_threshold_count, stickiness_type, name, target_type, port, stickiness_lb_cookie_duration, state, stickiness_enabled, vpc_id, deregistration_delay_timeout, wait, health_check_timeout\n\nManage an AWS Elastic Load Balancer target group. See U(https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html) or U(https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html) for details.',
 'elb_target_group_info': 'Gather information about ELB target groups in AWS\n\nArguments: collect_targets_health, target_group_arns, load_balancer_arn, names\n\nGather information about ELB target groups in AWS\nThis module was called C(elb_target_group_facts) before Ansible 2.9. The usage did not change.',
 'elb_target_info': 'Gathers which target groups a target is associated with.\n\nArguments: instance_id, get_unused_target_groups\n\nThis module will search through every target group in a region to find which ones have registered a given instance ID or IP.\nThis module was called C(elb_target_facts) before Ansible 2.9. The usage did not change.',
 'emc_vnx_sg_member': 'Manage storage group member on EMC VNX\n\nArguments: state, lunid, name\n\nThis module manages the members of an existing storage group.',
 'enos_command': 'Run arbitrary commands on Lenovo ENOS devices\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an ENOS node and returns the results read from the device. The C(enos_command) module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'enos_config': 'Manage Lenovo ENOS configuration sections\n\nArguments: comment, src, backup_options, admin, config, after, lines, replace, parents, backup, match, before\n\nLenovo ENOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with ENOS configuration sections in a deterministic way.',
 'enos_facts': 'Collect facts from remote devices running Lenovo ENOS\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote Lenovo device running on ENOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'eos_banner': 'Manage multiline banners on Arista EOS devices\n\nArguments: text, state, banner\n\nThis will configure both login and motd banners on remote devices running Arista EOS.  It allows playbooks to add or remote banner text from the active running configuration.',
 'eos_bgp': 'Configure global BGP protocol settings on Arista EOS.\n\nArguments: operation, config\n\nThis module provides configuration management of global BGP parameters on Arista EOS devices.',
 'eos_command': 'Run arbitrary commands on an Arista EOS device\n\nArguments: retries, commands, wait_for, match, interval\n\nSends an arbitrary set of commands to an EOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'eos_config': 'Manage Arista EOS configuration sections\n\nArguments: src, backup_options, after, lines, intended_config, diff_against, parents, save_when, defaults, before, running_config, replace, backup, match, diff_ignore_lines\n\nArista EOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with EOS configuration sections in a deterministic way.  This module works with either CLI or eAPI transports.',
 'eos_eapi': 'Manage and configure Arista EOS eAPI.\n\nArguments: local_http_port, http_port, http, https_port, state, vrf, https, config, local_http, socket\n\nUse to enable or disable eAPI access, and set the port and state of http, https, local_http and unix-socket servers.\nWhen enabling eAPI access the default is to enable HTTP on port 80, enable HTTPS on port 443, disable local HTTP, and disable Unix socket server. Use the options listed below to override the default configuration.\nRequires EOS v4.12 or greater.',
 'eos_facts': 'Collect facts from remote devices running Arista EOS\n\nArguments: gather_subset, gather_network_resources\n\nCollects facts from Arista devices running the EOS operating system. This module places the facts gathered in the fact tree keyed by the respective resource name.  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'eos_interfaces': 'Manages interface attributes of Arista EOS interfaces\n\nArguments: state, config\n\nThis module manages the interface attributes of Arista EOS interfaces.',
 'eos_l2_interfaces': 'Manages Layer-2 interface attributes of Arista EOS devices\n\nArguments: state, config\n\nThis module provides declarative management of Layer-2 interface on Arista EOS devices.',
 'eos_l3_interfaces': 'Manages L3 interface attributes of Arista EOS devices.\n\nArguments: state, config\n\nThis module provides declarative management of Layer 3 interfaces on Arista EOS devices.',
 'eos_lacp': 'Manage Global Link Aggregation Control Protocol (LACP) on Arista EOS devices.\n\nArguments: state, config\n\nThis module manages Global Link Aggregation Control Protocol (LACP) on Arista EOS devices.',
 'eos_lacp_interfaces': 'Manage Link Aggregation Control Protocol (LACP) attributes of interfaces on Arista EOS devices.\n\nArguments: state, config\n\nThis module manages Link Aggregation Control Protocol (LACP) attributes of interfaces on Arista EOS devices.',
 'eos_lag_interfaces': 'Manages link aggregation groups on Arista EOS devices\n\nArguments: state, config\n\nThis module manages attributes of link aggregation groups on Arista EOS devices.',
 'eos_lldp': 'Manage LLDP configuration on Arista EOS network devices\n\nArguments: state\n\nThis module provides declarative management of LLDP service on Arista EOS network devices.',
 'eos_lldp_global': 'Manage Global Link Layer Discovery Protocol (LLDP) settings on Arista EOS devices.\n\nArguments: state, config\n\nThis module manages Global Link Layer Discovery Protocol (LLDP) settings on Arista EOS devices.',
 'eos_lldp_interfaces': 'Manage Link Layer Discovery Protocol (LLDP) attributes of interfaces on Arista EOS devices.\n\nArguments: state, config\n\nThis module manages Link Layer Discovery Protocol (LLDP) attributes of interfaces on Arista EOS devices.',
 'eos_logging': 'Manage logging on network devices\n\nArguments: aggregate, state, name, level, dest, facility, size\n\nThis module provides declarative management of logging on Arista Eos devices.',
 'eos_static_route': 'Manage static IP routes on Arista EOS network devices\n\nArguments: state, next_hop, vrf, address, aggregate, admin_distance\n\nThis module provides declarative management of static IP routes on Arista EOS network devices.',
 'eos_system': 'Manage the system attributes on Arista EOS devices\n\nArguments: state, lookup_source, name_servers, domain_search, hostname, domain_name\n\nThis module provides declarative management of node system attributes on Arista EOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 'eos_user': 'Manage the collection of local users on EOS devices\n\nArguments: update_password, configured_password, aggregate, name, purge, privilege, state, role, nopassword, sshkey\n\nThis module provides declarative management of the local usernames configured on Arista EOS devices.  It allows playbooks to manage either individual usernames or the collection of usernames in the current running config.  It also supports purging usernames from the configuration that are not explicitly defined.',
 'eos_vlans': 'Manage VLANs on Arista EOS devices.\n\nArguments: state, config\n\nThis module provides declarative management of VLANs on Arista EOS network devices.',
 'eos_vrf': 'Manage VRFs on Arista EOS network devices\n\nArguments: rd, name, interfaces, purge, associated_interfaces, state, delay, aggregate\n\nThis module provides declarative management of VRFs on Arista EOS network devices.',
 'eric_eccli_command': 'Run commands on remote devices running ERICSSON ECCLI\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an ERICSSON eccli node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module also support running commands in configuration mode in raw command style.',
 'etcd3': 'Set or delete key value pairs from an etcd3 cluster\n\nArguments: key, ca_cert, host, value, port, state, user, timeout, password, client_cert, client_key\n\nSets or deletes values in etcd3 cluster using its v3 api.\nNeeds python etcd3 lib to work',
 'execute_lambda': 'Execute an AWS Lambda function\n\nArguments: version_qualifier, name, dry_run, function_arn, wait, payload, tail_log\n\nThis module executes AWS Lambda functions, allowing synchronous and asynchronous invocation.',
 'exo_dns_domain': 'Manages domain records on Exoscale DNS API.\n\nArguments: state, name\n\nCreate and remove domain records.',
 'exo_dns_record': 'Manages DNS records on Exoscale DNS.\n\nArguments: domain, multiple, name, prio, content, record_type, state, ttl\n\nCreate, update and delete records.',
 'exos_command': 'Run commands on remote devices running Extreme EXOS\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an Extreme EXOS device and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running configuration commands. Please use M(exos_config) to configure EXOS devices.',
 'exos_config': 'Manage Extreme Networks EXOS configuration sections\n\nArguments: src, backup_options, after, lines, intended_config, diff_against, running_config, save_when, defaults, before, replace, backup, match, diff_ignore_lines\n\nExtreme EXOS configurations use a simple flat text file syntax. This module provides an implementation for working with EXOS configuration lines in a deterministic way.',
 'exos_facts': 'Collect facts from devices running Extreme EXOS\n\nArguments: gather_subset, gather_network_resources\n\nCollects a base set of device facts from a remote device that is running EXOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'exos_lldp_global': 'Configure and manage Link Layer Discovery Protocol(LLDP) attributes on EXOS platforms.\n\nArguments: state, config\n\nThis module configures and manages the Link Layer Discovery Protocol(LLDP) attributes on Extreme Networks EXOS platforms.',
 'expect': 'Executes a command and responds to prompts.\n\nArguments: creates, chdir, command, responses, timeout, removes, echo\n\nThe C(expect) module executes a command and responds to prompts.\nThe given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($HOME) and operations like C("<"), C(">"), C("|"), and C("&") will not work.',
 'facter': 'Runs the discovery program I(facter) on the remote system\n\nArguments: \n\nRuns the I(facter) discovery program (U(https://github.com/puppetlabs/facter)) on the remote system, returning JSON data that can be useful for inventory purposes.',
 'fail': 'Fail with custom message\n\nArguments: msg\n\nThis module fails the progress with a custom message.\nIt can be useful for bailing out when a certain condition is met using C(when).\nThis module is also supported for Windows targets.',
 'faz_device': 'Add or remove device\n\nArguments: device_username, os_minor_vers, adom, device_ip, device_password, device_unique_name, mode, faz_quota, mgmt_mode, device_serial, os_type, os_ver, platform_str\n\nAdd or remove a device or list of devices to FortiAnalyzer Device Manager. ADOM Capable.',
 'fetch': 'Fetch files from remote nodes\n\nArguments: dest, src, validate_checksum, fail_on_missing, flat\n\nThis module works like M(copy), but in reverse.\nIt is used for fetching files from remote machines and storing them locally in a file tree, organized by hostname.\nFiles that already exist at I(dest) will be overwritten if they are different than the I(src).\nThis module is also supported for Windows targets.',
 'file': 'Manage files and file properties\n\nArguments: src, force, access_time, recurse, access_time_format, modification_time, state, modification_time_format, path, follow\n\nSet attributes of files, symlinks or directories.\nAlternatively, remove files, symlinks or directories.\nMany other modules support the same options as the C(file) module - including M(copy), M(template), and M(assemble).\nFor Windows targets, use the M(win_file) module instead.',
 'filesystem': 'Makes a filesystem\n\nArguments: resizefs, force, dev, opts, fstype\n\nThis module creates a filesystem.',
 'find': "Return a list of files based on specific criteria\n\nArguments: paths, excludes, file_type, age, contains, recurse, age_stamp, patterns, depth, get_checksum, use_regex, follow, hidden, size\n\nReturn a list of files based on specific criteria. Multiple criteria are AND'd together.\nFor Windows targets, use the M(win_find) module instead.",
 'firewalld': 'Manage arbitrary ports/services with firewalld\n\nArguments: icmp_block_inversion, service, zone, masquerade, icmp_block, immediate, source, state, permanent, timeout, interface, offline, port, rich_rule\n\nThis module allows for addition or deletion of services and ports (either TCP or UDP) in either running or permanent firewalld rules.',
 'flatpak': 'Manage flatpaks\n\nArguments: executable, remote, state, name, method\n\nAllows users to add or remove flatpaks.\nSee the M(flatpak_remote) module for managing flatpak remotes.',
 'flatpak_remote': 'Manage flatpak repository remotes\n\nArguments: method, executable, state, flatpakrepo_url, name\n\nAllows users to add or remove flatpak remotes.\nThe flatpak remotes concept is comparable to what is called repositories in other packaging formats.\nCurrently, remote addition is only supported via I(flatpakrepo) file URLs.\nExisting remotes will not be updated.\nSee the M(flatpak) module for managing flatpaks.',
 'flowadm': 'Manage bandwidth resource control and priority for protocols, services and zones on Solaris/illumos systems\n\nArguments: dsfield, temporary, name, maxbw, local_port, local_ip, priority, state, link, transport, remote_ip\n\nCreate/modify/remove networking bandwidth and associated resources for a type of traffic on a particular link.',
 'flowdock': 'Send a message to a flowdock\n\nArguments: from_name, from_address, tags, type, external_user_name, project, source, token, link, reply_to, subject, validate_certs, msg\n\nSend a message to a flowdock team inbox or chat using the push API (see https://www.flowdock.com/api/team-inbox and https://www.flowdock.com/api/chat)',
 'fmgr_device': 'Add or remove device from FortiManager.\n\nArguments: device_username, adom, blind_add, device_ip, device_unique_name, mode, device_serial, device_password\n\nAdd or remove a device or list of devices from FortiManager Device Manager using JSON RPC API.',
 'fmgr_device_config': 'Edit device configurations\n\nArguments: install_config, device_unique_name, adom, interface, device_hostname, interface_ip, interface_allow_access\n\nEdit device configurations from FortiManager Device Manager using JSON RPC API.',
 'fmgr_device_group': 'Alter FortiManager device groups.\n\nArguments: grp_desc, mode, adom, grp_name, grp_members, vdom\n\nAdd or edit device groups and assign devices to device groups FortiManager Device Manager using JSON RPC API.',
 'fmgr_device_provision_template': 'Manages Device Provisioning Templates in FortiManager.\n\nArguments: snmp_v2c_query_status, dns_suffix, snmpv3_queries, snmpv3_trap_status, syslog_facility, snmp_v2c_status, ntp_server, ntp_status, ntp_auth, smtp_username, snmpv3_status, syslog_certificate, admin_fortiguard_target, snmpv3_query_port, adom, snmpv3_notify_hosts, snmp_v2c_trap_status, syslog_status, device_unique_name, snmp_v2c_trap_src_ipv4, snmp_v2c_query_hosts_ipv4, syslog_filter, snmpv3_source_ip, admin_gui_theme, provisioning_template, ntp_v3, provision_targets, snmp_v2c_trap_port, mode, delete_provisioning_template, snmp_v2c_trap_hosts_ipv4, snmpv3_security_level, ntp_type, admin_https_port, syslog_mode, snmp_v2c_name, syslog_port, snmpv3_name, smtp_validate_cert, smtp_conn_sec, syslog_server, admin_switch_controller, admin_timeout, snmpv3_auth_proto, smtp_port, snmpv3_priv_pwd, smtp_server, syslog_enc_algorithm, smtp_password, snmp_v2c_query_port, admin_http_port, snmp_status, snmp_v2c_id, dns_secondary_ipv4, snmpv3_trap_rport, ntp_sync_interval, ntp_auth_pwd, smtp_replyto, snmpv3_priv_proto, admin_enable_fortiguard, dns_primary_ipv4, admin_language, snmpv3_auth_pwd, admin_fortianalyzer_target, smtp_source_ipv4, admin_https_redirect\n\nAllows the editing and assignment of device provisioning templates in FortiManager.',
 'fmgr_fwobj_address': 'Allows the management of firewall objects in FortiManager\n\nArguments: comment, allow_routing, wildcard, adom, color, visibility, group_name, start_ip, cache_ttl, fqdn, name, obj_id, country, ipv4addr, wildcard_fqdn, group_members, end_ip, ipv4, multicast, ipv6, ipv6addr, associated_interface, mode\n\nAllows for the management of IPv4, IPv6, and multicast address objects within FortiManager.',
 'fmgr_fwobj_ippool': 'Allows the editing of IP Pool Objects within FortiManager.\n\nArguments: dynamic_mapping_endip, dynamic_mapping_permit_any_host, endip, arp_intf, dynamic_mapping_comments, dynamic_mapping, dynamic_mapping_associated_interface, dynamic_mapping_type, arp_reply, pba_timeout, dynamic_mapping_arp_reply, block_size, num_blocks_per_user, dynamic_mapping_num_blocks_per_user, permit_any_host, dynamic_mapping_startip, source_startip, name, dynamic_mapping_pba_timeout, startip, source_endip, adom, dynamic_mapping_block_size, comments, dynamic_mapping_source_endip, dynamic_mapping_arp_intf, dynamic_mapping_source_startip, type, associated_interface, mode\n\nAllows users to add/edit/delete IP Pool Objects.',
 'fmgr_fwobj_ippool6': 'Allows the editing of IP Pool Objects within FortiManager.\n\nArguments: dynamic_mapping_endip, endip, dynamic_mapping, name, dynamic_mapping_comments, startip, adom, comments, mode, dynamic_mapping_startip\n\nAllows users to add/edit/delete IPv6 Pool Objects.',
 'fmgr_fwobj_service': 'Manages FortiManager Firewall Service Objects.\n\nArguments: comment, icmp_code, adom, protocol, custom_type, color, object_type, app_category, session_ttl, group_name, app_service_type, visibility, tcp_timewait_timer, icmp_type, iprange, group_member, name, category, sctp_portrange, explicit_proxy, tcp_portrange, tcp_halfclose_timer, udp_portrange, protocol_number, fqdn, tcp_halfopen_timer, application, mode, udp_idle_timer, check_reset_range\n\nManages FortiManager Firewall Service Objects.',
 'fmgr_fwobj_vip': 'Manages Virtual IPs objects in FortiManager\n\nArguments: ssl_mode, realservers_holddown_interval, dynamic_mapping_ssl_certificate, dynamic_mapping_nat_source_vip, ssl_client_session_state_type, mappedip, dynamic_mapping_ssl_server_session_state_max, protocol, dynamic_mapping_ssl_server_session_state_type, ssl_hsts_age, dynamic_mapping_ssl_dh_bits, dynamic_mapping_mapped_addr, max_embryonic_connections, dynamic_mapping_ssl_algorithm, dynamic_mapping_src_filter, extaddr, monitor, ssl_hpkp, ssl_http_match_host, ssl_hpkp_age, color, ssl_hsts_include_subdomains, websphere_server, dynamic_mapping_ssl_http_match_host, dynamic_mapping_ssl_min_version, dynamic_mapping_ssl_hpkp_report_uri, realservers_http_host, dynamic_mapping_realservers_monitor, dynamic_mapping_ssl_mode, dynamic_mapping_ssl_max_version, http_cookie_age, gratuitous_arp_interval, dynamic_mapping_http_cookie_domain_from_host, dynamic_mapping_ssl_hpkp_primary, name, realservers_port, dynamic_mapping_service, dynamic_mapping_ssl_client_renegotiation, mode, outlook_web_access, dynamic_mapping_ssl_hpkp, http_ip_header_name, dynamic_mapping_extintf, dynamic_mapping_realservers_ip, dynamic_mapping_realservers_seq, dynamic_mapping_ssl_hpkp_age, dynamic_mapping_extip, dns_mapping_ttl, dynamic_mapping_ssl_server_min_version, realservers_ip, dynamic_mapping_comment, dynamic_mapping_arp_reply, portforward, ssl_http_location_conversion, ssl_algorithm, dynamic_mapping_extaddr, ssl_hpkp_include_subdomains, dynamic_mapping_ssl_server_session_state_timeout, ssl_dh_bits, ssl_server_cipher_suites_versions, dynamic_mapping_ssl_hsts, ssl_server_cipher_suites_cipher, ssl_client_renegotiation, ssl_server_cipher_suites_priority, ssl_min_version, dynamic_mapping, server_type, dynamic_mapping_http_ip_header_name, dynamic_mapping_realservers_port, dynamic_mapping_realservers_max_connections, dynamic_mapping_websphere_server, dynamic_mapping_http_cookie_domain, dynamic_mapping_srcintf_filter, portmapping_type, ssl_pfs, ssl_cipher_suites, dynamic_mapping_ssl_pfs, dynamic_mapping_ssl_hsts_age, weblogic_server, dynamic_mapping_weblogic_server, dynamic_mapping_http_cookie_age, realservers_seq, ssl_server_algorithm, ssl_server_session_state_type, dynamic_mapping_extport, comment, dynamic_mapping_protocol, dynamic_mapping_realservers_http_host, dynamic_mapping_mappedport, ssl_server_min_version, http_cookie_generation, http_cookie_domain, http_multiplex, dynamic_mapping_http_multiplex, dynamic_mapping_ssl_client_fallback, dynamic_mapping_portforward, dynamic_mapping_monitor, ssl_hpkp_report_uri, dynamic_mapping_mappedip, ssl_hsts, dynamic_mapping_color, service, persistence, dynamic_mapping_http_cookie_path, type, src_filter, http_ip_header, dynamic_mapping_ssl_hpkp_backup, realservers_monitor, dynamic_mapping_ssl_cipher_suites_cipher, adom, https_cookie_secure, dynamic_mapping_ldb_method, extport, ssl_server_session_state_max, dynamic_mapping_realservers_healthcheck, dynamic_mapping_ssl_send_empty_frags, ssl_cipher_suites_versions, dynamic_mapping_ssl_cipher_suites_versions, dynamic_mapping_realservers_client_ip, ssl_send_empty_frags, dynamic_mapping_ssl_client_session_state_type, ssl_client_session_state_max, dynamic_mapping_realservers_holddown_interval, ssl_certificate, dynamic_mapping_dns_mapping_ttl, arp_reply, ldb_method, dynamic_mapping_gratuitous_arp_interval, ssl_client_fallback, dynamic_mapping_max_embryonic_connections, ssl_hpkp_backup, dynamic_mapping_ssl_server_algorithm, http_cookie_domain_from_host, ssl_hpkp_primary, dynamic_mapping_server_type, dynamic_mapping_outlook_web_access, dynamic_mapping_type, dynamic_mapping_http_cookie_generation, ssl_max_version, extip, nat_source_vip, dynamic_mapping_ssl_hpkp_include_subdomains, dynamic_mapping_ssl_server_max_version, realservers_weight, ssl_cipher_suites_cipher, realservers_client_ip, dynamic_mapping_http_ip_header, dynamic_mapping_persistence, ssl_server_cipher_suites, dynamic_mapping_portmapping_type, extintf, dynamic_mapping_ssl_client_session_state_max, realservers_max_connections, ssl_server_session_state_timeout, dynamic_mapping_ssl_client_session_state_timeout, ssl_client_session_state_timeout, realservers_healthcheck, dynamic_mapping_realservers_weight, http_cookie_path, mapped_addr, mappedport, dynamic_mapping_ssl_http_location_conversion, dynamic_mapping_ssl_hsts_include_subdomains, realservers, srcintf_filter, http_cookie_share, realservers_status, dynamic_mapping_realservers_status, dynamic_mapping_https_cookie_secure, ssl_server_max_version, dynamic_mapping_http_cookie_share\n\nManages Virtual IP objects in FortiManager for IPv4',
 'fmgr_fwpol_ipv4': 'Allows the add/delete of Firewall Policies on Packages in FortiManager.\n\nArguments: per_ip_shaper, package_name, learning_mode, dscp_match, diffserv_reverse, traffic_shaper_reverse, dlp_sensor, ssl_mirror, identity_based_route, vpn_src_node_host, custom_log_fields, internet_service_src_negate, natip, voip_profile, np_acceleration, name, internet_service_id, ntlm, natoutbound, mode, vpn_dst_node_seq, internet_service, internet_service_src, spamfilter_profile, ssh_filter_profile, vlan_cos_rev, tcp_session_without_syn, url_category, session_ttl, mms_profile, internet_service_negate, auth_redirect_addr, poolname, ssl_ssh_profile, internet_service_src_custom, comments, label, wanopt, capture_packet, app_category, profile_type, schedule, wanopt_profile, diffservcode_rev, tcp_mss_sender, dstintf, groups, ssl_mirror_intf, dscp_negate, waf_profile, scan_botnet_connections, vpn_dst_node_host, match_vip, vlan_filter, srcintf, redirect_url, action, disclaimer, gtp_profile, srcaddr_negate, icap_profile, application_list, service_negate, send_deny_packet, fsso_agent_for_ntlm, webcache, vpn_src_node, ippool, service, wccp, permit_stun_host, dnsfilter_profile, profile_group, delay_tcp_npu_session, tcp_mss_receiver, ntlm_enabled_browsers, logtraffic, global_label, adom, inbound, srcaddr, block_notification, webfilter_profile, vpn_src_node_seq, permit_any_host, logtraffic_start, webcache_https, ips_sensor, devices, radius_mac_auth_bypass, internet_service_src_id, schedule_timeout, ntlm_guest, rsso, traffic_shaper, captive_portal_exempt, diffserv_forward, wanopt_detection, auth_cert, vpn_src_node_subnet, internet_service_custom, natinbound, rtp_addr, vlan_cos_fwd, fixedport, dsri, wanopt_passive_opt, outbound, vpn_dst_node, rtp_nat, application, vpn_dst_node_subnet, nat, timeout_send_rst, fsso, status, diffservcode_forward, users, dscp_value, utm_status, auto_asic_offload, policyid, firewall_session_dirty, wanopt_peer, replacemsg_override_group, dstaddr_negate, av_profile, profile_protocol_options, auth_path, wsso, dstaddr, app_group, fail_on_missing_dependency, vpntunnel\n\nAllows the add/delete of Firewall Policies on Packages in FortiManager.',
 'fmgr_fwpol_package': 'Manages FortiManager Firewall Policies Packages.\n\nArguments: object_type, name, adom, ngfw_mode, ssl_ssh_profile, central_nat, fwpolicy_implicit_log, scope_members, mode, package_folder, parent_folder, scope_members_vdom, fwpolicy6_implicit_log, inspection_mode\n\nManages FortiManager Firewall Policies Packages. Policy Packages contain one or more Firewall Policies/Rules and are distritbuted via FortiManager to Fortigates.\nThis module controls the creation/edit/delete/assign of these packages.',
 'fmgr_ha': 'Manages the High-Availability State of FortiManager Clusters and Nodes.\n\nArguments: fmgr_ha_peer_sn, fmgr_ha_hb_threshold, fmgr_ha_cluster_pw, fmgr_ha_peer_ipv6, fmgr_ha_peer_status, fmgr_ha_file_quota, fmgr_ha_cluster_id, fmgr_ha_peer_ipv4, fmgr_ha_hb_interval, fmgr_ha_mode\n\nChange HA state or settings of FortiManager nodes (Standalone/Master/Slave).',
 'fmgr_provisioning': 'Provision devices via FortiMananger\n\nArguments: username, group, name, adom, patch_release, os_version, host, minor_release, platform, policy_package, serial, password, os_type, vdom, description\n\nAdd model devices on the FortiManager using jsonrpc API and have them pre-configured, so when central management is configured, the configuration is pushed down to the registering devices',
 'fmgr_query': 'Query FortiManager data objects for use in Ansible workflows.\n\nArguments: custom_endpoint, object, task_id, adom, device_ip, custom_dict, device_unique_name, nodes, device_serial\n\nProvides information on data objects within FortiManager so that playbooks can perform conditionals.',
 'fmgr_script': 'Add/Edit/Delete and execute scripts\n\nArguments: script_content, adom, script_scope, script_name, script_target, mode, script_description, script_package, vdom, script_type\n\nCreate/edit/delete scripts and execute the scripts on the FortiManager using jsonrpc API',
 'fmgr_secprof_appctrl': 'Manage application control security profiles\n\nArguments: comment, entries_popularity, entries_log, extended_log, deep_app_inspection, entries_quarantine_log, entries_protocols, entries_rate_mode, entries_shaper, entries_action, replacemsg_group, unknown_application_log, unknown_application_action, entries_quarantine, entries_category, adom, entries_application, app_replacemsg, other_application_log, entries_behavior, entries_vendor, entries_per_ip_shaper, mode, entries_rate_count, entries_risk, entries_log_packet, entries_quarantine_expiry, entries_sub_category, entries, entries_technology, name, other_application_action, p2p_black_list, entries_parameters_value, entries_session_ttl, entries_rate_track, entries_shaper_reverse, options, entries_rate_duration\n\nManage application control security profiles within FortiManager',
 'fmgr_secprof_av': 'Manage security profile\n\nArguments: comment, pop3_executables, smtp_emulator, http_archive_log, content_disarm_pdf_act_gotor, content_disarm_pdf_embedfile, smtp_options, content_disarm_office_macro, mapi_outbreak_prevention, replacemsg_group, smb_archive_block, analytics_bl_filetype, mapi_archive_log, content_disarm_office_embed, http_options, http_outbreak_prevention, smtp_archive_block, imap_archive_log, http_archive_block, content_disarm_office_linked, content_disarm_pdf_act_sound, http_emulator, imap_outbreak_prevention, content_disarm_pdf_act_movie, smtp_content_disarm, analytics_wl_filetype, content_disarm_original_file_destination, adom, nac_quar, smtp_archive_log, pop3, smb_options, nntp_archive_log, imap, nac_quar_expiry, nntp_archive_block, name, content_disarm_pdf_act_launch, mobile_malware_db, content_disarm_pdf_act_java, mode, content_disarm_cover_page, http_content_disarm, imap_archive_block, nntp_options, content_disarm_detect_only, smtp_executables, pop3_outbreak_prevention, mapi_archive_block, smtp_outbreak_prevention, smb_emulator, imap_options, imap_content_disarm, smtp, analytics_db, ftp_options, av_virus_log, pop3_content_disarm, mapi_executables, nac_quar_infected, mapi, ftp, ftp_emulator, nac_quar_log, pop3_emulator, analytics_max_upload, mapi_emulator, imap_executables, extended_log, content_disarm, pop3_options, smb_archive_log, nntp, smb, content_disarm_pdf_act_form, content_disarm_office_hylink, http, imap_emulator, ftp_outbreak_prevention, nntp_emulator, mapi_options, smb_outbreak_prevention, pop3_archive_log, content_disarm_pdf_hyperlink, ftgd_analytics, scan_mode, av_block_log, nntp_outbreak_prevention, ftp_archive_block, pop3_archive_block, ftp_archive_log, content_disarm_pdf_javacode, inspection_mode\n\nManage security profile groups for FortiManager objects',
 'fmgr_secprof_dns': 'Manage DNS security profiles in FortiManager\n\nArguments: comment, domain_filter_domain_filter_table, youtube_restrict, adom, safe_search, block_botnet, redirect_portal, ftgd_dns_options, sdns_domain_log, external_ip_blocklist, name, log_all_domain, ftgd_dns_filters_action, sdns_ftgd_err_log, block_action, mode, ftgd_dns_filters_log, ftgd_dns_filters_category\n\nManage DNS security profiles in FortiManager',
 'fmgr_secprof_ips': 'Managing IPS security profiles in FortiManager\n\nArguments: comment, override_status, override_exempt_ip_dst_ip, filter_os, entries_log, entries_application, replacemsg_group, override_exempt_ip_src_ip, entries_quarantine_log, entries_rate_mode, block_malicious_url, entries_action, filter_log, entries_rate_track, entries_protocol, entries_quarantine, entries_exempt_ip_dst_ip, entries_exempt_ip_src_ip, filter_quarantine, adom, extended_log, override_log_packet, entries_severity, override_log, override_quarantine_expiry, override_action, entries_log_attack_context, entries_rule, filter_severity, override, entries_os, override_quarantine, filter_quarantine_log, entries_rate_count, override_rule_id, entries_log_packet, entries_quarantine_expiry, filter_protocol, filter_status, filter_name, filter_quarantine_expiry, filter_action, entries_status, name, filter_application, entries_location, override_quarantine_log, filter, filter_log_packet, mode, entries, filter_location, entries_rate_duration\n\nManaging IPS security profiles in FortiManager',
 'fmgr_secprof_profile_group': 'Manage security profiles within FortiManager\n\nArguments: spamfilter_profile, adom, application_list, av_profile, waf_profile, mms_profile, voip_profile, webfilter_profile, name, dlp_sensor, ssl_ssh_profile, ips_sensor, dnsfilter_profile, mode, icap_profile, profile_protocol_options, ssh_filter_profile\n\nManage security profile group which allows you to create a group of security profiles and apply that to a policy.',
 'fmgr_secprof_proxy': 'Manage proxy security profiles in FortiManager\n\nArguments: adom, header_x_authenticated_user, log_header_change, headers_name, header_x_forwarded_for, header_front_end_https, header_via_response, headers_content, headers_action, header_x_authenticated_groups, name, header_client_ip, strip_encoding, headers, mode, header_via_request\n\nManage proxy security profiles for FortiGates via FortiManager using the FMG API with playbooks',
 'fmgr_secprof_spam': 'spam filter profile for FMG\n\nArguments: comment, spam_bword_threshold, spam_iptrust_table, spam_log_fortiguard_response, mapi_log, msn_hotmail_log, replacemsg_group, imap_tag_msg, gmail, smtp_hdrip, smtp_log, spam_mheader_table, spam_rbl_table, mapi, spam_bword_table, yahoo_mail, gmail_log, yahoo_mail_log, spam_log, smtp_tag_msg, flow_based, adom, smtp, smtp_action, pop3_log, pop3, external, smtp_local_override, imap, imap_tag_type, name, msn_hotmail, pop3_tag_type, imap_log, spam_filtering, pop3_tag_msg, imap_action, pop3_action, mode, smtp_tag_type, options, spam_bwl_table, mapi_action\n\nManage spam filter security profiles within FortiManager via API',
 'fmgr_secprof_ssl_ssh': 'Manage SSL and SSH security profiles in FortiManager\n\nArguments: untrusted_caname, comment, pop3s_allow_invalid_server_cert, ftps_untrusted_cert, whitelist, caname, ftps, ftps_ports, imaps_untrusted_cert, https_allow_invalid_server_cert, ssl_server_ftps_client_cert_request, imaps_ports, smtps_status, ssh_unsupported_version, https, imaps, ssl_exempt_address6, ssl_server_imaps_client_cert_request, server_cert, ftps_allow_invalid_server_cert, adom, https_status, imaps_client_cert_request, smtps_untrusted_cert, pop3s_client_cert_request, ssl_inspect_all, ssl, ssh, ssl_exempt_address, smtps_allow_invalid_server_cert, name, ssl_exempt_type, ssl_exempt, ftps_status, ssh_ssh_tun_policy_check, ssh_inspect_all, mode, ftps_unsupported_ssl, imaps_status, ssh_ports, rpc_over_https, ssl_server_smtps_client_cert_request, ssl_server_ssl_other_client_cert_request, pop3s, ssl_allow_invalid_server_cert, use_ssl_server, server_cert_mode, https_ports, pop3s_ports, https_client_cert_request, smtps_client_cert_request, https_untrusted_cert, imaps_allow_invalid_server_cert, pop3s_unsupported_ssl, ssh_ssh_algorithm, ssl_exempt_regex, imaps_unsupported_ssl, ssl_client_cert_request, mapi_over_https, ssl_exempt_wildcard_fqdn, ftps_client_cert_request, ssl_server, https_unsupported_ssl, ssl_server_ip, ssl_server_https_client_cert_request, smtps_ports, ssh_ssh_policy_check, ssl_exempt_fortiguard_category, ssl_exemptions_log, ssl_untrusted_cert, ssl_unsupported_ssl, smtps, ssl_server_pop3s_client_cert_request, ssh_status, pop3s_status, pop3s_untrusted_cert, ssl_anomalies_log, smtps_unsupported_ssl\n\nManage SSL and SSH security profiles in FortiManager via the FMG API',
 'fmgr_secprof_voip': 'VOIP security profiles in FMG\n\nArguments: comment, sip_ssl_client_certificate, sip_malformed_header_rseq, sccp_status, sip_provisional_invite_expiry_time, sip_open_register_pinhole, sip_malformed_header_max_forwards, sip_malformed_header_cseq, sccp, sip_block_register, sip_block_invite, sip_max_dialogs, sip_status, sip_open_contact_pinhole, sip_block_notify, sip_malformed_header_expires, sip_ssl_send_empty_frags, sip_block_geo_red_options, sip_ssl_mode, sccp_verify_header, sip_rfc2543_branch, sip_block_subscribe, sip_message_rate, sip_max_body_length, sip_hosted_nat_traversal, sccp_log_violations, sip_notify_rate, sip_log_violations, sip_call_keepalive, sip_malformed_header_content_type, sip_register_rate, sip_cancel_rate, adom, sip_bye_rate, sip_block_info, sip_subscribe_rate, sip_hnt_restrict_source_ip, sip_malformed_header_call_id, sip_malformed_header_p_asserted_identity, sip_ssl_auth_server, sip_block_options, sccp_max_calls, sip_nat_trace, sip_block_unknown, sip_publish_rate, sip_block_prack, sip_malformed_request_line, name, sip_no_sdp_fixup, sip_block_update, sip_malformed_header_content_length, sip_open_via_pinhole, sip_block_refer, sip_preserve_override, mode, sip_ssl_client_renegotiation, sip_ack_rate, sip_contact_fixup, sip_ssl_min_version, sip_block_message, sip_options_rate, sip_block_ack, sip_malformed_header_to, sip_unknown_header, sip_update_rate, sip_block_long_lines, sip_malformed_header_sdp_k, sip_malformed_header_allow, sip_register_contact_trace, sip_malformed_header_record_route, sip_block_bye, sip, sip_malformed_header_sdp_i, sip_malformed_header_sdp_s, sccp_log_call_summary, sip_refer_rate, sip_strict_register, sip_invite_rate, sip_log_call_summary, sip_prack_rate, sip_open_record_route_pinhole, sip_malformed_header_sdp_o, sip_malformed_header_sdp_m, sip_max_line_length, sip_ssl_max_version, sip_info_rate, sip_malformed_header_sdp_c, sip_malformed_header_sdp_b, sip_malformed_header_sdp_a, sip_malformed_header_from, sip_malformed_header_sdp_z, sip_malformed_header_contact, sip_ssl_algorithm, sip_malformed_header_sdp_v, sip_max_idle_dialogs, sip_malformed_header_sdp_t, sip_ssl_pfs, sip_malformed_header_sdp_r, sip_block_cancel, sccp_block_mcast, sip_ssl_server_certificate, sip_malformed_header_via, sip_malformed_header_rack, sip_block_publish, sip_ips_rtp, sip_rtp, sip_ssl_auth_client, sip_malformed_header_route\n\nManage VOIP security profiles in FortiManager via API',
 'fmgr_secprof_waf': 'FortiManager web application firewall security profile\n\nArguments: method_method_policy_allowed_methods, comment, constraint_url_param_length_status, constraint_param_length_status, constraint_malformed_status, constraint_method_status, signature_main_class_severity, constraint_param_length_length, constraint_max_header_line_severity, constraint_url_param_length_length, url_access_log, url_access_access_pattern_pattern, signature_custom_signature_log, constraint_header_length_action, constraint_max_range_segment_log, constraint_line_length_status, constraint_max_header_line_action, constraint_max_range_segment_max_range_segment, constraint_line_length_length, constraint_max_cookie_severity, address_list_blocked_address, constraint_exception_hostname, signature_custom_signature_target, constraint_max_range_segment_status, constraint_max_header_line_status, constraint_exception_param_length, constraint_content_length_severity, constraint_line_length_action, address_list, address_list_blocked_log, constraint_param_length_log, constraint_max_url_param_log, constraint_exception_version, adom, constraint_max_header_line_log, constraint_max_url_param_action, constraint_param_length_action, constraint_url_param_length_severity, constraint_line_length_log, url_access, address_list_status, constraint_version_action, address_list_trusted_address, signature_main_class_status, method_log, constraint_exception_line_length, constraint_hostname_severity, name, constraint_method_action, constraint_header_length_severity, constraint_hostname_log, constraint_max_cookie_max_cookie, constraint_exception_max_cookie, constraint_content_length_action, constraint_header_length_log, constraint_param_length_severity, constraint_max_url_param_severity, constraint_max_range_segment_action, constraint_max_cookie_status, constraint_max_url_param_status, constraint_version_severity, constraint_exception_max_range_segment, method_method_policy_pattern, method_severity, constraint_max_range_segment_severity, mode, url_access_action, constraint_method_severity, signature_credit_card_detection_threshold, constraint_version_status, signature_custom_signature_case_sensitivity, constraint_content_length_status, signature_custom_signature_status, constraint_max_cookie_log, url_access_severity, signature_main_class_log, signature_custom_signature_direction, address_list_severity, extended_log, url_access_access_pattern_regex, signature_custom_signature_pattern, signature_custom_signature_name, signature_main_class_action, signature_custom_signature_severity, constraint_content_length_length, constraint_exception_malformed, constraint_malformed_action, method, constraint_malformed_severity, url_access_address, constraint_exception_header_length, method_method_policy_address, constraint_exception_pattern, method_status, method_method_policy_regex, constraint_method_log, constraint_max_url_param_max_url_param, constraint_url_param_length_log, constraint_exception_max_url_param, constraint_max_cookie_action, constraint_exception_address, constraint_exception_content_length, constraint_malformed_log, constraint_exception_method, constraint_max_header_line_max_header_line, url_access_access_pattern_negate, constraint_hostname_action, signature_disabled_sub_class, constraint_content_length_log, constraint_version_log, signature_disabled_signature, constraint, signature_custom_signature_action, constraint_url_param_length_action, url_access_access_pattern_srcaddr, method_default_allowed_methods, constraint_header_length_length, constraint_exception_url_param_length, constraint_header_length_status, constraint_exception_regex, constraint_hostname_status, signature, constraint_line_length_severity, constraint_exception_max_header_line, external\n\nManage web application firewall security profiles for FGTs via FMG',
 'fmgr_secprof_wanopt': 'WAN optimization\n\nArguments: cifs_byte_caching, auth_group, ftp_status, http_tunnel_sharing, http_tunnel_non_http, ftp_byte_caching, tcp_ssl, tcp, http_ssl, comments, cifs_secure_tunnel, ftp_tunnel_sharing, ftp, http_port, http_status, tcp_port, mapi, tcp_secure_tunnel, http_ssl_port, cifs_prefer_chunking, mapi_port, tcp_status, ftp_log_traffic, http, cifs, http_byte_caching, adom, tcp_ssl_port, http_unknown_http_version, tcp_log_traffic, cifs_port, tcp_tunnel_sharing, mapi_status, tcp_byte_caching, ftp_prefer_chunking, cifs_log_traffic, ftp_secure_tunnel, mapi_byte_caching, transparent, name, ftp_port, http_log_traffic, mapi_log_traffic, http_prefer_chunking, cifs_tunnel_sharing, http_secure_tunnel, mapi_secure_tunnel, cifs_status, mode, tcp_byte_caching_opt, mapi_tunnel_sharing\n\nManage WanOpt security profiles in FortiManager via API',
 'fmgr_secprof_web': 'Manage web filter security profiles in FortiManager\n\nArguments: web_filter_applet_log, comment, override_ovrd_dur_mode, ftgd_wf_filters_warning_prompt, web_filter_referer_log, web_filter_activex_log, ftgd_wf_quota_category, web_filter_jscript_log, web_url_log, url_extraction_redirect_header, url_extraction_redirect_no_content, replacemsg_group, web_filter_unknown_log, web_filter_cookie_removal_log, wisp_algorithm, ftgd_wf_quota_duration, web_filter_command_block_log, web_bword_table, ftgd_wf_filters_auth_usr_grp, override_ovrd_cookie, web_keyword_match, override, ftgd_wf_quota_type, ftgd_wf_rate_css_urls, override_profile, url_extraction_server_fqdn, wisp_servers, web_ftgd_quota_usage, post_action, web_urlfilter_table, web_filter_vbs_log, web_bword_threshold, override_profile_attribute, ftgd_wf_filters_log, name, ftgd_wf_filters_override_replacemsg, wisp, mode, youtube_channel_filter, override_ovrd_scope, ftgd_wf_rate_crl_urls, log_all_url, ftgd_wf_filters_warn_duration, ftgd_wf_exempt_quota, override_ovrd_dur, web_log_search, ftgd_wf_ovrd, web_content_header_list, ovrd_perm, override_ovrd_user_group, web_safe_search, ftgd_wf_filters_category, ftgd_wf_options, ftgd_wf_filters_warning_duration_type, web_filter_js_log, url_extraction_status, ftgd_wf_quota_override_replacemsg, youtube_channel_filter_comment, adom, extended_log, youtube_channel_status, ftgd_wf_rate_image_urls, web_filter_cookie_log, web_blacklist, web_content_log, web_ftgd_err_log, web_youtube_restrict, override_profile_type, web, ftgd_wf, ftgd_wf_filters_action, web_whitelist, url_extraction_redirect_url, youtube_channel_filter_channel_id, ftgd_wf_quota_value, web_invalid_domain_log, ftgd_wf_rate_javascript_urls, ftgd_wf_max_quota_timeout, ftgd_wf_quota_unit, url_extraction, https_replacemsg, web_extended_all_action_log, options, inspection_mode\n\nManage web filter security profiles in FortiManager through playbooks using the FMG API',
 'fortios_address': 'Manage fortios firewall address objects\n\nArguments: comment, name, country, value, start_ip, state, end_ip, interface, type\n\nThis module provide management of firewall addresses on FortiOS devices.',
 'fortios_alertemail_setting': "Configure alert email settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, alertemail_setting, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify alertemail feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_antivirus_heuristic': "Configure global heuristic options in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, antivirus_heuristic, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify antivirus feature and heuristic category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_antivirus_profile': "Configure AntiVirus profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, antivirus_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify antivirus feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_antivirus_quarantine': "Configure quarantine options in Fortinet's FortiOS and FortiGate.\n\nArguments: username, antivirus_quarantine, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify antivirus feature and quarantine category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_antivirus_settings': "Configure AntiVirus settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, antivirus_settings, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify antivirus feature and settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_application_custom': "Configure custom application signatures in Fortinet's FortiOS and FortiGate.\n\nArguments: username, state, ssl_verify, application_custom, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify application feature and custom category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_application_group': "Configure firewall application groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, application_group, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify application feature and group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_application_list': "Configure application control lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, application_list, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify application feature and list category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_application_name': "Configure application signatures in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, application_name, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify application feature and name category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_application_rule_settings': "Configure application rule settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, application_rule_settings, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify application feature and rule_settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_authentication_rule': "Configure Authentication Rules in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, authentication_rule, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify authentication feature and rule category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_authentication_scheme': "Configure Authentication Schemes in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, authentication_scheme, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify authentication feature and scheme category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_authentication_setting': "Configure authentication setting in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, authentication_setting, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify authentication feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_config': 'Manage config on Fortinet FortiOS firewall devices\n\nArguments: filter, src\n\nThis module provides management of FortiOS Devices configuration.',
 'fortios_dlp_filepattern': "Configure file patterns used by DLP blocking in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vdom, https, ssl_verify, password, dlp_filepattern\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify dlp feature and filepattern category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_dlp_fp_doc_source': "Create a DLP fingerprint database by allowing the FortiGate to access a file server containing files from which to create fingerprints in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, dlp_fp_doc_source, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify dlp feature and fp_doc_source category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_dlp_fp_sensitivity': "Create self-explanatory DLP sensitivity levels to be used when setting sensitivity under config fp-doc-source in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, dlp_fp_sensitivity, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify dlp feature and fp_sensitivity category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_dlp_sensor': "Configure DLP sensors in Fortinet's FortiOS and FortiGate.\n\nArguments: username, dlp_sensor, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify dlp feature and sensor category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_dlp_settings': "Designate logical storage for DLP fingerprint database in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, dlp_settings, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify dlp feature and settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_dnsfilter_domain_filter': "Configure DNS domain filters in Fortinet's FortiOS and FortiGate.\n\nArguments: username, dnsfilter_domain_filter, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify dnsfilter feature and domain_filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_dnsfilter_profile': "Configure DNS domain filter profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, dnsfilter_profile, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify dnsfilter feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_endpoint_control_client': "Configure endpoint control client lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, state, ssl_verify, endpoint_control_client, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify endpoint_control feature and client category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_endpoint_control_forticlient_ems': "Configure FortiClient Enterprise Management Server (EMS) entries in Fortinet's FortiOS and FortiGate.\n\nArguments: username, endpoint_control_forticlient_ems, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify endpoint_control feature and forticlient_ems category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_endpoint_control_forticlient_registration_sync': "Configure FortiClient registration synchronization settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, endpoint_control_forticlient_registration_sync, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify endpoint_control feature and forticlient_registration_sync category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_endpoint_control_profile': "Configure FortiClient endpoint control profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, endpoint_control_profile, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify endpoint_control feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_endpoint_control_settings': "Configure endpoint control settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, endpoint_control_settings, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify endpoint_control feature and settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_extender_controller_extender': "Extender controller configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, extender_controller_extender, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify extender_controller feature and extender category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_facts': 'Get facts about fortios devices.\n\nArguments: username, host, gather_subset, https, ssl_verify, password, vdom\n\nCollects facts from network devices running the fortios operating system. This module places the facts gathered in the fact tree keyed by the respective resource name.  This facts module will only collect those facts which user specified in playbook.',
 'fortios_firewall_DoS_policy': "Configure IPv4 DoS policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, password, host, state, https, ssl_verify, firewall_DoS_policy, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and DoS_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_DoS_policy6': "Configure IPv6 DoS policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, firewall_DoS_policy6, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and DoS_policy6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_address': "Configure IPv4 addresses in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, firewall_address, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and address category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_address6': "Configure IPv6 firewall addresses in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, firewall_address6, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and address6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_address6_template': "Configure IPv6 address templates in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_address6_template, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and address6_template category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_addrgrp': "Configure IPv4 address groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, firewall_addrgrp\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and addrgrp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_addrgrp6': "Configure IPv6 address groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_addrgrp6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and addrgrp6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_auth_portal': "Configure firewall authentication portals in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, firewall_auth_portal\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and auth_portal category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_central_snat_map': "Configure central SNAT policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, firewall_central_snat_map, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and central_snat_map category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_dnstranslation': "Configure DNS translation in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_dnstranslation, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and dnstranslation category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_identity_based_route': "Configure identity based routing in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_identity_based_route, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and identity_based_route category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_interface_policy': "Configure IPv4 interface policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_interface_policy, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and interface_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_interface_policy6': "Configure IPv6 interface policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, firewall_interface_policy6, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and interface_policy6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_internet_service': "Show Internet Service application in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_internet_service, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and internet_service category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_internet_service_custom': "Configure custom Internet Services in Fortinet's FortiOS and FortiGate.\n\nArguments: username, state, ssl_verify, firewall_internet_service_custom, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and internet_service_custom category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_internet_service_group': "Configure group of Internet Service in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, firewall_internet_service_group, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and internet_service_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ip_translation': "Configure firewall IP-translation in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, firewall_ip_translation, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ip_translation category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ipmacbinding_setting': "Configure IP to MAC binding settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_ipmacbinding_setting, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_ipmacbinding feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ipmacbinding_table': "Configure IP to MAC address pairs in the IP/MAC binding table in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vdom, https, ssl_verify, password, firewall_ipmacbinding_table\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_ipmacbinding feature and table category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ippool': "Configure IPv4 IP pools in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_ippool, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ippool category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ippool6': "Configure IPv6 IP pools in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_ippool6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ippool6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ipv6_eh_filter': "Configure IPv6 extension header filter in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_ipv6_eh_filter, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ipv6_eh_filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ldb_monitor': "Configure server load balancing health monitors in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_ldb_monitor, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ldb_monitor category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_local_in_policy': "Configure user defined IPv4 local-in policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, firewall_local_in_policy, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and local_in_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_local_in_policy6': "Configure user defined IPv6 local-in policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_local_in_policy6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and local_in_policy6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_multicast_address': "Configure multicast addresses in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, firewall_multicast_address, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and multicast_address category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_multicast_address6': "Configure IPv6 multicast address in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_multicast_address6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and multicast_address6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_multicast_policy': "Configure multicast NAT policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, firewall_multicast_policy, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and multicast_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_multicast_policy6': "Configure IPv6 multicast NAT policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_multicast_policy6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and multicast_policy6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_policy': "Configure IPv4 policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_policy, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_policy46': "Configure IPv4 to IPv6 policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vdom, https, ssl_verify, password, firewall_policy46\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and policy46 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_policy6': "Configure IPv6 policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_policy6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and policy6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_policy64': "Configure IPv6 to IPv4 policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, firewall_policy64, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and policy64 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_profile_group': "Configure profile groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_profile_group, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and profile_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_profile_protocol_options': "Configure protocol options in Fortinet's FortiOS and FortiGate.\n\nArguments: username, password, host, state, https, ssl_verify, firewall_profile_protocol_options, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and profile_protocol_options category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_proxy_address': "Web proxy address configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, firewall_proxy_address, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and proxy_address category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_proxy_addrgrp': "Web proxy address group configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_proxy_addrgrp, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and proxy_addrgrp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_proxy_policy': "Configure proxy policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, firewall_proxy_policy\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and proxy_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_schedule_group': "Schedule group configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, firewall_schedule_group\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_schedule feature and group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_schedule_onetime': "Onetime schedule configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_schedule_onetime, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_schedule feature and onetime category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_schedule_recurring': "Recurring schedule configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, firewall_schedule_recurring\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_schedule feature and recurring category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_service_category': "Configure service categories in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_service_category, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_service feature and category category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_service_custom': "Configure custom services in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_service_custom, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_service feature and custom category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_service_group': "Configure service groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_service_group, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_service feature and group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_shaper_per_ip_shaper': "Configure per-IP traffic shaper in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_shaper_per_ip_shaper, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_shaper feature and per_ip_shaper category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_shaper_traffic_shaper': "Configure shared traffic shaper in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, firewall_shaper_traffic_shaper, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_shaper feature and traffic_shaper category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_shaping_policy': "Configure shaping policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, password, host, state, https, ssl_verify, firewall_shaping_policy, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and shaping_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_shaping_profile': "Configure shaping profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_shaping_profile, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and shaping_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_sniffer': "Configure sniffer in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, firewall_sniffer, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and sniffer category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ssh_host_key': "SSH proxy host public keys in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_ssh_host_key, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_ssh feature and host_key category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ssh_local_ca': "SSH proxy local CA in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, firewall_ssh_local_ca, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_ssh feature and local_ca category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ssh_local_key': "SSH proxy local keys in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, firewall_ssh_local_key, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_ssh feature and local_key category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ssh_setting': "SSH proxy settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, firewall_ssh_setting\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_ssh feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ssl_server': "Configure SSL servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_ssl_server, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ssl_server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ssl_setting': "SSL proxy settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, firewall_ssl_setting, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_ssl feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ssl_ssh_profile': "Configure SSL/SSH protocol options in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_ssl_ssh_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ssl_ssh_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_ttl_policy': "Configure TTL policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, firewall_ttl_policy, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and ttl_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vip': "Configure virtual IP for IPv4 in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_vip, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vip category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vip46': "Configure IPv4 to IPv6 virtual IPs in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, firewall_vip46, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vip46 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vip6': "Configure virtual IP for IPv6 in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_vip6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vip6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vip64': "Configure IPv6 to IPv4 virtual IPs in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_vip64, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vip64 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vipgrp': "Configure IPv4 virtual IP groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, firewall_vipgrp, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vipgrp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vipgrp46': "Configure IPv4 to IPv6 virtual IP groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_vipgrp46, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vipgrp46 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vipgrp6': "Configure IPv6 virtual IP groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, firewall_vipgrp6, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vipgrp6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_vipgrp64': "Configure IPv6 to IPv4 virtual IP groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_vipgrp64, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall feature and vipgrp64 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_wildcard_fqdn_custom': "Config global/VDOM Wildcard FQDN address in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_wildcard_fqdn_custom, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_wildcard_fqdn feature and custom category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_firewall_wildcard_fqdn_group': "Config global Wildcard FQDN address groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, firewall_wildcard_fqdn_group, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify firewall_wildcard_fqdn feature and group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ftp_proxy_explicit': "Configure explicit FTP proxy settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ftp_proxy_explicit, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ftp_proxy feature and explicit category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_icap_profile': "Configure ICAP profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, icap_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify icap feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_icap_server': "Configure ICAP servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, icap_server, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify icap feature and server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ips_custom': "Configure IPS custom signature in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ips_custom, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ips feature and custom category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ips_decoder': "Configure IPS decoder in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, ips_decoder, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ips feature and decoder category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ips_global': "Configure IPS global parameter in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, ips_global, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ips feature and global category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ips_rule': "Configure IPS rules in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, ips_rule\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ips feature and rule category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ips_rule_settings': "Configure IPS rule setting in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, ips_rule_settings, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ips feature and rule_settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ips_sensor': "Configure IPS sensor in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ips_sensor, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ips feature and sensor category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ips_settings': "Configure IPS VDOM parameter in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, ips_settings\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ips feature and settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ipv4_policy': 'Manage IPv4 policy objects on Fortinet FortiOS firewall devices\n\nArguments: comment, schedule, application_list, src_intf, service_negate, av_profile, dst_addr_negate, logtraffic_start, id, fixedport, webfilter_profile, src_addr, service, poolname, policy_action, dst_intf, ips_sensor, state, nat, src_addr_negate, dst_addr, logtraffic\n\nThis module provides management of firewall IPv4 policies on FortiOS devices.',
 'fortios_log_custom_field': "Configure custom log fields in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_custom_field, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log feature and custom_field category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_disk_filter': "Configure filters for local disk logging. Use these filters to determine the log messages to record according to severity and type in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, log_disk_filter, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_disk feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_disk_setting': "Settings for local disk logging in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, log_disk_setting, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_disk feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_eventfilter': "Configure log event filters in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_eventfilter, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log feature and eventfilter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer2_filter': "Filters for FortiAnalyzer in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, vdom, log_fortianalyzer2_filter\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer2 feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer2_setting': "Global FortiAnalyzer settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, log_fortianalyzer2_setting\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer2 feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer3_filter': "Filters for FortiAnalyzer in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_fortianalyzer3_filter, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer3 feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer3_setting': "Global FortiAnalyzer settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, vdom, log_fortianalyzer3_setting\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer3 feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer_filter': "Filters for FortiAnalyzer in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, log_fortianalyzer_filter, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer_override_filter': "Override filters for FortiAnalyzer in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, log_fortianalyzer_override_filter, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer feature and override_filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer_override_setting': "Override FortiAnalyzer settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, log_fortianalyzer_override_setting, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer feature and override_setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortianalyzer_setting': "Global FortiAnalyzer settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, log_fortianalyzer_setting, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortianalyzer feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortiguard_filter': "Filters for FortiCloud in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, log_fortiguard_filter, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortiguard feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortiguard_override_filter': "Override filters for FortiCloud in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, log_fortiguard_override_filter, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortiguard feature and override_filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortiguard_override_setting': "Override global FortiCloud logging settings for this VDOM in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, log_fortiguard_override_setting, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortiguard feature and override_setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_fortiguard_setting': "Configure logging to FortiCloud in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_fortiguard_setting, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_fortiguard feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_gui_display': "Configure how log messages are displayed on the GUI in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, log_gui_display, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log feature and gui_display category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_memory_filter': "Filters for memory buffer in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, log_memory_filter, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_memory feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_memory_global_setting': "Global settings for memory logging in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_memory_global_setting, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_memory feature and global_setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_memory_setting': "Settings for memory buffer in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, log_memory_setting, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_memory feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_null_device_filter': "Filters for null device logging in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, log_null_device_filter\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_null_device feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_null_device_setting': "Settings for null device logging in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, log_null_device_setting, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_null_device feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_setting': "Configure general log settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, log_setting, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd2_filter': "Filters for remote system server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, log_syslogd2_filter, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd2 feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd2_setting': "Global settings for remote syslog server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_syslogd2_setting, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd2 feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd3_filter': "Filters for remote system server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, log_syslogd3_filter, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd3 feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd3_setting': "Global settings for remote syslog server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_syslogd3_setting, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd3 feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd4_filter': "Filters for remote system server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, log_syslogd4_filter, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd4 feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd4_setting': "Global settings for remote syslog server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, vdom, log_syslogd4_setting\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd4 feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd_filter': "Filters for remote system server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, log_syslogd_filter, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd_override_filter': "Override filters for remote system server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, log_syslogd_override_filter, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd feature and override_filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd_override_setting': "Override settings for remote syslog server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, log_syslogd_override_setting, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd feature and override_setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_syslogd_setting': "Global settings for remote syslog server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, log_syslogd_setting, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_syslogd feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_threat_weight': "Configure threat weight settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, log_threat_weight, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log feature and threat_weight category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_webtrends_filter': "Filters for WebTrends in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_webtrends_filter, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_webtrends feature and filter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_log_webtrends_setting': "Settings for WebTrends in Fortinet's FortiOS and FortiGate.\n\nArguments: username, log_webtrends_setting, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify log_webtrends feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_report_chart': "Report chart widget configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, report_chart, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify report feature and chart category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_report_dataset': "Report dataset configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, report_dataset, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify report feature and dataset category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_report_layout': "Report layout configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, report_layout, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify report feature and layout category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_report_setting': "Report setting configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, report_setting, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify report feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_report_style': "Report style configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, report_style, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify report feature and style category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_report_theme': "Report themes configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, report_theme, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify report feature and theme category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_access_list': "Configure access lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_access_list, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and access_list category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_access_list6': "Configure IPv6 access lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, router_access_list6, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and access_list6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_aspath_list': "Configure Autonomous System (AS) path lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, router_aspath_list, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and aspath_list category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_auth_path': "Configure authentication based routing in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_auth_path, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and auth_path category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_bfd': "Configure BFD in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_bfd, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and bfd category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_bfd6': "Configure IPv6 BFD in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, router_bfd6, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and bfd6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_bgp': "Configure BGP in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, router_bgp, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and bgp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_community_list': "Configure community lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_community_list, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and community_list category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_isis': "Configure IS-IS in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_isis, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and isis category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_key_chain': "Configure key-chain in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_key_chain, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and key_chain category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_multicast': "Configure router multicast in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_multicast, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and multicast category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_multicast6': "Configure IPv6 multicast in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, router_multicast6, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and multicast6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_multicast_flow': "Configure multicast-flow in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_multicast_flow, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and multicast_flow category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_ospf': "Configure OSPF in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, router_ospf, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and ospf category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_ospf6': "Configure IPv6 OSPF in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_ospf6, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and ospf6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_policy': "Configure IPv4 routing policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_policy, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_policy6': "Configure IPv6 routing policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_policy6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and policy6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_prefix_list': "Configure IPv4 prefix lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, router_prefix_list\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and prefix_list category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_prefix_list6': "Configure IPv6 prefix lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_prefix_list6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and prefix_list6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_rip': "Configure RIP in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, router_rip, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and rip category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_ripng': "Configure RIPng in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_ripng, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and ripng category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_route_map': "Configure route maps in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, router_route_map, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and route_map category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_setting': "Configure router settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, router_setting, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_static': "Configure IPv4 static routing tables in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, router_static, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and static category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_router_static6': "Configure IPv6 static routing tables in Fortinet's FortiOS and FortiGate.\n\nArguments: username, router_static6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify router feature and static6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_bwl': "Configure anti-spam black/white list in Fortinet's FortiOS and FortiGate.\n\nArguments: username, spamfilter_bwl, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and bwl category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_bword': "Configure AntiSpam banned word list in Fortinet's FortiOS and FortiGate.\n\nArguments: username, spamfilter_bword, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and bword category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_dnsbl': "Configure AntiSpam DNSBL/ORBL in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, spamfilter_dnsbl\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and dnsbl category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_fortishield': "Configure FortiGuard - AntiSpam in Fortinet's FortiOS and FortiGate.\n\nArguments: username, spamfilter_fortishield, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and fortishield category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_iptrust': "Configure AntiSpam IP trust in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, spamfilter_iptrust, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and iptrust category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_mheader': "Configure AntiSpam MIME header in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, spamfilter_mheader, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and mheader category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_options': "Configure AntiSpam options in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, spamfilter_options, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and options category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_spamfilter_profile': "Configure AntiSpam profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, spamfilter_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify spamfilter feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_ssh_filter_profile': "SSH filter profile in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, ssh_filter_profile\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify ssh_filter feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_802_1X_settings': "Configure global 802.1X settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, switch_controller_802_1X_settings, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and 802_1X_settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_custom_command': "Configure the FortiGate switch controller to send custom commands to managed FortiSwitch devices in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, switch_controller_custom_command, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and custom_command category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_global': "Configure FortiSwitch global settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, switch_controller_global, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and global category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_igmp_snooping': "Configure FortiSwitch IGMP snooping global settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, switch_controller_igmp_snooping, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and igmp_snooping category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_lldp_profile': "Configure FortiSwitch LLDP profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, switch_controller_lldp_profile, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and lldp_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_lldp_settings': "Configure FortiSwitch LLDP settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_lldp_settings, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and lldp_settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_mac_sync_settings': "Configure global MAC synchronization settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, switch_controller_mac_sync_settings\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and mac_sync_settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_managed_switch': "Configure FortiSwitch devices that are managed by this FortiGate in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, switch_controller_managed_switch, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and managed_switch category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_network_monitor_settings': "Configure network monitor settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, switch_controller_network_monitor_settings, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and network_monitor_settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_qos_dot1p_map': "Configure FortiSwitch QoS 802.1p in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vdom, https, ssl_verify, password, switch_controller_qos_dot1p_map\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller_qos feature and dot1p_map category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_qos_ip_dscp_map': "Configure FortiSwitch QoS IP precedence/DSCP in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_qos_ip_dscp_map, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller_qos feature and ip_dscp_map category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_qos_qos_policy': "Configure FortiSwitch QoS policy in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_qos_qos_policy, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller_qos feature and qos_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_qos_queue_policy': "Configure FortiSwitch QoS egress queue policy in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_qos_queue_policy, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller_qos feature and queue_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_quarantine': "Configure FortiSwitch quarantine support in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_quarantine, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and quarantine category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_security_policy_802_1X': "Configure 802.1x MAC Authentication Bypass (MAB) policies in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, switch_controller_security_policy_802_1X, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller_security_policy feature and 802_1X category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_security_policy_captive_portal': "Names of VLANs that use captive portal authentication in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, switch_controller_security_policy_captive_portal\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller_security_policy feature and captive_portal category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_sflow': "Configure FortiSwitch sFlow in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, switch_controller_sflow\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and sflow category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_storm_control': "Configure FortiSwitch storm control in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, switch_controller_storm_control, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and storm_control category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_stp_settings': "Configure FortiSwitch spanning tree protocol (STP) in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, switch_controller_stp_settings, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and stp_settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_switch_group': "Configure FortiSwitch switch groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, switch_controller_switch_group, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and switch_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_switch_interface_tag': "Configure switch object tags in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_switch_interface_tag, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and switch_interface_tag category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_switch_log': "Configure FortiSwitch logging (logs are transferred to and inserted into FortiGate event log) in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, switch_controller_switch_log, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and switch_log category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_switch_profile': "Configure FortiSwitch switch profile in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_switch_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and switch_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_system': "Configure system-wide switch controller settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, switch_controller_system, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and system category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_virtual_port_pool': "Configure virtual pool in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_virtual_port_pool, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and virtual_port_pool category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_switch_controller_vlan': "Configure VLANs for switch controller in Fortinet's FortiOS and FortiGate.\n\nArguments: username, switch_controller_vlan, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify switch_controller feature and vlan category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_accprofile': "Configure access profiles for system administrators in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_accprofile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and accprofile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_admin': "Configure admin users in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, system_admin\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and admin category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_affinity_interrupt': "Configure interrupt affinity in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_affinity_interrupt, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and affinity_interrupt category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_affinity_packet_redistribution': "Configure packet redistribution in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, system_affinity_packet_redistribution, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and affinity_packet_redistribution category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_alarm': "Configure alarm in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_alarm, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and alarm category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_alias': "Configure alias command in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_alias, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and alias category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_api_user': "Configure API users in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, system_api_user\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and api_user category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_arp_table': "Configure ARP table in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_arp_table, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and arp_table category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_auto_install': "Configure USB auto installation in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_auto_install, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and auto_install category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_auto_script': "Configure auto script in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_auto_script, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and auto_script category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_automation_action': "Action for automation stitches in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_automation_action, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and automation_action category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_automation_destination': "Automation destinations in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_automation_destination, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and automation_destination category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_automation_stitch': "Automation stitches in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_automation_stitch, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and automation_stitch category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_automation_trigger': "Trigger for automation stitches in Fortinet's FortiOS and FortiGate.\n\nArguments: username, password, host, state, https, ssl_verify, system_automation_trigger, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and automation_trigger category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_autoupdate_push_update': "Configure push updates in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, system_autoupdate_push_update, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_autoupdate feature and push_update category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_autoupdate_schedule': "Configure update schedule in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, system_autoupdate_schedule, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_autoupdate feature and schedule category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_autoupdate_tunneling': "Configure web proxy tunnelling for the FDN in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, system_autoupdate_tunneling, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_autoupdate feature and tunneling category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_central_management': "Configure central management in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, system_central_management, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and central_management category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_cluster_sync': "Configure FortiGate Session Life Support Protocol (FGSP) session synchronization in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_cluster_sync, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and cluster_sync category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_console': "Configure console in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, vdom, system_console\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and console category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_csf': "Add this FortiGate to a Security Fabric or set up a new Security Fabric on this FortiGate in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_csf, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and csf category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_custom_language': "Configure custom languages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_custom_language, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and custom_language category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ddns': "Configure DDNS in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_ddns, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ddns category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_dedicated_mgmt': "Configure dedicated management in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_dedicated_mgmt, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and dedicated_mgmt category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_dhcp6_server': "Configure DHCPv6 servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_dhcp6_server, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_dhcp6 feature and server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_dhcp_server': "Configure DHCP servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_dhcp_server, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_dhcp feature and server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_dns': "Configure DNS in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_dns, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and dns category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_dns_database': "Configure DNS databases in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_dns_database, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and dns_database category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_dns_server': "Configure DNS servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_dns_server, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and dns_server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_dscp_based_priority': "Configure DSCP based priority table in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_dscp_based_priority, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and dscp_based_priority category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_email_server': "Configure the email server used by the FortiGate various things. For example, for sending email messages to users to support user authentication features in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, system_email_server, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and email_server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_external_resource': "Configure external resource in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_external_resource, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and external_resource category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_fips_cc': "Configure FIPS-CC mode in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_fips_cc, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and fips_cc category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_firmware_upgrade': 'Perform firmware upgrade on FortiGate or FortiOS (FOS) device.\n\nArguments: username, host, https, system_firmware, ssl_verify, password, vdom\n\nThis module is able to perform firmware upgrade on FortiGate or FortiOS (FOS) device by specifying firmware upgrade source, filename and whether format boot partition before upgrade. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.2',
 'fortios_system_fm': "Configure FM in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_fm, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and fm category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_fortiguard': "Configure FortiGuard services in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_fortiguard, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and fortiguard category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_fortimanager': "Configure FortiManager in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, system_fortimanager, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and fortimanager category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_fortisandbox': "Configure FortiSandbox in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_fortisandbox, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and fortisandbox category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_fsso_polling': "Configure Fortinet Single Sign On (FSSO) server in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, system_fsso_polling, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and fsso_polling category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ftm_push': "Configure FortiToken Mobile push services in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, system_ftm_push, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ftm_push category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_geoip_override': "Configure geographical location mapping for IP address(es) to override mappings from FortiGuard in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, system_geoip_override, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and geoip_override category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_global': "Configure global attributes in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, system_global, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and global category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_gre_tunnel': "Configure GRE tunnel in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, system_gre_tunnel, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and gre_tunnel category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ha': "Configure HA in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, system_ha\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ha category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ha_monitor': "Configure HA monitor in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_ha_monitor, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ha_monitor category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_interface': "Configure interfaces in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_interface, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and interface category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ipip_tunnel': "Configure IP in IP Tunneling in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_ipip_tunnel, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ipip_tunnel category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ips_urlfilter_dns': "Configure IPS URL filter DNS servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_ips_urlfilter_dns, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ips_urlfilter_dns category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ips_urlfilter_dns6': "Configure IPS URL filter IPv6 DNS servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_ips_urlfilter_dns6, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ips_urlfilter_dns6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ipv6_neighbor_cache': "Configure IPv6 neighbor cache table in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_ipv6_neighbor_cache, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ipv6_neighbor_cache category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ipv6_tunnel': "Configure IPv6/IPv4 in IPv6 tunnel in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, system_ipv6_tunnel, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ipv6_tunnel category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_link_monitor': "Configure Link Health Monitor in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_link_monitor, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and link_monitor category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_mac_address_table': "Configure MAC address tables in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, system_mac_address_table\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and mac_address_table category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_management_tunnel': "Management tunnel configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_management_tunnel, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and management_tunnel category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_mobile_tunnel': "Configure Mobile tunnels, an implementation of Network Mobility (NEMO) extensions for Mobile IPv4 RFC5177 in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_mobile_tunnel, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and mobile_tunnel category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_nat64': "Configure NAT64 in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_nat64, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and nat64 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_nd_proxy': "Configure IPv6 neighbor discovery proxy (RFC4389) in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, system_nd_proxy, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and nd_proxy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_netflow': "Configure NetFlow in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_netflow, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and netflow category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_network_visibility': "Configure network visibility settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vdom, https, ssl_verify, password, system_network_visibility\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and network_visibility category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_ntp': "Configure system NTP information in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_ntp, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and ntp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_object_tagging': "Configure object tagging in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, system_object_tagging, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and object_tagging category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_password_policy': "Configure password policy for locally defined administrator passwords and IPsec VPN pre-shared keys in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_password_policy, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and password_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_password_policy_guest_admin': "Configure the password policy for guest administrators in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, system_password_policy_guest_admin, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and password_policy_guest_admin category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_pppoe_interface': "Configure the PPPoE interfaces in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_pppoe_interface, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and pppoe_interface category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_probe_response': "Configure system probe response in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, system_probe_response, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and probe_response category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_proxy_arp': "Configure proxy-ARP in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, system_proxy_arp, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and proxy_arp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_admin': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_replacemsg_admin, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and admin category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_alertmail': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_alertmail, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and alertmail category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_auth': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_auth, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and auth category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_device_detection_portal': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_device_detection_portal, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and device_detection_portal category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_ec': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_ec, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and ec category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_fortiguard_wf': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_replacemsg_fortiguard_wf, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and fortiguard_wf category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_ftp': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_ftp, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and ftp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_group': "Configure replacement message groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_replacemsg_group, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and replacemsg_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_http': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_replacemsg_http, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and http category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_icap': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_replacemsg_icap, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and icap category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_image': "Configure replacement message images in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_image, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and replacemsg_image category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_mail': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, system_replacemsg_mail\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and mail category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_nac_quar': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_replacemsg_nac_quar, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and nac_quar category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_nntp': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_replacemsg_nntp, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and nntp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_spam': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_replacemsg_spam, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and spam category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_sslvpn': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_sslvpn, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and sslvpn category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_traffic_quota': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, system_replacemsg_traffic_quota, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and traffic_quota category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_utm': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_replacemsg_utm, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and utm category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_replacemsg_webproxy': "Replacement messages in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_replacemsg_webproxy, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_replacemsg feature and webproxy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_resource_limits': "Configure resource limits in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, system_resource_limits, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and resource_limits category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_sdn_connector': "Configure connection to SDN Connector in Fortinet's FortiOS and FortiGate.\n\nArguments: username, password, host, state, https, ssl_verify, system_sdn_connector, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and sdn_connector category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_session_helper': "Configure session helper in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_session_helper, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and session_helper category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_session_ttl': "Configure global session TTL timers for this FortiGate in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, system_session_ttl, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and session_ttl category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_settings': "Configure VDOM settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, system_settings, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_sflow': "Configure sFlow in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_sflow, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and sflow category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_sit_tunnel': "Configure IPv6 tunnel over IPv4 in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vdom, https, ssl_verify, password, system_sit_tunnel\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and sit_tunnel category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_sms_server': "Configure SMS server for sending SMS messages to support user authentication in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_sms_server, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and sms_server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_snmp_community': "SNMP community configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, system_snmp_community, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_snmp feature and community category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_snmp_sysinfo': "SNMP system info configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, system_snmp_sysinfo, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_snmp feature and sysinfo category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_snmp_user': "SNMP user configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_snmp_user, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system_snmp feature and user category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_storage': "Configure logical storage in Fortinet's FortiOS and FortiGate.\n\nArguments: username, password, host, state, https, ssl_verify, system_storage, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and storage category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_switch_interface': "Configure software switch interfaces by grouping physical and WiFi interfaces in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_switch_interface, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and switch_interface category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_tos_based_priority': "Configure Type of Service (ToS) based priority table to set network traffic priorities in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_tos_based_priority, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and tos_based_priority category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom': "Configure virtual domain in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_vdom, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom_dns': "Configure DNS servers for a non-management VDOM in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_vdom_dns, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom_dns category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom_exception': "Global configuration objects that can be configured independently for all VDOMs or for the defined VDOM scope in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, system_vdom_exception\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom_exception category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom_link': "Configure VDOM links in Fortinet's FortiOS and FortiGate.\n\nArguments: username, password, host, state, https, ssl_verify, system_vdom_link, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom_link category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom_netflow': "Configure NetFlow per VDOM in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, system_vdom_netflow, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom_netflow category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom_property': "Configure VDOM property in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_vdom_property, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom_property category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom_radius_server': "Configure a RADIUS server to use as a RADIUS Single Sign On (RSSO) server for this VDOM in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, system_vdom_radius_server, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom_radius_server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vdom_sflow': "Configure sFlow per VDOM to add or change the IP address and UDP port that FortiGate sFlow agents in this VDOM use to send sFlow datagrams to an sFlow collector in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, system_vdom_sflow, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vdom_sflow category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_virtual_wan_link': "Configure redundant internet connections using SD-WAN (formerly virtual WAN link) in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_virtual_wan_link, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and virtual_wan_link category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_virtual_wire_pair': "Configure virtual wire pairs in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_virtual_wire_pair, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and virtual_wire_pair category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_vxlan': "Configure VXLAN devices in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, system_vxlan, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and vxlan category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_wccp': "Configure WCCP in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, system_wccp, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and wccp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_system_zone': "Configure zones to group two or more interfaces. When a zone is created you can configure policies for the zone instead of individual interfaces in the zone in Fortinet's FortiOS and FortiGate.\n\nArguments: username, system_zone, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify system feature and zone category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_adgrp': "Configure FSSO groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, user_adgrp, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and adgrp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_device': "Configure devices in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_device, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and device category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_device_access_list': "Configure device access control lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_device_access_list, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and device_access_list category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_device_category': "Configure device categories in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, user_device_category, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and device_category category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_device_group': "Configure device groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, user_device_group\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and device_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_domain_controller': "Configure domain controller entries in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_domain_controller, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and domain_controller category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_fortitoken': "Configure FortiToken in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, user_fortitoken, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and fortitoken category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_fsso': "Configure Fortinet Single Sign On (FSSO) agents in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_fsso, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and fsso category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_fsso_polling': "Configure FSSO active directory servers for polling mode in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, user_fsso_polling, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and fsso_polling category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_group': "Configure user groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, user_group, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_krb_keytab': "Configure Kerberos keytab entries in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_krb_keytab, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and krb_keytab category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_ldap': "Configure LDAP server entries in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_ldap, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and ldap category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_local': "Configure local users in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, user_local\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and local category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_password_policy': "Configure user password policy in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_password_policy, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and password_policy category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_peer': "Configure peer users in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, user_peer, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and peer category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_peergrp': "Configure peer groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_peergrp, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and peergrp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_pop3': "POP3 server entry configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_pop3, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and pop3 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_quarantine': "Configure quarantine support in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, password, https, ssl_verify, user_quarantine, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and quarantine category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_radius': "Configure RADIUS server entries in Fortinet's FortiOS and FortiGate.\n\nArguments: username, user_radius, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and radius category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_security_exempt_list': "Configure security exemption list in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vdom, https, ssl_verify, password, user_security_exempt_list\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and security_exempt_list category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_setting': "Configure user authentication setting in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, user_setting, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_user_tacacsplus': "Configure TACACS+ server entries in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, user_tacacsplus, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify user feature and tacacsplus category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_voip_profile': "Configure VoIP profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, voip_profile, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify voip feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_certificate_ca': "CA certificate in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, vpn_certificate_ca, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_certificate feature and ca category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_certificate_crl': "Certificate Revocation List as a PEM file in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, vpn_certificate_crl, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_certificate feature and crl category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_certificate_local': "Local keys and certificates in Fortinet's FortiOS and FortiGate.\n\nArguments: username, vpn_certificate_local, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_certificate feature and local category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_certificate_ocsp_server': "OCSP server configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, vpn_certificate_ocsp_server, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_certificate feature and ocsp_server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_certificate_remote': "Remote certificate as a PEM file in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vpn_certificate_remote, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_certificate feature and remote category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_certificate_setting': "VPN certificate setting in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, vpn_certificate_setting, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_certificate feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_concentrator': "Concentrator configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vpn_ipsec_concentrator, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and concentrator category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_forticlient': "Configure FortiClient policy realm in Fortinet's FortiOS and FortiGate.\n\nArguments: username, vpn_ipsec_forticlient, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and forticlient category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_manualkey': "Configure IPsec manual keys in Fortinet's FortiOS and FortiGate.\n\nArguments: username, vpn_ipsec_manualkey, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and manualkey category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_manualkey_interface': "Configure IPsec manual keys in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, vpn_ipsec_manualkey_interface, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and manualkey_interface category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_phase1': "Configure VPN remote gateway in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vpn_ipsec_phase1, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and phase1 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_phase1_interface': "Configure VPN remote gateway in Fortinet's FortiOS and FortiGate.\n\nArguments: username, state, ssl_verify, vpn_ipsec_phase1_interface, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and phase1_interface category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_phase2': "Configure VPN autokey tunnel in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vpn_ipsec_phase2, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and phase2 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ipsec_phase2_interface': "Configure VPN autokey tunnel in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, vpn_ipsec_phase2_interface, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ipsec feature and phase2_interface category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_l2tp': "Configure L2TP in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vpn_l2tp, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn feature and l2tp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_pptp': "Configure PPTP in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, vpn_pptp, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn feature and pptp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ssl_settings': "Configure SSL VPN in Fortinet's FortiOS and FortiGate.\n\nArguments: username, vpn_ssl_settings, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ssl feature and settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ssl_web_host_check_software': "SSL-VPN host check software in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, vpn_ssl_web_host_check_software, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ssl_web feature and host_check_software category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ssl_web_portal': "Portal in Fortinet's FortiOS and FortiGate.\n\nArguments: username, vpn_ssl_web_portal, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ssl_web feature and portal category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ssl_web_realm': "Realm in Fortinet's FortiOS and FortiGate.\n\nArguments: username, vpn_ssl_web_realm, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ssl_web feature and realm category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ssl_web_user_bookmark': "Configure SSL VPN user bookmark in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, vpn_ssl_web_user_bookmark, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ssl_web feature and user_bookmark category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_vpn_ssl_web_user_group_bookmark': "Configure SSL VPN user group bookmark in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vpn_ssl_web_user_group_bookmark, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify vpn_ssl_web feature and user_group_bookmark category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_waf_main_class': "Hidden table for datasource in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, waf_main_class, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify waf feature and main_class category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_waf_profile': "Web application firewall configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, waf_profile, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify waf feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_waf_signature': "Hidden table for datasource in Fortinet's FortiOS and FortiGate.\n\nArguments: username, waf_signature, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify waf feature and signature category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_waf_sub_class': "Hidden table for datasource in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, waf_sub_class, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify waf feature and sub_class category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_auth_group': "Configure WAN optimization authentication groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, wanopt_auth_group\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and auth_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_cache_service': "Designate cache-service for wan-optimization and webcache in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wanopt_cache_service, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and cache_service category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_content_delivery_network_rule': "Configure WAN optimization content delivery network rules in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wanopt_content_delivery_network_rule, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and content_delivery_network_rule category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_peer': "Configure WAN optimization peers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, wanopt_peer, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and peer category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_profile': "Configure WAN optimization profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wanopt_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_remote_storage': "Configure a remote cache device as Web cache storage in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, wanopt_remote_storage, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and remote_storage category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_settings': "Configure WAN optimization settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wanopt_settings, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and settings category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wanopt_webcache': "Configure global Web cache settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, wanopt_webcache, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wanopt feature and webcache category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_debug_url': "Configure debug URL addresses in Fortinet's FortiOS and FortiGate.\n\nArguments: username, web_proxy_debug_url, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and debug_url category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_explicit': "Configure explicit Web proxy settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, web_proxy_explicit, host, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and explicit category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_forward_server': "Configure forward-server addresses in Fortinet's FortiOS and FortiGate.\n\nArguments: username, web_proxy_forward_server, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and forward_server category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_forward_server_group': "Configure a forward server group consisting or multiple forward servers. Supports failover and load balancing in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, web_proxy_forward_server_group, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and forward_server_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_global': "Configure Web proxy global settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, web_proxy_global, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and global category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_profile': "Configure web proxy profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, web_proxy_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_url_match': "Exempt URLs from web proxy forwarding and caching in Fortinet's FortiOS and FortiGate.\n\nArguments: username, web_proxy_url_match, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and url_match category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_web_proxy_wisp': "Configure Wireless Internet service provider (WISP) servers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, web_proxy_wisp, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify web_proxy feature and wisp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter': 'Configure webfilter capabilities of FortiGate and FortiOS.\n\nArguments: username, host, password, webfilter_url, vdom, webfilter_content\n\nThis module is able to configure a FortiGate or FortiOS by allowing the user to configure webfilter feature. For now it is able to handle url and content filtering capabilities. The module uses FortiGate REST API internally to configure the device.',
 'fortios_webfilter_content': "Configure Web filter banned word table in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, webfilter_content, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and content category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_content_header': "Configure content types used by Web filter in Fortinet's FortiOS and FortiGate.\n\nArguments: username, webfilter_content_header, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and content_header category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_fortiguard': "Configure FortiGuard Web Filter service in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, webfilter_fortiguard, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and fortiguard category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_ftgd_local_cat': "Configure FortiGuard Web Filter local categories in Fortinet's FortiOS and FortiGate.\n\nArguments: username, webfilter_ftgd_local_cat, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and ftgd_local_cat category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_ftgd_local_rating': "Configure local FortiGuard Web Filter local ratings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, webfilter_ftgd_local_rating, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and ftgd_local_rating category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_ips_urlfilter_cache_setting': "Configure IPS URL filter cache settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, webfilter_ips_urlfilter_cache_setting, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and ips_urlfilter_cache_setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_ips_urlfilter_setting': "Configure IPS URL filter settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, webfilter_ips_urlfilter_setting, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and ips_urlfilter_setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_ips_urlfilter_setting6': "Configure IPS URL filter settings for IPv6 in Fortinet's FortiOS and FortiGate.\n\nArguments: username, ssl_verify, host, https, webfilter_ips_urlfilter_setting6, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and ips_urlfilter_setting6 category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_override': "Configure FortiGuard Web Filter administrative overrides in Fortinet's FortiOS and FortiGate.\n\nArguments: username, webfilter_override, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and override category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_profile': "Configure Web filter profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, webfilter_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_search_engine': "Configure web filter search engines in Fortinet's FortiOS and FortiGate.\n\nArguments: username, webfilter_search_engine, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and search_engine category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_webfilter_urlfilter': "Configure URL filter lists in Fortinet's FortiOS and FortiGate.\n\nArguments: username, webfilter_urlfilter, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify webfilter feature and urlfilter category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_ap_status': "Configure access point status (rogue | accepted | suppressed) in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_ap_status, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and ap_status category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_ble_profile': "Configure Bluetooth Low Energy profile in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, wireless_controller_ble_profile, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and ble_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_bonjour_profile': "Configure Bonjour profiles. Bonjour is Apple's zero configuration networking protocol. Bonjour profiles allow APs and FortiAPs to connect to networks using Bonjour in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_bonjour_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and bonjour_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_global': "Configure wireless controller global settings in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, password, wireless_controller_global, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and global category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_anqp_3gpp_cellular': "Configure 3GPP public land mobile network (PLMN) in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_hotspot20_anqp_3gpp_cellular, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and anqp_3gpp_cellular category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_anqp_ip_address_type': "Configure IP address type availability in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, ssl_verify, state, https, wireless_controller_hotspot20_anqp_ip_address_type, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and anqp_ip_address_type category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_anqp_nai_realm': "Configure network access identifier (NAI) realm in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, wireless_controller_hotspot20_anqp_nai_realm, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and anqp_nai_realm category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.4",
 'fortios_wireless_controller_hotspot20_anqp_network_auth_type': "Configure network authentication type in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_hotspot20_anqp_network_auth_type, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and anqp_network_auth_type category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_anqp_roaming_consortium': "Configure roaming consortium in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, vdom, wireless_controller_hotspot20_anqp_roaming_consortium\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and anqp_roaming_consortium category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_anqp_venue_name': "Configure venue name duple in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, wireless_controller_hotspot20_anqp_venue_name, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and anqp_venue_name category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_h2qp_conn_capability': "Configure connection capability in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, wireless_controller_hotspot20_h2qp_conn_capability, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and h2qp_conn_capability category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_h2qp_operator_name': "Configure operator friendly name in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_hotspot20_h2qp_operator_name, ssl_verify, state, https, host, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and h2qp_operator_name category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_h2qp_osu_provider': "Configure online sign up (OSU) provider list in Fortinet's FortiOS and FortiGate.\n\nArguments: username, https, host, state, wireless_controller_hotspot20_h2qp_osu_provider, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and h2qp_osu_provider category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_h2qp_wan_metric': "Configure WAN metrics in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_hotspot20_h2qp_wan_metric, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and h2qp_wan_metric category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_hs_profile': "Configure hotspot profile in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_hotspot20_hs_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and hs_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.4",
 'fortios_wireless_controller_hotspot20_icon': "Configure OSU provider icon in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, wireless_controller_hotspot20_icon, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and icon category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_hotspot20_qos_map': "Configure QoS map set in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, wireless_controller_hotspot20_qos_map, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and qos_map category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_inter_controller': "Configure inter wireless controller operation in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, wireless_controller_inter_controller, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and inter_controller category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_qos_profile': "Configure WiFi quality of service (QoS) profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_qos_profile, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and qos_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_setting': "VDOM wireless controller configuration in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, https, ssl_verify, wireless_controller_setting, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and setting category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_timers': "Configure CAPWAP timers in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_timers, https, ssl_verify, password, host, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and timers category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_utm_profile': "Configure UTM (Unified Threat Management) profile in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, wireless_controller_utm_profile, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and utm_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_vap': "Configure Virtual Access Points (VAPs) in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_vap, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and vap category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_vap_group': "Configure virtual Access Point (VAP) groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, wireless_controller_vap_group, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and vap_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_wids_profile': "Configure wireless intrusion detection system (WIDS) profiles in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, wireless_controller_wids_profile, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and wids_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_wtp': "Configure Wireless Termination Points (WTPs), that is, FortiAPs or APs to be managed by FortiGate in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, vdom, https, ssl_verify, password, wireless_controller_wtp\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and wtp category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_wtp_group': "Configure WTP groups in Fortinet's FortiOS and FortiGate.\n\nArguments: username, wireless_controller_wtp_group, host, state, https, ssl_verify, password, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and wtp_group category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'fortios_wireless_controller_wtp_profile': "Configure WTP profiles or FortiAP profiles that define radio settings for manageable FortiAP platforms in Fortinet's FortiOS and FortiGate.\n\nArguments: username, host, state, https, ssl_verify, password, wireless_controller_wtp_profile, vdom\n\nThis module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller feature and wtp_profile category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.5",
 'frr_bgp': 'Configure global BGP settings on Free Range Routing(FRR).\n\nArguments: operation, config\n\nThis module provides configuration management of global BGP parameters on devices running Free Range Routing(FRR).',
 'frr_facts': 'Collect facts from remote devices running Free Range Routing (FRR).\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running FRR.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'ftd_configuration': 'Manages configuration on Cisco FTD devices over REST API\n\nArguments: query_params, register_as, filters, path_params, operation, data\n\nManages configuration on Cisco FTD devices including creating, updating, removing configuration objects, scheduling and staring jobs, deploying pending changes, etc. All operations are performed over REST API.',
 'ftd_file_download': 'Downloads files from Cisco FTD devices over HTTP(S)\n\nArguments: path_params, operation, destination\n\nDownloads files from Cisco FTD devices including pending changes, disk files, certificates, troubleshoot reports, and backups.',
 'ftd_file_upload': 'Uploads files to Cisco FTD devices over HTTP(S)\n\nArguments: register_as, operation, file_to_upload\n\nUploads files to Cisco FTD devices including disk files, backups, and upgrades.',
 'ftd_install': 'Installs FTD pkg image on the firewall\n\nArguments: console_username, rommon_file_location, search_domains, image_file_location, device_ip, device_sudo_password, console_port, device_hostname, dns_server, device_new_password, device_username, device_gateway, console_password, device_model, console_ip, device_netmask, image_version, force_install, device_password\n\nProvisioning module for FTD devices that installs ROMMON image (if needed) and FTD pkg image on the firewall.\nCan be used with `httpapi` and `local` connection types. The `httpapi` is preferred, the `local` connection should be used only when the device cannot be accessed via REST API.',
 'gather_facts': 'Gathers facts about remote hosts\n\nArguments: parallel\n\nThis module takes care of executing the configured facts modules, the default is to use the M(setup) module.\nThis module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks.\nIt can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host.\nAnsible provides many I(facts) about the system, automatically.',
 'gc_storage': 'This module manages objects/buckets in Google Cloud Storage.\n\nArguments: src, force, permission, dest, gs_access_key, object, bucket, mode, gs_secret_key, expiration, region, versioning, headers\n\nThis module allows users to manage their objects/buckets in Google Cloud Storage.  It allows upload and download operations and can set some canned permissions. It also allows retrieval of URLs for objects for use in playbooks, and retrieval of string contents of objects.  This module requires setting the default project in GCS prior to playbook usage.  See U(https://developers.google.com/storage/docs/reference/v1/apiversion1) for information about setting the default project.',
 'gce_eip': 'Create or Destroy Global or Regional External IP addresses.\n\nArguments: region, name, state\n\nCreate (reserve) or Destroy (release) Regional or Global IP Addresses. See U(https://cloud.google.com/compute/docs/configure-instance-ip-addresses#reserve_new_static) for more on reserving static addresses.',
 'gce_img': 'utilize GCE image resources\n\nArguments: project_id, name, family, service_account_email, pem_file, source, state, timeout, zone, description\n\nThis module can create and delete GCE private images from gzipped compressed tarball containing raw disk data or from existing detached disks in any zone. U(https://cloud.google.com/compute/docs/images)',
 'gce_instance_template': 'create or destroy instance templates of Compute Engine of GCP.\n\nArguments: description, name, tags, automatic_restart, image, service_account_permissions, pem_file, subnetwork_region, disk_type, size, network, external_ip, service_account_email, disks, nic_gce_struct, disk_auto_delete, source, state, disks_gce_struct, credentials_file, image_family, subnetwork, project_id, can_ip_forward, preemptible, metadata\n\nCreates or destroy Google instance templates of Compute Engine of Google Cloud Platform.',
 'gce_labels': "Create, Update or Destroy GCE Labels.\n\nArguments: labels, resource_url, resource_name, resource_type, resource_location\n\nCreate, Update or Destroy GCE Labels on instances, disks, snapshots, etc. When specifying the GCE resource, users may specify the full URL for the resource (its 'self_link'), or the individual parameters of the resource (type, location, name). Examples for the two options can be seen in the documentation. See U(https://cloud.google.com/compute/docs/label-or-tag-resources) for more information about GCE Labels. Labels are gradually being added to more GCE resources, so this module will need to be updated as new resources are added to the GCE (v1) API.",
 'gce_lb': 'create/destroy GCE load-balancer resources\n\nArguments: httphealthcheck_host, protocol, pem_file, members, httphealthcheck_port, httphealthcheck_name, name, external_ip, service_account_email, region, httphealthcheck_unhealthy_count, httphealthcheck_healthy_count, httphealthcheck_path, port_range, state, httphealthcheck_timeout, credentials_file, project_id, httphealthcheck_interval\n\nThis module can create and destroy Google Compute Engine C(loadbalancer) and C(httphealthcheck) resources.  The primary LB resource is the C(load_balancer) resource and the health check parameters are all prefixed with I(httphealthcheck). The full documentation for Google Compute Engine load balancing is at U(https://developers.google.com/compute/docs/load-balancing/).  However, the ansible module simplifies the configuration by following the libcloud model. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.',
 'gce_mig': 'Create, Update or Destroy a Managed Instance Group (MIG).\n\nArguments: name, zone, service_account_email, autoscaling, named_ports, state, template, credentials_file, project_id, size\n\nCreate, Update or Destroy a Managed Instance Group (MIG).  See U(https://cloud.google.com/compute/docs/instance-groups) for an overview. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.',
 'gce_net': 'create/destroy GCE networks and firewall rules\n\nArguments: src_tags, subnet_region, ipv4_range, pem_file, target_tags, allowed, fwname, name, src_range, state, subnet_name, mode, credentials_file, service_account_email, project_id, subnet_desc\n\nThis module can create and destroy Google Compute Engine networks and firewall rules U(https://cloud.google.com/compute/docs/networking). The I(name) parameter is reserved for referencing a network while the I(fwname) parameter is used to reference firewall rules. IPv4 Address ranges must be specified using the CIDR U(http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) format. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.',
 'gce_pd': 'utilize GCE persistent disk resources\n\nArguments: size_gb, project_id, name, zone, service_account_email, image, pem_file, instance_name, state, snapshot, detach_only, credentials_file, disk_type, delete_on_termination, mode\n\nThis module can create and destroy unformatted GCE persistent disks U(https://developers.google.com/compute/docs/disks#persistentdisks). It also supports attaching and detaching disks from running instances. Full install/configuration instructions for the gce* modules can be found in the comments of ansible/test/gce_tests.py.',
 'gce_snapshot': 'Create or destroy snapshots for GCE storage volumes\n\nArguments: instance_name, project_id, state, snapshot_name, credentials_file, service_account_email, disks\n\nManages snapshots for GCE instances. This module manages snapshots for the storage volumes of a GCE compute instance. If there are multiple volumes, each snapshot will be prepended with the disk name',
 'gce_tag': "add or remove tag(s) to/from GCE instances\n\nArguments: zone, tags, service_account_email, pem_file, instance_name, state, instance_pattern, project_id\n\nThis module can add or remove tags U(https://cloud.google.com/compute/docs/label-or-tag-resources#tags) to/from GCE instances.  Use 'instance_pattern' to update multiple instances in a specify zone.",
 'gconftool2': 'Edit GNOME Configurations\n\nArguments: state, value_type, key, direct, value, config_source\n\nThis module allows for the manipulation of GNOME 2 Configuration via gconftool-2.  Please see the gconftool-2(1) man pages for more details.',
 'gcp_appengine_firewall_rule': 'Creates a GCP FirewallRule\n\nArguments: action, priority, state, description, source_range\n\nA single firewall rule that is evaluated against incoming traffic and provides an action to take on matched requests.',
 'gcp_appengine_firewall_rule_info': 'Gather info for GCP FirewallRule\n\nArguments: \n\nGather info for GCP FirewallRule',
 'gcp_bigquery_dataset': 'Creates a GCP Dataset\n\nArguments: default_partition_expiration_ms, name, default_table_expiration_ms, labels, friendly_name, access, state, location, dataset_reference, description\n\nDatasets allow you to organize and control access to your tables.',
 'gcp_bigquery_dataset_info': 'Gather info for GCP Dataset\n\nArguments: \n\nGather info for GCP Dataset\nThis module was called C(gcp_bigquery_dataset_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_bigquery_table': 'Creates a GCP Table\n\nArguments: clustering, table_reference, name, encryption_configuration, description, labels, friendly_name, dataset, external_data_configuration, state, num_rows, time_partitioning, expiration_time, view, schema\n\nA Table that belongs to a Dataset .',
 'gcp_bigquery_table_info': 'Gather info for GCP Table\n\nArguments: dataset\n\nGather info for GCP Table\nThis module was called C(gcp_bigquery_table_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_cloudbuild_trigger': 'Creates a GCP Trigger\n\nArguments: description, ignored_files, filename, disabled, state, build, included_files, substitutions, id, trigger_template\n\nConfiguration for an automated build in response to source repository changes.',
 'gcp_cloudbuild_trigger_info': 'Gather info for GCP Trigger\n\nArguments: \n\nGather info for GCP Trigger\nThis module was called C(gcp_cloudbuild_trigger_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_cloudfunctions_cloud_function': 'Creates a GCP CloudFunction\n\nArguments: labels, available_memory_mb, https_trigger, entry_point, source_archive_url, source_upload_url, description, name, source_repository, trigger_http, state, location, timeout, environment_variables, runtime, event_trigger\n\nA Cloud Function that contains user computation executed in response to an event.',
 'gcp_cloudfunctions_cloud_function_info': 'Gather info for GCP CloudFunction\n\nArguments: location\n\nGather info for GCP CloudFunction',
 'gcp_cloudscheduler_job': 'Creates a GCP Job\n\nArguments: app_engine_http_target, name, schedule, region, http_target, time_zone, state, pubsub_target, retry_config, description\n\nA scheduled job that can publish a pubsub message or a http request every X interval of time, using crontab format string.\nTo use Cloud Scheduler your project must contain an App Engine app that is located in one of the supported regions. If your project does not have an App Engine app, you must create one.',
 'gcp_cloudscheduler_job_info': 'Gather info for GCP Job\n\nArguments: region\n\nGather info for GCP Job',
 'gcp_cloudtasks_queue': 'Creates a GCP Queue\n\nArguments: status, state, name, rate_limits, retry_config, app_engine_routing_override, location\n\nA named resource to which messages are sent by publishers.',
 'gcp_cloudtasks_queue_info': 'Gather info for GCP Queue\n\nArguments: location\n\nGather info for GCP Queue',
 'gcp_compute_address': "Creates a GCP Address\n\nArguments: description, region, state, network_tier, address, subnetwork, address_type, name\n\nRepresents an Address resource.\nEach virtual machine instance has an ephemeral internal IP address and, optionally, an external IP address. To communicate between instances on the same network, you can use an instance's internal IP address. To communicate with the Internet and instances outside of the same network, you must specify the instance's external IP address.\nInternal IP addresses are ephemeral and only belong to an instance for the lifetime of the instance; if the instance is deleted and recreated, the instance is assigned a new internal IP address, either by Compute Engine or by you. External IP addresses can be either ephemeral or static.",
 'gcp_compute_address_info': 'Gather info for GCP Address\n\nArguments: region, filters\n\nGather info for GCP Address\nThis module was called C(gcp_compute_address_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_autoscaler': 'Creates a GCP Autoscaler\n\nArguments: state, target, zone, name, autoscaling_policy, description\n\nRepresents an Autoscaler resource.\nAutoscalers allow you to automatically scale virtual machine instances in managed instance groups according to an autoscaling policy that you define.',
 'gcp_compute_autoscaler_info': 'Gather info for GCP Autoscaler\n\nArguments: filters, zone\n\nGather info for GCP Autoscaler',
 'gcp_compute_backend_bucket': 'Creates a GCP BackendBucket\n\nArguments: state, bucket_name, description, enable_cdn, cdn_policy, name\n\nBackend buckets allow you to use Google Cloud Storage buckets with HTTP(S) load balancing.\nAn HTTP(S) load balancer can direct traffic to specified URLs to a backend bucket rather than a backend service. It can send requests for static content to a Cloud Storage bucket and requests for dynamic content a virtual machine instance.',
 'gcp_compute_backend_bucket_info': 'Gather info for GCP BackendBucket\n\nArguments: filters\n\nGather info for GCP BackendBucket\nThis module was called C(gcp_compute_backend_bucket_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_backend_service': 'Creates a GCP BackendService\n\nArguments: protocol, description, timeout_sec, health_checks, port_name, enable_cdn, cdn_policy, session_affinity, security_policy, load_balancing_scheme, name, affinity_cookie_ttl_sec, connection_draining, state, backends, iap\n\nA Backend Service defines a group of virtual machines that will serve traffic for load balancing. This resource is a global backend service, appropriate for external load balancing or self-managed internal load balancing.\nFor managed internal load balancing, use a regional backend service instead.\nCurrently self-managed internal load balancing is only available in beta.',
 'gcp_compute_backend_service_info': 'Gather info for GCP BackendService\n\nArguments: filters\n\nGather info for GCP BackendService\nThis module was called C(gcp_compute_backend_service_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_disk': 'Creates a GCP Disk\n\nArguments: size_gb, type, description, zone, source_snapshot_encryption_key, labels, state, source_snapshot, licenses, disk_encryption_key, source_image_encryption_key, source_image, physical_block_size_bytes, name\n\nPersistent disks are durable storage devices that function similarly to the physical disks in a desktop or a server. Compute Engine manages the hardware behind these devices to ensure data redundancy and optimize performance for you. Persistent disks are available as either standard hard disk drives (HDD) or solid-state drives (SSD).\nPersistent disks are located independently from your virtual machine instances, so you can detach or move persistent disks to keep your data even after you delete your instances. Persistent disk performance scales automatically with size, so you can resize your existing persistent disks or add more persistent disks to an instance to meet your performance and storage space requirements.\nAdd a persistent disk to your instance when you need reliable and affordable storage with consistent performance characteristics.',
 'gcp_compute_disk_info': 'Gather info for GCP Disk\n\nArguments: filters, zone\n\nGather info for GCP Disk\nThis module was called C(gcp_compute_disk_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_firewall': 'Creates a GCP Firewall\n\nArguments: disabled, direction, source_ranges, description, source_tags, target_service_accounts, destination_ranges, state, name, priority, target_tags, source_service_accounts, allowed, denied, network\n\nEach network has its own firewall controlling access to and from the instances.\nAll traffic to instances, even from other instances, is blocked by the firewall unless firewall rules are created to allow it.\nThe default network has automatically created firewall rules that are shown in default firewall rules. No manually created network has automatically created firewall rules except for a default "allow" rule for outgoing traffic and a default "deny" for incoming traffic. For all networks except the default network, you must create any firewall rules you need.',
 'gcp_compute_firewall_info': 'Gather info for GCP Firewall\n\nArguments: filters\n\nGather info for GCP Firewall\nThis module was called C(gcp_compute_firewall_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_forwarding_rule': 'Creates a GCP ForwardingRule\n\nArguments: description, ip_protocol, load_balancing_scheme, network_tier, ip_address, network, backend_service, name, region, service_label, port_range, state, all_ports, target, ip_version, subnetwork, ports\n\nA ForwardingRule resource. A ForwardingRule resource specifies which pool of target virtual machines to forward a packet to if it matches the given [IPAddress, IPProtocol, portRange] tuple.',
 'gcp_compute_forwarding_rule_info': 'Gather info for GCP ForwardingRule\n\nArguments: region, filters\n\nGather info for GCP ForwardingRule\nThis module was called C(gcp_compute_forwarding_rule_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_global_address': 'Creates a GCP GlobalAddress\n\nArguments: description, name, state, purpose, prefix_length, address, ip_version, address_type, network\n\nRepresents a Global Address resource. Global addresses are used for HTTP(S) load balancing.',
 'gcp_compute_global_address_info': 'Gather info for GCP GlobalAddress\n\nArguments: filters\n\nGather info for GCP GlobalAddress\nThis module was called C(gcp_compute_global_address_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_global_forwarding_rule': 'Creates a GCP GlobalForwardingRule\n\nArguments: load_balancing_scheme, description, ip_protocol, port_range, state, target, ip_version, ip_address, network, name\n\nRepresents a GlobalForwardingRule resource. Global forwarding rules are used to forward traffic to the correct load balancer for HTTP load balancing. Global forwarding rules can only be used for HTTP load balancing.\nFor more information, see U(https://cloud.google.com/compute/docs/load-balancing/http/) .',
 'gcp_compute_global_forwarding_rule_info': 'Gather info for GCP GlobalForwardingRule\n\nArguments: filters\n\nGather info for GCP GlobalForwardingRule\nThis module was called C(gcp_compute_global_forwarding_rule_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_health_check': 'Creates a GCP HealthCheck\n\nArguments: check_interval_sec, description, name, timeout_sec, healthy_threshold, state, unhealthy_threshold, http_health_check, ssl_health_check, tcp_health_check, type, https_health_check\n\nHealth Checks determine whether instances are responsive and able to do work.\nThey are an important part of a comprehensive load balancing configuration, as they enable monitoring instances behind load balancers.\nHealth Checks poll instances at a specified interval. Instances that do not respond successfully to some number of probes in a row are marked as unhealthy. No new connections are sent to unhealthy instances, though existing connections will continue. The health check will continue to poll unhealthy instances. If an instance later responds successfully to some number of consecutive probes, it is marked healthy again and can receive new connections.',
 'gcp_compute_health_check_info': 'Gather info for GCP HealthCheck\n\nArguments: filters\n\nGather info for GCP HealthCheck\nThis module was called C(gcp_compute_health_check_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_http_health_check': 'Creates a GCP HttpHealthCheck\n\nArguments: check_interval_sec, description, name, timeout_sec, healthy_threshold, host, unhealthy_threshold, state, port, request_path\n\nAn HttpHealthCheck resource. This resource defines a template for how individual VMs should be checked for health, via HTTP.',
 'gcp_compute_http_health_check_info': 'Gather info for GCP HttpHealthCheck\n\nArguments: filters\n\nGather info for GCP HttpHealthCheck\nThis module was called C(gcp_compute_http_health_check_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_https_health_check': 'Creates a GCP HttpsHealthCheck\n\nArguments: check_interval_sec, description, name, timeout_sec, healthy_threshold, host, unhealthy_threshold, state, port, request_path\n\nAn HttpsHealthCheck resource. This resource defines a template for how individual VMs should be checked for health, via HTTPS.',
 'gcp_compute_https_health_check_info': 'Gather info for GCP HttpsHealthCheck\n\nArguments: filters\n\nGather info for GCP HttpsHealthCheck\nThis module was called C(gcp_compute_https_health_check_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_image': 'Creates a GCP Image\n\nArguments: source_disk, disk_size_gb, description, family, labels, guest_os_features, image_encryption_key, raw_disk, name, source_type, state, source_disk_encryption_key, licenses, source_disk_id\n\nRepresents an Image resource.\nGoogle Compute Engine uses operating system images to create the root persistent disks for your instances. You specify an image when you create an instance. Images contain a boot loader, an operating system, and a root file system. Linux operating system images are also capable of running containers on Compute Engine.\nImages can be either public or custom.\nPublic images are provided and maintained by Google, open-source communities, and third-party vendors. By default, all projects have access to these images and can use them to create instances. Custom images are available only to your project. You can create a custom image from root persistent disks and other images. Then, use the custom image to create an instance.',
 'gcp_compute_image_info': 'Gather info for GCP Image\n\nArguments: filters\n\nGather info for GCP Image\nThis module was called C(gcp_compute_image_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_instance': "Creates a GCP Instance\n\nArguments: status, hostname, can_ip_forward, tags, service_accounts, labels, guest_accelerators, deletion_protection, machine_type, shielded_instance_config, scheduling, network_interfaces, name, zone, disks, state, min_cpu_platform, metadata\n\nAn instance is a virtual machine (VM) hosted on Google's infrastructure.",
 'gcp_compute_instance_group': 'Creates a GCP InstanceGroup\n\nArguments: description, zone, named_ports, region, instances, state, subnetwork, network, name\n\nRepresents an Instance Group resource. Instance groups are self-managed and can contain identical or different instances. Instance groups do not use an instance template. Unlike managed instance groups, you must create and add instances to an instance group manually.',
 'gcp_compute_instance_group_info': 'Gather info for GCP InstanceGroup\n\nArguments: filters, zone\n\nGather info for GCP InstanceGroup\nThis module was called C(gcp_compute_instance_group_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_instance_group_manager': 'Creates a GCP InstanceGroupManager\n\nArguments: instance_template, description, zone, base_instance_name, state, name, named_ports, target_size, target_pools\n\nCreates a managed instance group using the information that you specify in the request. After the group is created, it schedules an action to create instances in the group using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances.\nA managed instance group can have up to 1000 VM instances per group.',
 'gcp_compute_instance_group_manager_info': 'Gather info for GCP InstanceGroupManager\n\nArguments: filters, zone\n\nGather info for GCP InstanceGroupManager\nThis module was called C(gcp_compute_instance_group_manager_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_instance_info': 'Gather info for GCP Instance\n\nArguments: filters, zone\n\nGather info for GCP Instance\nThis module was called C(gcp_compute_instance_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_instance_template': 'Creates a GCP InstanceTemplate\n\nArguments: state, properties, name, description\n\nDefines an Instance Template resource that provides configuration settings for your virtual machine instances. Instance templates are not tied to the lifetime of an instance and can be used and reused as to deploy virtual machines. You can also use different templates to create different virtual machine configurations. Instance templates are required when you create a managed instance group.\nTip: Disks should be set to autoDelete=true so that leftover disks are not left behind on machine deletion.',
 'gcp_compute_instance_template_info': 'Gather info for GCP InstanceTemplate\n\nArguments: filters\n\nGather info for GCP InstanceTemplate\nThis module was called C(gcp_compute_instance_template_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_interconnect_attachment': 'Creates a GCP InterconnectAttachment\n\nArguments: edge_availability_domain, interconnect, description, state, region, candidate_subnets, bandwidth, vlan_tag8021q, router, type, admin_enabled, name\n\nRepresents an InterconnectAttachment (VLAN attachment) resource. For more information, see Creating VLAN Attachments.',
 'gcp_compute_interconnect_attachment_info': 'Gather info for GCP InterconnectAttachment\n\nArguments: region, filters\n\nGather info for GCP InterconnectAttachment\nThis module was called C(gcp_compute_interconnect_attachment_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_network': 'Creates a GCP Network\n\nArguments: state, description, name, ipv4_range, routing_config, auto_create_subnetworks\n\nManages a VPC network or legacy network resource on GCP.',
 'gcp_compute_network_info': 'Gather info for GCP Network\n\nArguments: filters\n\nGather info for GCP Network\nThis module was called C(gcp_compute_network_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_region_disk': 'Creates a GCP RegionDisk\n\nArguments: size_gb, description, source_snapshot, region, labels, state, type, licenses, disk_encryption_key, source_snapshot_encryption_key, replica_zones, physical_block_size_bytes, name\n\nPersistent disks are durable storage devices that function similarly to the physical disks in a desktop or a server. Compute Engine manages the hardware behind these devices to ensure data redundancy and optimize performance for you. Persistent disks are available as either standard hard disk drives (HDD) or solid-state drives (SSD).\nPersistent disks are located independently from your virtual machine instances, so you can detach or move persistent disks to keep your data even after you delete your instances. Persistent disk performance scales automatically with size, so you can resize your existing persistent disks or add more persistent disks to an instance to meet your performance and storage space requirements.\nAdd a persistent disk to your instance when you need reliable and affordable storage with consistent performance characteristics.',
 'gcp_compute_region_disk_info': 'Gather info for GCP RegionDisk\n\nArguments: region, filters\n\nGather info for GCP RegionDisk\nThis module was called C(gcp_compute_region_disk_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_route': "Creates a GCP Route\n\nArguments: dest_range, network, next_hop_instance, tags, description, next_hop_gateway, state, priority, next_hop_ip, next_hop_vpn_tunnel, name\n\nRepresents a Route resource.\nA route is a rule that specifies how certain packets should be handled by the virtual network. Routes are associated with virtual machines by tag, and the set of routes for a particular virtual machine is called its routing table. For each packet leaving a virtual machine, the system searches that virtual machine's routing table for a single best matching route.\nRoutes match packets by destination IP address, preferring smaller or more specific ranges over larger ones. If there is a tie, the system selects the route with the smallest priority value. If there is still a tie, it uses the layer three and four packet headers to select just one of the remaining matching routes. The packet is then forwarded as specified by the next_hop field of the winning route -- either to another virtual machine destination, a virtual machine gateway or a Compute Engine-operated gateway. Packets that do not match any route in the sending virtual machine's routing table will be dropped.\nA Route resource must have exactly one specification of either nextHopGateway, nextHopInstance, nextHopIp, or nextHopVpnTunnel.",
 'gcp_compute_route_info': 'Gather info for GCP Route\n\nArguments: filters\n\nGather info for GCP Route\nThis module was called C(gcp_compute_route_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_router': 'Creates a GCP Router\n\nArguments: bgp, state, network, name, region, description\n\nRepresents a Router resource.',
 'gcp_compute_router_info': 'Gather info for GCP Router\n\nArguments: region, filters\n\nGather info for GCP Router\nThis module was called C(gcp_compute_router_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_snapshot': 'Creates a GCP Snapshot\n\nArguments: source_disk, name, zone, description, labels, state, snapshot_encryption_key, source_disk_encryption_key\n\nRepresents a Persistent Disk Snapshot resource.\nUse snapshots to back up data from your persistent disks. Snapshots are different from public images and custom images, which are used primarily to create instances or configure instance templates. Snapshots are useful for periodic backup of the data on your persistent disks. You can create snapshots from persistent disks even while they are attached to running instances.\nSnapshots are incremental, so you can create regular snapshots on a persistent disk faster and at a much lower cost than if you regularly created a full image of the disk.',
 'gcp_compute_snapshot_info': 'Gather info for GCP Snapshot\n\nArguments: filters\n\nGather info for GCP Snapshot',
 'gcp_compute_ssl_certificate': 'Creates a GCP SslCertificate\n\nArguments: name, private_key, state, certificate, description\n\nAn SslCertificate resource, used for HTTPS load balancing. This resource provides a mechanism to upload an SSL key and certificate to the load balancer to serve secure connections from the user.',
 'gcp_compute_ssl_certificate_info': 'Gather info for GCP SslCertificate\n\nArguments: filters\n\nGather info for GCP SslCertificate\nThis module was called C(gcp_compute_ssl_certificate_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_ssl_policy': 'Creates a GCP SslPolicy\n\nArguments: profile, state, description, custom_features, min_tls_version, name\n\nRepresents a SSL policy. SSL policies give you the ability to control the features of SSL that your SSL proxy or HTTPS load balancer negotiates.',
 'gcp_compute_ssl_policy_info': 'Gather info for GCP SslPolicy\n\nArguments: filters\n\nGather info for GCP SslPolicy\nThis module was called C(gcp_compute_ssl_policy_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_subnetwork': 'Creates a GCP Subnetwork\n\nArguments: network, private_ip_google_access, region, description, state, enable_flow_logs, secondary_ip_ranges, ip_cidr_range, name\n\nA VPC network is a virtual version of the traditional physical networks that exist within and between physical data centers. A VPC network provides connectivity for your Compute Engine virtual machine (VM) instances, Container Engine containers, App Engine Flex services, and other network-related resources.\nEach GCP project contains one or more VPC networks. Each VPC network is a global entity spanning all GCP regions. This global VPC network allows VM instances and other resources to communicate with each other via internal, private IP addresses.\nEach VPC network is subdivided into subnets, and each subnet is contained within a single region. You can have more than one subnet in a region for a given VPC network. Each subnet has a contiguous private RFC1918 IP space. You create instances, containers, and the like in these subnets.\nWhen you create an instance, you must create it in a subnet, and the instance draws its internal IP address from that subnet.\nVirtual machine (VM) instances in a VPC network can communicate with instances in all other subnets of the same VPC network, regardless of region, using their RFC1918 private IP addresses. You can isolate portions of the network, even entire subnets, using firewall rules.',
 'gcp_compute_subnetwork_info': 'Gather info for GCP Subnetwork\n\nArguments: region, filters\n\nGather info for GCP Subnetwork\nThis module was called C(gcp_compute_subnetwork_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_target_http_proxy': 'Creates a GCP TargetHttpProxy\n\nArguments: state, url_map, description, name\n\nRepresents a TargetHttpProxy resource, which is used by one or more global forwarding rule to route incoming HTTP requests to a URL map.',
 'gcp_compute_target_http_proxy_info': 'Gather info for GCP TargetHttpProxy\n\nArguments: filters\n\nGather info for GCP TargetHttpProxy\nThis module was called C(gcp_compute_target_http_proxy_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_target_https_proxy': 'Creates a GCP TargetHttpsProxy\n\nArguments: state, ssl_policy, ssl_certificates, description, url_map, quic_override, name\n\nRepresents a TargetHttpsProxy resource, which is used by one or more global forwarding rule to route incoming HTTPS requests to a URL map.',
 'gcp_compute_target_https_proxy_info': 'Gather info for GCP TargetHttpsProxy\n\nArguments: filters\n\nGather info for GCP TargetHttpsProxy\nThis module was called C(gcp_compute_target_https_proxy_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_target_pool': 'Creates a GCP TargetPool\n\nArguments: health_check, failover_ratio, description, region, name, backup_pool, instances, state, session_affinity\n\nRepresents a TargetPool resource, used for Load Balancing.',
 'gcp_compute_target_pool_info': 'Gather info for GCP TargetPool\n\nArguments: region, filters\n\nGather info for GCP TargetPool\nThis module was called C(gcp_compute_target_pool_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_target_ssl_proxy': 'Creates a GCP TargetSslProxy\n\nArguments: state, proxy_header, ssl_policy, service, ssl_certificates, name, description\n\nRepresents a TargetSslProxy resource, which is used by one or more global forwarding rule to route incoming SSL requests to a backend service.',
 'gcp_compute_target_ssl_proxy_info': 'Gather info for GCP TargetSslProxy\n\nArguments: filters\n\nGather info for GCP TargetSslProxy\nThis module was called C(gcp_compute_target_ssl_proxy_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_target_tcp_proxy': 'Creates a GCP TargetTcpProxy\n\nArguments: state, proxy_header, description, service, name\n\nRepresents a TargetTcpProxy resource, which is used by one or more global forwarding rule to route incoming TCP requests to a Backend service.',
 'gcp_compute_target_tcp_proxy_info': 'Gather info for GCP TargetTcpProxy\n\nArguments: filters\n\nGather info for GCP TargetTcpProxy\nThis module was called C(gcp_compute_target_tcp_proxy_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_target_vpn_gateway': 'Creates a GCP TargetVpnGateway\n\nArguments: region, state, network, name, description\n\nRepresents a VPN gateway running in GCP. This virtual device is managed by Google, but used only by you.',
 'gcp_compute_target_vpn_gateway_info': 'Gather info for GCP TargetVpnGateway\n\nArguments: region, filters\n\nGather info for GCP TargetVpnGateway\nThis module was called C(gcp_compute_target_vpn_gateway_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_url_map': 'Creates a GCP UrlMap\n\nArguments: host_rules, default_service, tests, description, path_matchers, state, name\n\nUrlMaps are used to route requests to a backend service based on rules that you define for the host and path of an incoming URL.',
 'gcp_compute_url_map_info': 'Gather info for GCP UrlMap\n\nArguments: filters\n\nGather info for GCP UrlMap\nThis module was called C(gcp_compute_url_map_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_compute_vpn_tunnel': 'Creates a GCP VpnTunnel\n\nArguments: remote_traffic_selector, name, region, description, peer_ip, state, target_vpn_gateway, shared_secret, router, ike_version, local_traffic_selector\n\nVPN tunnel resource.',
 'gcp_compute_vpn_tunnel_info': 'Gather info for GCP VpnTunnel\n\nArguments: region, filters\n\nGather info for GCP VpnTunnel\nThis module was called C(gcp_compute_vpn_tunnel_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_container_cluster': 'Creates a GCP Cluster\n\nArguments: initial_node_count, tpu_ipv4_cidr_block, kubectl_context, cluster_ipv4_cidr, ip_allocation_policy, enable_tpu, master_auth, locations, network_policy, node_config, resource_labels, addons_config, monitoring_service, private_cluster_config, description, kubectl_path, legacy_abac, name, network, state, default_max_pods_constraint, location, subnetwork, logging_service\n\nA Google Container Engine cluster.',
 'gcp_container_cluster_info': 'Gather info for GCP Cluster\n\nArguments: location\n\nGather info for GCP Cluster\nThis module was called C(gcp_container_cluster_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_container_node_pool': "Creates a GCP NodePool\n\nArguments: initial_node_count, management, name, config, autoscaling, state, cluster, max_pods_constraint, version, location, conditions\n\nNodePool contains the name and configuration for a cluster's node pool.\nNode pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.",
 'gcp_container_node_pool_info': 'Gather info for GCP NodePool\n\nArguments: cluster, location\n\nGather info for GCP NodePool\nThis module was called C(gcp_container_node_pool_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_dns_managed_zone': 'Creates a GCP ManagedZone\n\nArguments: description, name_server_set, dnssec_config, dns_name, labels, private_visibility_config, visibility, state, name\n\nA zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.',
 'gcp_dns_managed_zone_info': 'Gather info for GCP ManagedZone\n\nArguments: dns_name\n\nGather info for GCP ManagedZone\nThis module was called C(gcp_dns_managed_zone_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_dns_resource_record_set': 'Creates a GCP ResourceRecordSet\n\nArguments: state, target, ttl, managed_zone, type, name\n\nA single DNS record that exists on a domain name (i.e. in a managed zone).\nThis record defines the information about the domain and where the domain / subdomains direct to.\nThe record will include the domain/subdomain name, a type (i.e. A, AAA, CAA, MX, CNAME, NS, etc) .',
 'gcp_dns_resource_record_set_info': 'Gather info for GCP ResourceRecordSet\n\nArguments: managed_zone\n\nGather info for GCP ResourceRecordSet\nThis module was called C(gcp_dns_resource_record_set_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_filestore_instance': 'Creates a GCP Instance\n\nArguments: name, zone, file_shares, labels, state, tier, networks, description\n\nA Google Cloud Filestore instance.',
 'gcp_filestore_instance_info': 'Gather info for GCP Instance\n\nArguments: zone\n\nGather info for GCP Instance',
 'gcp_iam_role': 'Creates a GCP Role\n\nArguments: state, description, name, title, included_permissions, stage\n\nA role in the Identity and Access Management API .',
 'gcp_iam_role_info': 'Gather info for GCP Role\n\nArguments: \n\nGather info for GCP Role\nThis module was called C(gcp_iam_role_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_iam_service_account': 'Creates a GCP ServiceAccount\n\nArguments: state, display_name, name\n\nA service account in the Identity and Access Management API.',
 'gcp_iam_service_account_info': 'Gather info for GCP ServiceAccount\n\nArguments: \n\nGather info for GCP ServiceAccount\nThis module was called C(gcp_iam_service_account_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_iam_service_account_key': 'Creates a GCP ServiceAccountKey\n\nArguments: path, state, private_key_type, key_algorithm, service_account\n\nA service account in the Identity and Access Management API.',
 'gcp_kms_crypto_key': 'Creates a GCP CryptoKey\n\nArguments: state, version_template, key_ring, rotation_period, labels, name, purpose\n\nA `CryptoKey` represents a logical key that can be used for cryptographic operations.',
 'gcp_kms_crypto_key_info': 'Gather info for GCP CryptoKey\n\nArguments: key_ring\n\nGather info for GCP CryptoKey',
 'gcp_kms_key_ring': 'Creates a GCP KeyRing\n\nArguments: state, name, location\n\nA `KeyRing` is a toplevel logical grouping of `CryptoKeys`.',
 'gcp_kms_key_ring_info': 'Gather info for GCP KeyRing\n\nArguments: location\n\nGather info for GCP KeyRing',
 'gcp_mlengine_model': 'Creates a GCP Model\n\nArguments: default_version, name, labels, regions, state, online_prediction_console_logging, online_prediction_logging, description\n\nRepresents a machine learning solution.\nA model can have multiple versions, each of which is a deployed, trained model ready to receive prediction requests. The model itself is just a container.',
 'gcp_mlengine_model_info': 'Gather info for GCP Model\n\nArguments: \n\nGather info for GCP Model',
 'gcp_mlengine_version': 'Creates a GCP Version\n\nArguments: description, auto_scaling, name, manual_scaling, labels, service_account, is_default, framework, state, runtime_version, deployment_uri, model, machine_type, prediction_class, python_version\n\nEach version is a trained model deployed in the cloud, ready to handle prediction requests. A model can have multiple versions .',
 'gcp_mlengine_version_info': 'Gather info for GCP Version\n\nArguments: model\n\nGather info for GCP Version',
 'gcp_pubsub_subscription': 'Creates a GCP Subscription\n\nArguments: ack_deadline_seconds, message_retention_duration, name, push_config, labels, topic, state, retain_acked_messages, expiration_policy\n\nA named resource representing the stream of messages from a single, specific topic, to be delivered to the subscribing application.',
 'gcp_pubsub_subscription_info': 'Gather info for GCP Subscription\n\nArguments: \n\nGather info for GCP Subscription\nThis module was called C(gcp_pubsub_subscription_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_pubsub_topic': 'Creates a GCP Topic\n\nArguments: kms_key_name, state, labels, name, message_storage_policy\n\nA named resource to which messages are sent by publishers.',
 'gcp_pubsub_topic_info': 'Gather info for GCP Topic\n\nArguments: \n\nGather info for GCP Topic\nThis module was called C(gcp_pubsub_topic_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_redis_instance': 'Creates a GCP Instance\n\nArguments: redis_configs, name, region, labels, memory_size_gb, state, reserved_ip_range, tier, alternative_location_id, location_id, redis_version, authorized_network, display_name\n\nA Google Cloud Redis instance.',
 'gcp_redis_instance_info': 'Gather info for GCP Instance\n\nArguments: region\n\nGather info for GCP Instance\nThis module was called C(gcp_redis_instance_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_resourcemanager_project': 'Creates a GCP Project\n\nArguments: state, labels, name, parent, id\n\nRepresents a GCP Project. A project is a container for ACLs, APIs, App Engine Apps, VMs, and other Google Cloud Platform resources.',
 'gcp_resourcemanager_project_info': 'Gather info for GCP Project\n\nArguments: \n\nGather info for GCP Project\nThis module was called C(gcp_resourcemanager_project_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_sourcerepo_repository': 'Creates a GCP Repository\n\nArguments: state, name\n\nA repository (or repo) is a Git repository storing versioned source content.',
 'gcp_sourcerepo_repository_info': 'Gather info for GCP Repository\n\nArguments: \n\nGather info for GCP Repository\nThis module was called C(gcp_sourcerepo_repository_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_spanner_database': 'Creates a GCP Database\n\nArguments: instance, state, extra_statements, name\n\nA Cloud Spanner Database which is hosted on a Spanner instance.',
 'gcp_spanner_database_info': 'Gather info for GCP Database\n\nArguments: instance\n\nGather info for GCP Database\nThis module was called C(gcp_spanner_database_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_spanner_instance': 'Creates a GCP Instance\n\nArguments: state, display_name, name, node_count, labels, config\n\nAn isolated set of Cloud Spanner resources on which databases can be hosted.',
 'gcp_spanner_instance_info': 'Gather info for GCP Instance\n\nArguments: \n\nGather info for GCP Instance\nThis module was called C(gcp_spanner_instance_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_sql_database': "Creates a GCP Database\n\nArguments: collation, instance, state, charset, name\n\nRepresents a SQL database inside the Cloud SQL instance, hosted in Google's cloud.",
 'gcp_sql_database_info': 'Gather info for GCP Database\n\nArguments: instance\n\nGather info for GCP Database\nThis module was called C(gcp_sql_database_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_sql_instance': "Creates a GCP Instance\n\nArguments: ipv6_address, backend_type, name, master_instance_name, settings, region, connection_name, max_disk_size, instance_type, state, database_version, failover_replica, replica_configuration\n\nRepresents a Cloud SQL instance. Cloud SQL instances are SQL databases hosted in Google's cloud. The Instances resource provides methods for common configuration and management tasks.",
 'gcp_sql_instance_info': 'Gather info for GCP Instance\n\nArguments: \n\nGather info for GCP Instance\nThis module was called C(gcp_sql_instance_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_sql_user': 'Creates a GCP User\n\nArguments: instance, state, password, host, name\n\nThe Users resource represents a database user in a Cloud SQL instance.',
 'gcp_sql_user_info': 'Gather info for GCP User\n\nArguments: instance\n\nGather info for GCP User\nThis module was called C(gcp_sql_user_facts) before Ansible 2.9. The usage has not changed.',
 'gcp_storage_bucket': "Creates a GCP Bucket\n\nArguments: website, logging, name, metageneration, predefined_default_object_acl, acl, project, state, storage_class, default_object_acl, location, cors, owner, lifecycle, versioning\n\nThe Buckets resource represents a bucket in Google Cloud Storage. There is a single global namespace shared by all buckets. For more information, see Bucket Name Requirements.\nBuckets contain objects which can be accessed by their own methods. In addition to the acl property, buckets contain bucketAccessControls, for use in fine-grained manipulation of an existing bucket's access controls.\nA bucket is always owned by the project team owners group.",
 'gcp_storage_bucket_access_control': "Creates a GCP BucketAccessControl\n\nArguments: project_team, entity_id, role, bucket, state, entity\n\nThe BucketAccessControls resource represents the Access Control Lists (ACLs) for buckets within Google Cloud Storage. ACLs let you specify who has access to your data and to what extent.\nThere are three roles that can be assigned to an entity: READERs can get the bucket, though no acl property will be returned, and list the bucket's objects. WRITERs are READERs, and they can insert objects into the bucket and delete the bucket's objects. OWNERs are WRITERs, and they can get the acl property of a bucket, update a bucket, and call all BucketAccessControls methods on the bucket. For more information, see Access Control, with the caveat that this API uses READER, WRITER, and OWNER instead of READ, WRITE, and FULL_CONTROL.",
 'gcp_storage_object': 'Creates a GCP Object\n\nArguments: src, state, dest, bucket, action, overwrite\n\nUpload or download a file from a GCS bucket.',
 'gcp_tpu_node': 'Creates a GCP Node\n\nArguments: name, zone, tensorflow_version, labels, state, accelerator_type, network, scheduling_config, cidr_block, description\n\nA Cloud TPU instance.',
 'gcp_tpu_node_info': 'Gather info for GCP Node\n\nArguments: zone\n\nGather info for GCP Node',
 'gcpubsub': 'Create and Delete Topics/Subscriptions, Publish and pull messages on PubSub\n\nArguments: pull, ack_deadline, name, publish, topic, state, push_endpoint, subscription\n\nCreate and Delete Topics/Subscriptions, Publish and pull messages on PubSub. See U(https://cloud.google.com/pubsub/docs) for an overview.',
 'gcpubsub_info': 'List Topics/Subscriptions and Messages from Google PubSub.\n\nArguments: topic, state, view\n\nList Topics/Subscriptions from Google PubSub.  Use the gcpubsub module for topic/subscription management. See U(https://cloud.google.com/pubsub/docs) for an overview.\nThis module was called C(gcpubsub_facts) before Ansible 2.9. The usage did not change.',
 'gem': 'Manage Ruby gems\n\nArguments: include_dependencies, executable, force, name, repository, build_flags, include_doc, user_install, pre_release, env_shebang, install_dir, state, version, gem_source\n\nManage installation and uninstallation of Ruby gems.',
 'get_certificate': 'Get a certificate from a host:port\n\nArguments: proxy_port, host, timeout, ca_cert, proxy_host, select_crypto_backend, port\n\nMakes a secure connection and returns information about the presented certificate\nThe module can use the cryptography Python library, or the pyOpenSSL Python library. By default, it tries to detect which one is available. This can be overridden with the I(select_crypto_backend) option. Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13."',
 'get_url': 'Downloads files from HTTP, HTTPS, or FTP to node\n\nArguments: backup, force, url_username, dest, force_basic_auth, sha256sum, http_agent, client_key, url_password, use_proxy, url, checksum, headers, timeout, validate_certs, client_cert, tmp_dest\n\nDownloads files from HTTP, HTTPS, or FTP to the remote server. The remote server I(must) have direct access to the remote resource.\nBy default, if an environment variable C(<protocol>_proxy) is set on the target host, requests will be sent through that proxy. This behaviour can be overridden by setting a variable for this task (see `setting the environment <https://docs.ansible.com/playbooks_environment.html>`_), or by using the use_proxy option.\nHTTP redirects can redirect from HTTP to HTTPS so you should be sure that your proxy environment for both protocols is correct.\nFrom Ansible 2.4 when run with C(--check), it will do a HEAD request to validate the URL but will not download the entire file or verify it against hashes.\nFor Windows targets, use the M(win_get_url) module instead.',
 'getent': "A wrapper to the unix getent utility\n\nArguments: fail_key, key, split, service, database\n\nRuns getent against one of it's various databases and returns information into the host's facts, in a getent_<database> prefixed variable.",
 'git': 'Deploy software (or files) from git checkouts\n\nArguments: force, track_submodules, reference, dest, umask, clone, gpg_whitelist, accept_hostkey, update, ssh_opts, repo, bare, archive, refspec, executable, remote, recursive, separate_git_dir, verify_commit, depth, version, key_file\n\nManage I(git) checkouts of repositories to deploy files or software.',
 'git_config': "Read and write git configuration\n\nArguments: repo, state, list_all, name, scope, value\n\nThe C(git_config) module changes git configuration by invoking 'git config'. This is needed if you don't want to use M(template) for the entire git config file (e.g. because you need to change just C(user.email) in /etc/.git/config).  Solutions involving M(command) are cumbersome or don't work correctly in check mode.",
 'github_deploy_key': 'Manages deploy keys for GitHub repositories.\n\nArguments: read_only, username, force, name, state, repo, owner, token, key, otp, password\n\nAdds or removes deploy keys for GitHub repositories. Supports authentication using username and password, username and password and 2-factor authentication code (OTP), OAuth2 token, or personal access token.',
 'github_issue': 'View GitHub issue.\n\nArguments: repo, organization, issue, action\n\nView GitHub issue for a given repository and organization.',
 'github_key': 'Manage GitHub access keys.\n\nArguments: pubkey, token, force, name, state\n\nCreates, removes, or updates GitHub access keys.',
 'github_release': 'Interact with GitHub Releases\n\nArguments: body, target, repo, token, tag, draft, user, action, prerelease, password, name\n\nFetch metadata about GitHub Releases',
 'github_webhook': 'Manage GitHub webhooks\n\nArguments: repository, insecure_ssl, url, secret, github_url, state, user, content_type, active, password, events, token\n\nCreate and delete GitHub webhooks',
 'github_webhook_info': 'Query information about GitHub webhooks\n\nArguments: github_url, token, password, user, repository\n\nQuery information about GitHub webhooks\nThis module was called C(github_webhook_facts) before Ansible 2.9. The usage did not change.',
 'gitlab_deploy_key': 'Manages GitLab project deploy keys.\n\nArguments: project, state, key, title, can_push, api_token\n\nAdds, updates and removes project deploy keys',
 'gitlab_group': 'Creates/updates/deletes GitLab Groups\n\nArguments: name, parent, login_user, api_token, server_url, visibility, state, login_password, path, description\n\nWhen the group does not exist in GitLab, it will be created.\nWhen the group does exist and state=absent, the group will be deleted.',
 'gitlab_hook': 'Manages GitLab project hooks.\n\nArguments: hook_validate_certs, hook_url, job_events, tag_push_events, note_events, state, project, issues_events, token, push_events, merge_requests_events, api_token, pipeline_events, wiki_page_events\n\nAdds, updates and removes project hook',
 'gitlab_project': 'Creates/updates/deletes GitLab Projects\n\nArguments: snippets_enabled, name, import_url, login_user, description, api_token, server_url, visibility, state, issues_enabled, login_password, group, path, wiki_enabled, merge_requests_enabled\n\nWhen the project does not exist in GitLab, it will be created.\nWhen the project does exists and state=absent, the project will be deleted.\nWhen changes are made to the project, the project will be updated.',
 'gitlab_project_variable': 'Creates/updates/deletes GitLab Projects Variables\n\nArguments: project, purge, state, vars, api_token\n\nWhen a project variable does not exist, it will be created.\nWhen a project variable does exist, its value will be updated when the values are different.\nVariables which are untouched in the playbook, but are not untouched in the GitLab project, they stay untouched (I(purge) is C(false)) or will be deleted (I(purge) is C(true)).',
 'gitlab_runner': 'Create, modify and delete GitLab Runners.\n\nArguments: locked, description, url, registration_token, run_untagged, access_level, state, api_token, active, tag_list, maximum_timeout\n\nRegister, update and delete runners with the GitLab API.\nAll operations are performed using the GitLab API v4.\nFor details, consult the full API documentation at U(https://docs.gitlab.com/ee/api/runners.html).\nA valid private API token is required for all operations. You can create as many tokens as you like using the GitLab web interface at U(https://$GITLAB_URL/profile/personal_access_tokens).\nA valid registration token is required for registering a new runner. To create shared runners, you need to ask your administrator to give you this token. It can be found at U(https://$GITLAB_URL/admin/runners/).',
 'gitlab_user': 'Creates/updates/deletes GitLab Users\n\nArguments: username, sshkey_name, login_user, api_token, server_url, isadmin, external, login_password, password, group, name, sshkey_file, confirm, access_level, state, email\n\nWhen the user does not exist in GitLab, it will be created.\nWhen the user does exists and state=absent, the user will be deleted.\nWhen changes are made to user, the user will be updated.',
 'gluster_heal_info': 'Gather information on self-heal or rebalance status\n\nArguments: name, status_filter\n\nGather facts about either self-heal or rebalance status.\nThis module was called C(gluster_heal_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(gluster_heal_info) module no longer returns C(ansible_facts)!',
 'gluster_peer': 'Attach/Detach peers to/from the cluster\n\nArguments: state, force, nodes\n\nCreate or diminish a GlusterFS trusted storage pool. A set of nodes can be added into an existing trusted storage pool or a new storage pool can be formed. Or, nodes can be removed from an existing trusted storage pool.',
 'gluster_volume': 'Manage GlusterFS volumes\n\nArguments: arbiters, force, replicas, bricks, quota, stripes, cluster, host, start_on_create, redundancies, transport, name, disperses, state, directory, rebalance, options\n\nCreate, remove, start, stop and tune GlusterFS volumes',
 'grafana_dashboard': 'Manage Grafana dashboards\n\nArguments: url_password, uid, url, org_id, grafana_api_key, slug, state, url_username, path, message, client_key, validate_certs, client_cert, overwrite, use_proxy\n\nCreate, update, delete, export Grafana dashboards via API.',
 'grafana_datasource': 'Manage Grafana datasources\n\nArguments: tls_client_key, tsdb_version, trends, ds_type, aws_assume_role_arn, client_key, aws_secret_key, access, basic_auth_user, use_proxy, tls_skip_verify, grafana_url, with_credentials, tls_ca_cert, state, tls_client_cert, aws_auth_type, sslmode, client_cert, time_interval, aws_default_region, is_default, user, password, max_concurrent_shard_requests, url_password, aws_access_key, name, database, time_field, interval, org_id, tsdb_resolution, url, grafana_api_key, es_version, aws_custom_metrics_namespaces, url_username, basic_auth_password, validate_certs, aws_credentials_profile\n\nCreate/update/delete Grafana datasources via API.',
 'grafana_plugin': 'Manage Grafana plugins via grafana-cli\n\nArguments: state, grafana_repo, name, version, grafana_plugin_url, grafana_plugins_dir\n\nInstall and remove Grafana plugins.\nSee U(https://grafana.com/docs/plugins/installation/) for upstream documentation.',
 'group': 'Add or remove groups\n\nArguments: state, non_unique, name, gid, local, system\n\nManage presence of groups on a host.\nFor Windows targets, use the M(win_group) module instead.',
 'group_by': 'Create Ansible groups based on facts\n\nArguments: parents, key\n\nUse facts to create ad-hoc groups that can be used later in a playbook.\nThis module is also supported for Windows targets.',
 'grove': 'Sends a notification to a grove.io channel\n\nArguments: service, url, icon_url, message, validate_certs, channel_token\n\nThe C(grove) module sends a message for a service to a Grove.io channel.',
 'gunicorn': "Run gunicorn with various settings.\n\nArguments: venv, user, config, worker, app, chdir, pid\n\nStarts gunicorn with the parameters specified. Common settings for gunicorn configuration are supported. For additional configuration use a config file See U(https://gunicorn-docs.readthedocs.io/en/latest/settings.html) for more options. It's recommended to always use the chdir option to avoid problems with the location of the app.",
 'haproxy': 'Enable, disable, and set weights for HAProxy backend servers using socket commands\n\nArguments: drain, socket, weight, wait_interval, state, backend, wait_retries, host, fail_on_not_found, shutdown_sessions, wait\n\nEnable, disable, drain and set weights for HAProxy backend servers using socket commands.',
 'hcloud_datacenter_info': 'Gather info about the Hetzner Cloud datacenters.\n\nArguments: id, name\n\nGather info about your Hetzner Cloud datacenters.\nThis module was called C(hcloud_datacenter_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_datacenter_facts). Note that the M(hcloud_datacenter_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_datacenter_info)!',
 'hcloud_floating_ip_info': 'Gather infos about the Hetzner Cloud Floating IPs.\n\nArguments: label_selector, id\n\nGather facts about your Hetzner Cloud Floating IPs.\nThis module was called C(hcloud_floating_ip_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_floating_ip_facts). Note that the M(hcloud_floating_ip_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_floating_ip_info)!',
 'hcloud_image_info': 'Gather infos about your Hetzner Cloud images.\n\nArguments: label_selector, type, id, name\n\nGather infos about your Hetzner Cloud images.\nThis module was called C(hcloud_location_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_location_facts). Note that the M(hcloud_image_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_image_info)!',
 'hcloud_location_info': 'Gather infos about your Hetzner Cloud locations.\n\nArguments: id, name\n\nGather infos about your Hetzner Cloud locations.\nThis module was called C(hcloud_location_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_location_facts). Note that the M(hcloud_location_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_location_info)!',
 'hcloud_network': 'Create and manage cloud Networks on the Hetzner Cloud.\n\nArguments: state, labels, ip_range, name, id\n\nCreate, update and manage cloud Networks on the Hetzner Cloud.\nYou need at least hcloud-python 1.3.0.',
 'hcloud_network_info': 'Gather info about your Hetzner Cloud networks.\n\nArguments: label_selector, id, name\n\nGather info about your Hetzner Cloud networks.',
 'hcloud_rdns': 'Create and manage reverse DNS entries on the Hetzner Cloud.\n\nArguments: dns_ptr, state, ip_address, server\n\nCreate, update and delete reverse DNS entries on the Hetzner Cloud.',
 'hcloud_route': 'Create and delete cloud routes on the Hetzner Cloud.\n\nArguments: state, destination, network, gateway\n\nCreate, update and delete cloud routes on the Hetzner Cloud.',
 'hcloud_server': 'Create and manage cloud servers on the Hetzner Cloud.\n\nArguments: datacenter, ssh_keys, server_type, rescue_mode, image, labels, user_data, name, state, location, volumes, backups, upgrade_disk, id, force_upgrade\n\nCreate, update and manage cloud servers on the Hetzner Cloud.',
 'hcloud_server_info': 'Gather infos about your Hetzner Cloud servers.\n\nArguments: label_selector, id, name\n\nGather infos about your Hetzner Cloud servers.\nThis module was called C(hcloud_server_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_server_facts). Note that the M(hcloud_server_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_server_info)!',
 'hcloud_server_network': 'Manage the relationship between Hetzner Cloud Networks and servers\n\nArguments: ip, alias_ips, server, state, network\n\nCreate and delete the relationship Hetzner Cloud Networks and servers',
 'hcloud_server_type_info': 'Gather infos about the Hetzner Cloud server types.\n\nArguments: id, name\n\nGather infos about your Hetzner Cloud server types.\nThis module was called C(hcloud_server_type_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_server_type_facts). Note that the M(hcloud_server_type_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_server_type_info)!',
 'hcloud_ssh_key': 'Create and manage ssh keys on the Hetzner Cloud.\n\nArguments: public_key, state, name, fingerprint, labels, id\n\nCreate, update and manage ssh keys on the Hetzner Cloud.',
 'hcloud_ssh_key_info': 'Gather infos about your Hetzner Cloud ssh_keys.\n\nArguments: label_selector, id, name, fingerprint\n\nGather facts about your Hetzner Cloud ssh_keys.\nThis module was called C(hcloud_ssh_key_facts) before Ansible 2.9, returning C(ansible_facts) and C(hcloud_ssh_key_facts). Note that the M(hcloud_ssh_key_info) module no longer returns C(ansible_facts) and the value was renamed to C(hcloud_ssh_key_info)!',
 'hcloud_subnetwork': 'Manage cloud subnetworks on the Hetzner Cloud.\n\nArguments: state, ip_range, type, network, network_zone\n\nCreate, update and delete cloud subnetworks on the Hetzner Cloud.',
 'hcloud_volume': 'Create and manage block volumes on the Hetzner Cloud.\n\nArguments: name, format, automount, labels, server, state, location, id, size\n\nCreate, update and attach/detach block volumes on the Hetzner Cloud.',
 'hcloud_volume_info': 'Gather infos about your Hetzner Cloud volumes.\n\nArguments: label_selector, id, name\n\nGather infos about your Hetzner Cloud volumes.',
 'helm': 'Manages Kubernetes packages with the Helm package manager\n\nArguments: disable_hooks, name, namespace, chart, state, values, host, port\n\nInstall, upgrade, delete and list packages with the Helm package manager.',
 'heroku_collaborator': 'Add or delete app collaborators on Heroku\n\nArguments: suppress_invitation, api_key, apps, user, state\n\nManages collaborators for Heroku apps.\nIf set to C(present) and heroku user is already collaborator, then do nothing.\nIf set to C(present) and heroku user is not collaborator, then add user to app.\nIf set to C(absent) and heroku user is collaborator, then delete user from app.',
 'hetzner_failover_ip': "Manage Hetzner's failover IPs\n\nArguments: value, state, failover_ip, timeout\n\nManage Hetzner's failover IPs.",
 'hetzner_failover_ip_info': "Retrieve information on Hetzner's failover IPs\n\nArguments: failover_ip\n\nRetrieve information on Hetzner's failover IPs.",
 'hg': 'Manages Mercurial (hg) repositories\n\nArguments: repo, executable, force, dest, clone, update, purge, revision\n\nManages Mercurial (hg) repositories. Supports SSH, HTTP/S and local address.',
 'hipchat': 'Send a message to Hipchat.\n\nArguments: from, room, color, msg_format, token, api, notify, msg, validate_certs\n\nSend a message to a Hipchat room, with options to control the formatting.',
 'homebrew': 'Package manager for Homebrew\n\nArguments: install_options, state, name, update_homebrew, path, upgrade_all\n\nManages Homebrew packages',
 'homebrew_cask': 'Install/uninstall homebrew casks.\n\nArguments: install_options, upgrade, sudo_password, name, update_homebrew, upgrade_all, accept_external_apps, greedy, state, path\n\nManages Homebrew casks.',
 'homebrew_tap': 'Tap a Homebrew repository.\n\nArguments: url, state, name\n\nTap external Homebrew repositories.',
 'honeybadger_deployment': 'Notify Honeybadger.io about app deployments\n\nArguments: repo, environment, token, user, url, validate_certs, revision\n\nNotify Honeybadger.io about app deployments (see http://docs.honeybadger.io/article/188-deployment-tracking)',
 'hostname': "Manage hostname\n\nArguments: use, name\n\nSet system's hostname, supports most OSs/Distributions, including those using systemd.\nNote, this module does *NOT* modify C(/etc/hosts). You need to modify it yourself using other modules like template or replace.\nWindows, HP-UX and AIX are not currently supported.",
 'hpilo_boot': 'Boot system using specific media through HP iLO interface\n\nArguments: force, media, image, ssl_version, host, state, login, password\n\nThis module boots a system through its HP iLO interface. The boot media can be one of: cdrom, floppy, hdd, network or usb.\nThis module requires the hpilo python module.',
 'hpilo_info': 'Gather information through an HP iLO interface\n\nArguments: host, password, ssl_version, login\n\nThis module gathers information on a specific system using its HP iLO interface. These information includes hardware and network related information useful for provisioning (e.g. macaddress, uuid).\nThis module requires the C(hpilo) python module.\nThis module was called C(hpilo_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(hpilo_info) module no longer returns C(ansible_facts)!',
 'hponcfg': 'Configure HP iLO interface using hponcfg\n\nArguments: path, executable, minfw, verbose\n\nThis modules configures the HP iLO interface using hponcfg.',
 'htpasswd': 'manage user files for basic authentication\n\nArguments: state, name, path, create, password, crypt_scheme\n\nAdd and remove username/password entries in a password file using htpasswd.\nThis is used by web servers such as Apache and Nginx for basic authentication.',
 'hwc_network_vpc': 'Creates a Huawei Cloud VPC\n\nArguments: timeouts, state, cidr, name\n\nRepresents an vpc resource.',
 'hwc_smn_topic': 'Creates a resource of SMNTopic in Huaweicloud Cloud\n\nArguments: state, display_name, name\n\nRepresents a SMN notification topic resource.',
 'iam': 'Manage IAM users, groups, roles and keys\n\nArguments: new_name, update_password, new_path, name, access_key_state, key_count, iam_type, state, access_key_ids, groups, trust_policy, path, password, trust_policy_filepath\n\nAllows for the management of IAM users, user API keys, groups, roles.',
 'iam_cert': 'Manage server certificates for use on ELBs and CloudFront\n\nArguments: new_name, dup_ok, new_path, name, state, cert, key, path, cert_chain\n\nAllows for the management of server certificates',
 'iam_group': 'Manage AWS IAM groups\n\nArguments: state, name, purge_policy, purge_users, managed_policy, users\n\nManage AWS IAM groups',
 'iam_managed_policy': 'Manage User Managed IAM policies\n\nArguments: state, policy_description, make_default, policy, fail_on_delete, only_version, policy_name\n\nAllows creating and removing managed IAM policies',
 'iam_mfa_device_info': 'List the MFA (Multi-Factor Authentication) devices registered for a user\n\nArguments: user_name\n\nList the MFA (Multi-Factor Authentication) devices registered for a user\nThis module was called C(iam_mfa_device_facts) before Ansible 2.9. The usage did not change.',
 'iam_password_policy': 'Update an IAM Password Policy\n\nArguments: require_lowercase, allow_pw_change, pw_reuse_prevent, pw_max_age, state, min_pw_length, require_symbols, pw_expire, require_numbers, require_uppercase\n\nModule updates an IAM Password Policy on a given AWS account',
 'iam_policy': 'Manage IAM policies for users, groups, and roles\n\nArguments: policy_document, state, policy_json, skip_duplicates, iam_name, iam_type, policy_name\n\nAllows uploading or removing IAM policies for IAM users, groups or roles.',
 'iam_role': 'Manage AWS IAM roles\n\nArguments: name, managed_policy, purge_policies, assume_role_policy_document, state, create_instance_profile, path, boundary, description\n\nManage AWS IAM roles',
 'iam_role_info': 'Gather information on IAM roles\n\nArguments: name, path_prefix\n\nGathers information about IAM roles\nThis module was called C(iam_role_facts) before Ansible 2.9. The usage did not change.',
 'iam_server_certificate_info': 'Retrieve the information of a server certificate\n\nArguments: name\n\nRetrieve the attributes of a server certificate\nThis module was called C(iam_server_certificate_facts) before Ansible 2.9. The usage did not change.',
 'iam_user': 'Manage AWS IAM users\n\nArguments: purge_policy, state, managed_policy, name\n\nManage AWS IAM users',
 'iap_start_workflow': 'Start a workflow in the Itential Automation Platform\n\nArguments: description, iap_fqdn, workflow_name, token_key, iap_port, https, validate_certs, variables\n\nThis will start a specified workflow in the Itential Automation Platform with given arguments.',
 'iap_token': 'Get token for the Itential Automation Platform\n\nArguments: username, iap_port, https, iap_fqdn, password, validate_certs\n\nChecks the connection to IAP and retrieves a login token.',
 'ibm_sa_domain': 'Manages domains on IBM Spectrum Accelerate Family storage systems\n\nArguments: max_cgs, domain, ldap_id, soft_capacity, state, hard_capacity, max_volumes, max_mirrors, max_pools, max_dms, perf_class, size\n\nThis module can be used to add domains to or removes them from IBM Spectrum Accelerate Family storage systems.',
 'ibm_sa_host': 'Adds hosts to or removes them from IBM Spectrum Accelerate Family storage systems.\n\nArguments: iscsi_chap_name, domain, iscsi_chap_secret, cluster, host, state\n\nThis module adds hosts to or removes them from IBM Spectrum Accelerate Family storage systems.',
 'ibm_sa_host_ports': 'Add host ports on IBM Spectrum Accelerate Family storage systems.\n\nArguments: iscsi_name, fcaddress, host, num_of_visible_targets, state\n\nThis module adds ports to or removes them from the hosts on IBM Spectrum Accelerate Family storage systems.',
 'ibm_sa_pool': 'Handles pools on IBM Spectrum Accelerate Family storage systems.\n\nArguments: domain, pool, size, state, perf_class, snapshot_size\n\nThis module creates or deletes pools to be used on IBM Spectrum Accelerate Family storage systems',
 'ibm_sa_vol': 'Handle volumes on IBM Spectrum Accelerate Family storage systems.\n\nArguments: vol, state, pool, size\n\nThis module creates or deletes volumes to be used on IBM Spectrum Accelerate Family storage systems.',
 'ibm_sa_vol_map': 'Handles volume mapping on IBM Spectrum Accelerate Family storage systems.\n\nArguments: cluster, host, override, vol, state, lun\n\nThis module maps volumes to or unmaps them from the hosts on IBM Spectrum Accelerate Family storage systems.',
 'icinga2_feature': 'Manage Icinga2 feature\n\nArguments: state, name\n\nThis module can be used to enable or disable an Icinga2 feature.',
 'icinga2_host': 'Manage a host in Icinga2\n\nArguments: url_username, ip, variables, force_basic_auth, name, url_password, display_name, use_proxy, zone, url, check_command, state, template, client_key, validate_certs, client_cert\n\nAdd or remove a host to Icinga2 through the API.\nSee U(https://www.icinga.com/docs/icinga2/latest/doc/12-icinga2-api/)',
 'icx_banner': 'Manage multiline banners on Ruckus ICX 7000 series switches\n\nArguments: text, state, banner, check_running_config, enterkey\n\nThis will configure both login and motd banners on remote ruckus ICX 7000 series switches. It allows playbooks to add or remove banner text from the active running configuration.',
 'icx_command': 'Run arbitrary commands on remote Ruckus ICX 7000 series switches\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an ICX node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'icx_config': 'Manage configuration sections of Ruckus ICX 7000 series switches\n\nArguments: multiline_delimiter, src, save_when, after, lines, intended_config, diff_against, parents, defaults, before, running_config, replace, backup, match, diff_ignore_lines\n\nRuckus ICX configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with ICX configuration sections in a deterministic way.',
 'icx_copy': 'Transfer files from or to remote Ruckus ICX 7000 series switches\n\nArguments: public_key, remote_user, protocol, remote_server, remote_port, remote_filename, upload, remote_pass, download\n\nThis module transfers files from or to remote devices running ICX.',
 'icx_facts': 'Collect facts from remote Ruckus ICX 7000 series switches\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running ICX.  This module prepends all of the base network fact keys with C(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'icx_interface': 'Manage Interface on Ruckus ICX 7000 series switches\n\nArguments: neighbors, rx_rate, name, power, enabled, delay, state, stp, aggregate, speed, check_running_config, tx_rate, description\n\nThis module provides declarative management of Interfaces on ruckus icx devices.',
 'icx_l3_interface': 'Manage Layer-3 interfaces on Ruckus ICX 7000 series switches\n\nArguments: name, replace, state, mode, ipv6, aggregate, secondary, check_running_config, ipv4\n\nThis module provides declarative management of Layer-3 interfaces on ICX network devices.',
 'icx_linkagg': 'Manage link aggregation groups on Ruckus ICX 7000 series switches\n\nArguments: group, name, purge, state, mode, members, aggregate, check_running_config\n\nThis module provides declarative management of link aggregation groups on Ruckus ICX network devices.',
 'icx_lldp': 'Manage LLDP configuration on Ruckus ICX 7000 series switches\n\nArguments: interfaces, check_running_config, state\n\nThis module provides declarative management of LLDP service on ICX network devices.',
 'icx_logging': 'Manage logging on Ruckus ICX 7000 series switches\n\nArguments: name, level, dest, facility, udp_port, state, aggregate, check_running_config\n\nThis module provides declarative management of logging on Ruckus ICX 7000 series switches.',
 'icx_ping': 'Tests reachability using ping from Ruckus ICX 7000 series switches\n\nArguments: count, dest, source, state, vrf, timeout, ttl, size\n\nTests reachability using ping from switch to a remote destination.',
 'icx_static_route': 'Manage static IP routes on Ruckus ICX 7000 series switches\n\nArguments: mask, prefix, admin_distance, purge, state, next_hop, aggregate, check_running_config\n\nThis module provides declarative management of static IP routes on Ruckus ICX network devices.',
 'icx_system': 'Manage the system attributes on Ruckus ICX 7000 series switches\n\nArguments: aaa_servers, state, name_servers, domain_search, hostname, domain_name, check_running_config\n\nThis module provides declarative management of node system attributes on Ruckus ICX 7000 series switches.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 'icx_user': 'Manage the user accounts on Ruckus ICX 7000 series switches.\n\nArguments: update_password, configured_password, aggregate, name, access_time, purge, privilege, state, nopassword, check_running_config\n\nThis module creates or updates user account on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.',
 'icx_vlan': 'Manage VLANs on Ruckus ICX 7000 series switches\n\nArguments: delay, tagged, ip_arp_inspection, name, interfaces, associated_tagged, purge, associated_interfaces, state, stp, ip_dhcp_snooping, aggregate, check_running_config, vlan_id\n\nThis module provides declarative management of VLANs on ICX network devices.',
 'idrac_firmware': 'Firmware update from a repository on a network share (CIFS, NFS).\n\nArguments: idrac_user, share_name, idrac_port, reboot, share_user, catalog_file_name, share_password, share_mnt, idrac_password, idrac_ip, job_wait\n\nUpdate the Firmware by connecting to a network share (either CIFS or NFS) that contains a catalog of available updates.\nNetwork share should contain a valid repository of Update Packages (DUPs) and a catalog file describing the DUPs.\nAll applicable updates contained in the repository are applied to the system.\nThis feature is available only with iDRAC Enterprise License.',
 'idrac_redfish_command': 'Manages Out-Of-Band controllers using iDRAC OEM Redfish APIs\n\nArguments: category, username, command, timeout, baseuri, password\n\nBuilds Redfish URIs locally and sends them to remote OOB controllers to perform an action.\nFor use with Dell iDRAC operations that require Redfish OEM extensions',
 'idrac_redfish_config': 'Manages servers through iDRAC using Dell Redfish APIs\n\nArguments: category, username, manager_attribute_value, baseuri, command, timeout, password, manager_attribute_name\n\nFor use with Dell iDRAC operations that require Redfish OEM extensions\nBuilds Redfish URIs locally and sends them to remote iDRAC controllers to set or update a configuration attribute.',
 'idrac_redfish_info': 'Manages servers through iDRAC using Dell Redfish APIs\n\nArguments: category, username, command, timeout, baseuri, password\n\nBuilds Redfish URIs locally and sends them to remote iDRAC controllers to get information back.\nFor use with Dell iDRAC operations that require Redfish OEM extensions\nThis module was called C(idrac_redfish_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(idrac_redfish_info) module no longer returns C(ansible_facts)!',
 'idrac_server_config_profile': 'Export or Import iDRAC Server Configuration Profile (SCP).\n\nArguments: end_host_power_state, idrac_user, job_wait, scp_file, export_use, share_name, idrac_port, scp_components, shutdown_type, command, export_format, share_password, idrac_password, idrac_ip, share_user\n\nExport the Server Configuration Profile (SCP) from the iDRAC or Import from a network share or a local file.',
 'ig_config': 'Manage the configuration database on an Ingate SBC.\n\nArguments: get, modify, no_response, store_download, rowid, path, download, table, return_rowid, revert, factory, filename, add, store, columns, delete\n\nManage the configuration database on an Ingate SBC.',
 'ig_unit_information': 'Get unit information from an Ingate SBC.\n\nArguments: \n\nGet unit information from an Ingate SBC.',
 'imc_rest': 'Manage Cisco IMC hardware through its REST API\n\nArguments: username, protocol, hostname, content, timeout, path, password, validate_certs\n\nProvides direct access to the Cisco IMC REST API.\nPerform any configuration changes and actions that the Cisco IMC supports.\nMore information about the IMC REST API is available from U(http://www.cisco.com/c/en/us/td/docs/unified_computing/ucs/c/sw/api/3_0/b_Cisco_IMC_api_301.html)',
 'imgadm': 'Manage SmartOS images\n\nArguments: source, state, force, uuid, type, pool\n\nManage SmartOS virtual machine images through imgadm(1M)',
 'import_playbook': 'Import a playbook\n\nArguments: free-form\n\nIncludes a file with a list of plays to be executed.\nFiles with a list of plays can only be included at the top level.\nYou cannot use this action inside a play.',
 'import_role': 'Import a role into a play\n\nArguments: allow_duplicates, tasks_from, vars_from, name, handlers_from, defaults_from\n\nMuch like the C(roles:) keyword, this task loads a role, but it allows you to control it when the role tasks run in between other tasks of the play.\nMost keywords, loops and conditionals will only be applied to the imported tasks, not to this statement itself. If you want the opposite behavior, use M(include_role) instead.',
 'import_tasks': 'Import a task list\n\nArguments: free-form\n\nImports a list of tasks to be added to the current playbook for subsequent execution.',
 'include': "Include a play or task list\n\nArguments: free-form\n\nIncludes a file with a list of plays or tasks to be executed in the current playbook.\nFiles with a list of plays can only be included at the top level. Lists of tasks can only be included where tasks normally run (in play).\nBefore Ansible 2.0, all includes were 'static' and were executed when the play was compiled.\nStatic includes are not subject to most directives. For example, loops or conditionals are applied instead to each inherited task.\nSince Ansible 2.0, task includes are dynamic and behave more like real tasks. This means they can be looped, skipped and use variables from any source. Ansible tries to auto detect this, but you can use the C(static) directive (which was added in Ansible 2.1) to bypass autodetection.\nThis module is also supported for Windows targets.",
 'include_role': 'Load and execute a role\n\nArguments: name, allow_duplicates, tasks_from, vars_from, apply, handlers_from, defaults_from, public\n\nDynamically loads and executes a specified role as a task.\nMay be used only where Ansible tasks are allowed - inside C(pre_tasks), C(tasks), or C(post_tasks) playbook objects, or as a task inside a role.\nTask-level keywords, loops, and conditionals apply only to the C(include_role) statement itself.\nTo apply keywords to the tasks within the role, pass them using the C(apply) option or use M(import_role) instead.\nIgnores some keywords, like C(until) and C(retries).\nThis module is also supported for Windows targets.',
 'include_tasks': 'Dynamically include a task list\n\nArguments: free-form, apply, file\n\nIncludes a file with a list of tasks to be executed in the current playbook.',
 'include_vars': 'Load variables from files, dynamically within a task\n\nArguments: ignore_files, ignore_unknown_extensions, free-form, files_matching, depth, extensions, file, dir, name\n\nLoads YAML/JSON variables dynamically from a file or directory, recursively, during task runtime.\nIf loading a directory, the files are sorted alphabetically before being loaded.\nThis module is also supported for Windows targets.\nTo assign included variables to a different host than C(inventory_hostname), use C(delegate_to) and set C(delegate_facts=yes).',
 'infini_export': 'Create, Delete or Modify NFS Exports on Infinibox\n\nArguments: inner_path, state, client_list, name, filesystem\n\nThis module creates, deletes or modifies NFS exports on Infinibox.',
 'infini_export_client': 'Create, Delete or Modify NFS Client(s) for existing exports on Infinibox\n\nArguments: state, access_mode, export, no_root_squash, client\n\nThis module creates, deletes or modifys NFS client(s) for existing exports on Infinibox.',
 'infini_fs': 'Create, Delete or Modify filesystems on Infinibox\n\nArguments: state, name, pool, size\n\nThis module creates, deletes or modifies filesystems on Infinibox.',
 'infini_host': 'Create, Delete and Modify Hosts on Infinibox\n\nArguments: volume, state, name, wwns\n\nThis module creates, deletes or modifies hosts on Infinibox.',
 'infini_pool': 'Create, Delete and Modify Pools on Infinibox\n\nArguments: vsize, state, ssd_cache, name, size\n\nThis module to creates, deletes or modifies pools on Infinibox.',
 'infini_vol': 'Create, Delete or Modify volumes on Infinibox\n\nArguments: state, name, pool, size\n\nThis module creates, deletes or modifies volume on Infinibox.',
 'infinity': 'Manage Infinity IPAM using Rest API\n\nArguments: username, network_size, network_location, network_family, network_id, ip_address, network_address, server_ip, action, password, network_name, network_type\n\nManage Infinity IPAM using REST API.',
 'influxdb_database': 'Manage InfluxDB databases\n\nArguments: database_name, state\n\nManage InfluxDB databases.',
 'influxdb_query': 'Query data points from InfluxDB\n\nArguments: query, database_name\n\nQuery data points from InfluxDB.',
 'influxdb_retention_policy': 'Manage InfluxDB retention policies\n\nArguments: duration, replication, database_name, policy_name, default\n\nManage InfluxDB retention policies.',
 'influxdb_user': 'Manage InfluxDB users\n\nArguments: admin, user_password, grants, user_name, state\n\nManage InfluxDB users.',
 'influxdb_write': 'Write data points into InfluxDB\n\nArguments: data_points, database_name\n\nWrite data points into InfluxDB.',
 'ini_file': "Tweak settings in INI files\n\nArguments: option, section, no_extra_spaces, value, allow_no_value, state, path, backup, create\n\nManage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say, M(template) or M(assemble).\nAdds missing sections if they don't exist.\nBefore Ansible 2.0, comments are discarded when the source file is read, and therefore will not show up in the destination file.\nSince Ansible 2.3, this module adds missing ending newlines to files to keep in line with the POSIX standard, even when no other modifications need to be applied.",
 'installp': "Manage packages on AIX\n\nArguments: repository_path, accept_license, name, state\n\nManage packages using 'installp' on AIX",
 'interfaces_file': 'Tweak settings in /etc/network/interfaces files\n\nArguments: state, iface, address_family, dest, backup, value, option\n\nManage (add, remove, change) individual interface options in an interfaces-style file without having to manage the file as a whole with, say, M(template) or M(assemble). Interface has to be presented in a file.\nRead information about interfaces from interfaces-styled files',
 'intersight_info': 'Gather information about Intersight\n\nArguments: server_names\n\nGathers information about servers in L(Cisco Intersight,https://intersight.com).\nThis module was called C(intersight_facts) before Ansible 2.9. The usage did not change.',
 'intersight_rest_api': 'REST API configuration for Cisco Intersight\n\nArguments: update_method, query_params, state, resource_path, api_body\n\nDirect REST API configuration for Cisco Intersight.\nAll REST API resources and properties must be specified.\nFor more information see L(Cisco Intersight,https://intersight.com/apidocs).',
 'ios_banner': 'Manage multiline banners on Cisco IOS devices\n\nArguments: text, state, banner\n\nThis will configure both login and motd banners on remote devices running Cisco IOS.  It allows playbooks to add or remote banner text from the active running configuration.',
 'ios_bgp': 'Configure global BGP protocol settings on Cisco IOS.\n\nArguments: operation, config\n\nThis module provides configuration management of global BGP parameters on devices running Cisco IOS',
 'ios_command': 'Run commands on remote devices running Cisco IOS\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an ios node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(ios_config) to configure IOS devices.',
 'ios_config': 'Manage Cisco IOS configuration sections\n\nArguments: multiline_delimiter, backup_options, after, diff_against, replace, running_config, diff_ignore_lines, src, lines, intended_config, parents, defaults, before, save_when, backup, match\n\nCisco IOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with IOS configuration sections in a deterministic way.',
 'ios_facts': 'Collect facts from remote devices running Cisco IOS\n\nArguments: gather_subset, gather_network_resources\n\nCollects a base set of device facts from a remote device that is running IOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'ios_interfaces': 'Manages interface attributes of Cisco IOS network devices\n\nArguments: state, config\n\nThis module manages the interface attributes of Cisco IOS network devices.',
 'ios_l2_interfaces': 'Manage Layer-2 interface on Cisco IOS devices.\n\nArguments: state, config\n\nThis module provides declarative management of Layer-2 interface on Cisco IOS devices.',
 'ios_l3_interfaces': 'Manage Layer-3 interface on Cisco IOS devices.\n\nArguments: state, config\n\nThis module provides declarative management of Layer-3 interface on Cisco IOS devices.',
 'ios_lacp': 'Manage Global Link Aggregation Control Protocol (LACP) on Cisco IOS devices.\n\nArguments: state, config\n\nThis module provides declarative management of Global LACP on Cisco IOS network devices.',
 'ios_lacp_interfaces': 'Manage Link Aggregation Control Protocol (LACP) on Cisco IOS devices interface.\n\nArguments: state, config\n\nThis module provides declarative management of LACP on Cisco IOS network devices lacp_interfaces.',
 'ios_lag_interfaces': 'Manage Link Aggregation on Cisco IOS devices.\n\nArguments: state, config\n\nThis module manages properties of Link Aggregation Group on Cisco IOS devices.',
 'ios_linkagg': 'Manage link aggregation groups on Cisco IOS network devices\n\nArguments: purge, state, group, mode, members, aggregate\n\nThis module provides declarative management of link aggregation groups on Cisco IOS network devices.',
 'ios_lldp': 'Manage LLDP configuration on Cisco IOS network devices.\n\nArguments: state\n\nThis module provides declarative management of LLDP service on Cisco IOS network devices.',
 'ios_lldp_global': 'Configure and manage Link Layer Discovery Protocol(LLDP) attributes on IOS platforms.\n\nArguments: state, config\n\nThis module configures and manages the Link Layer Discovery Protocol(LLDP) attributes on IOS platforms.',
 'ios_lldp_interfaces': 'Manage link layer discovery protocol (LLDP) attributes of interfaces on Cisco IOS devices.\n\nArguments: state, config\n\nThis module manages link layer discovery protocol (LLDP) attributes of interfaces on Cisco IOS devices.',
 'ios_logging': 'Manage logging on network devices\n\nArguments: aggregate, state, name, level, dest, facility, size\n\nThis module provides declarative management of logging on Cisco Ios devices.',
 'ios_ntp': 'Manages core NTP configuration.\n\nArguments: logging, auth_key, auth, source_int, state, key_id, acl, server\n\nManages core NTP configuration.',
 'ios_ping': 'Tests reachability using ping from Cisco IOS network devices\n\nArguments: count, dest, state, vrf, source\n\nTests reachability using ping from switch to a remote destination.\nFor a general purpose network module, see the M(net_ping) module.\nFor Windows targets, use the M(win_ping) module instead.\nFor targets running Python, use the M(ping) module instead.',
 'ios_static_route': 'Manage static IP routes on Cisco IOS network devices\n\nArguments: name, track, mask, prefix, admin_distance, interface, state, next_hop, vrf, aggregate, tag\n\nThis module provides declarative management of static IP routes on Cisco IOS network devices.',
 'ios_system': 'Manage the system attributes on Cisco IOS devices\n\nArguments: state, lookup_source, name_servers, domain_search, hostname, domain_name, lookup_enabled\n\nThis module provides declarative management of node system attributes on Cisco IOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 'ios_user': 'Manage the aggregate of local users on Cisco IOS device\n\nArguments: update_password, configured_password, aggregate, name, view, hashed_password, purge, privilege, state, nopassword, password_type, sshkey\n\nThis module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.',
 'ios_vlans': 'Manage VLANs on Cisco IOS devices.\n\nArguments: state, config\n\nThis module provides declarative management of VLANs on Cisco IOS network devices.',
 'ios_vrf': 'Manage the collection of VRF definitions on Cisco IOS devices\n\nArguments: purge, route_import_ipv4, description, route_import_ipv6, route_export_ipv4, route_both_ipv4, interfaces, associated_interfaces, route_export_ipv6, rd, route_import, name, delay, route_export, state, vrfs, route_both, route_both_ipv6\n\nThis module provides declarative management of VRF definitions on Cisco IOS devices.  It allows playbooks to manage individual or the entire VRF collection.  It also supports purging VRF definitions from the configuration that are not explicitly defined.',
 'iosxr_banner': 'Manage multiline banners on Cisco IOS XR devices\n\nArguments: text, state, banner\n\nThis module will configure both exec and motd banners on remote device running Cisco IOS XR. It allows playbooks to add or remove banner text from the running configuration.',
 'iosxr_bgp': 'Configure global BGP protocol settings on Cisco IOS-XR\n\nArguments: operation, config\n\nThis module provides configuration management of global BGP parameters on devices running Cisco IOS-XR',
 'iosxr_command': 'Run commands on remote devices running Cisco IOS XR\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an IOS XR node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(iosxr_config) to configure iosxr devices.',
 'iosxr_config': 'Manage Cisco IOS XR configuration sections\n\nArguments: comment, src, backup_options, force, exclusive, admin, config, after, lines, replace, parents, label, backup, match, before\n\nCisco IOS XR configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with IOS XR configuration sections in a deterministic way.',
 'iosxr_facts': 'Get facts about iosxr devices.\n\nArguments: gather_subset, gather_network_resources\n\nCollects facts from network devices running the iosxr operating system. This module places the facts gathered in the fact tree keyed by the respective resource name.  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'iosxr_interfaces': 'Manage interface attributes on Cisco IOS-XR network devices\n\nArguments: state, config\n\nThis module manages the interface attributes on Cisco IOS-XR network devices.',
 'iosxr_l2_interfaces': 'Manage Layer-2 interface on Cisco IOS-XR devices\n\nArguments: state, config\n\nThis module manages the Layer-2 interface attributes on Cisco IOS-XR devices.',
 'iosxr_l3_interfaces': 'Manage Layer-3 interface on Cisco IOS-XR devices.\n\nArguments: state, config\n\nThis module provides declarative management of Layer-3 interface on Cisco IOS-XR devices.',
 'iosxr_lacp': 'Manage Global Link Aggregation Control Protocol (LACP) on IOS-XR devices.\n\nArguments: state, config\n\nThis module manages Global Link Aggregation Control Protocol (LACP) on IOS-XR devices.',
 'iosxr_lacp_interfaces': 'Manage Link Aggregation Control Protocol (LACP) attributes of interfaces on IOS-XR devices.\n\nArguments: state, config\n\nThis module manages Link Aggregation Control Protocol (LACP) attributes of interfaces on IOS-XR devices.',
 'iosxr_lag_interfaces': 'Manages attributes of LAG/Ether-Bundle interfaces on IOS-XR devices.\n\nArguments: state, config\n\nThis module manages the attributes of LAG/Ether-Bundle interfaces on IOS-XR devices.',
 'iosxr_lldp_global': 'Manage Global Link Layer Discovery Protocol (LLDP) settings on IOS-XR devices.\n\nArguments: state, config\n\nThis module manages Global Link Layer Discovery Protocol (LLDP) settings on IOS-XR devices.',
 'iosxr_lldp_interfaces': 'Manage Link Layer Discovery Protocol (LLDP) attributes of interfaces on IOS-XR devices.\n\nArguments: state, config\n\nThis module manages Link Layer Discovery Protocol (LLDP) attributes of interfaces on IOS-XR devices.',
 'iosxr_logging': 'Configuration management of system logging services on network devices\n\nArguments: name, facility, dest, level, hostnameprefix, state, vrf, aggregate, size\n\nThis module provides declarative management configuration of system logging (syslog) on Cisco IOS XR devices.',
 'iosxr_netconf': 'Configures NetConf sub-system service on Cisco IOS-XR devices\n\nArguments: state, netconf_vrf, netconf_port\n\nThis module provides an abstraction that enables and configures the netconf system service running on Cisco IOS-XR Software. This module can be used to easily enable the Netconf API. Netconf provides a programmatic interface for working with configuration and state resources as defined in RFC 6242.',
 'iosxr_system': 'Manage the system attributes on Cisco IOS XR devices\n\nArguments: lookup_source, domain_search, hostname, domain_name, state, vrf, name_servers, lookup_enabled\n\nThis module provides declarative management of node system attributes on Cisco IOS XR devices. It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 'iosxr_user': 'Manage the aggregate of local users on Cisco IOS XR device\n\nArguments: public_key, update_password, configured_password, group, name, admin, purge, state, public_key_contents, groups, aggregate\n\nThis module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.',
 'ip_netns': 'Manage network namespaces\n\nArguments: state, name\n\nCreate or delete network namespaces using the ip command.',
 'ipa_config': 'Manage Global FreeIPA Configuration Settings\n\nArguments: ipadefaultloginshell, ipadefaultemaildomain\n\nModify global configuration settings of a FreeIPA Server.',
 'ipa_dnsrecord': 'Manage FreeIPA DNS records\n\nArguments: record_type, state, record_name, zone_name, record_ttl, record_value\n\nAdd, modify and delete an IPA DNS Record using IPA API.',
 'ipa_dnszone': 'Manage FreeIPA DNS Zones\n\nArguments: zone_name, state, dynamicupdate\n\nAdd and delete an IPA DNS Zones using IPA API',
 'ipa_group': 'Manage FreeIPA group\n\nArguments: group, cn, description, gidnumber, state, user, nonposix, external\n\nAdd, modify and delete group within IPA server',
 'ipa_hbacrule': 'Manage FreeIPA HBAC rule\n\nArguments: servicecategory, sourcehostcategory, cn, service, description, hostcategory, hostgroup, usercategory, state, user, usergroup, host, servicegroup, sourcehostgroup, sourcehost\n\nAdd, modify or delete an IPA HBAC rule using IPA API.',
 'ipa_host': 'Manage FreeIPA host\n\nArguments: force, description, ns_os_version, fqdn, state, random_password, ns_host_location, mac_address, user_certificate, ip_address, ns_hardware_platform, update_dns\n\nAdd, modify and delete an IPA host using IPA API',
 'ipa_hostgroup': 'Manage FreeIPA host-group\n\nArguments: host, description, state, hostgroup, cn\n\nAdd, modify and delete an IPA host-group using IPA API',
 'ipa_role': 'Manage FreeIPA role\n\nArguments: group, cn, service, host, hostgroup, state, user, privilege, description\n\nAdd, modify and delete a role within FreeIPA server using FreeIPA API',
 'ipa_service': 'Manage FreeIPA service\n\nArguments: hosts, state, force, krbcanonicalname\n\nAdd and delete an IPA service using IPA API',
 'ipa_subca': 'Manage FreeIPA Lightweight Sub Certificate Authorities.\n\nArguments: subca_desc, subca_name, state, subca_subject\n\nAdd, modify, enable, disable and delete an IPA Lightweight Sub Certificate Authorities using IPA API.',
 'ipa_sudocmd': 'Manage FreeIPA sudo command\n\nArguments: state, description, sudocmd\n\nAdd, modify or delete sudo command within FreeIPA server using FreeIPA API.',
 'ipa_sudocmdgroup': 'Manage FreeIPA sudo command group\n\nArguments: state, cn, sudocmd, description\n\nAdd, modify or delete sudo command group within IPA server using IPA API.',
 'ipa_sudorule': 'Manage FreeIPA sudo rule\n\nArguments: cn, runasgroupcategory, runasusercategory, cmd, host, hostgroup, usercategory, hostcategory, state, sudoopt, user, usergroup, cmdcategory, description\n\nAdd, modify or delete sudo rule within IPA server using IPA API.',
 'ipa_user': 'Manage FreeIPA users\n\nArguments: telephonenumber, sshpubkey, update_password, givenname, displayname, uid, krbpasswordexpiration, title, loginshell, uidnumber, state, gidnumber, sn, mail, password\n\nAdd, modify and delete user within IPA server',
 'ipa_vault': 'Manage FreeIPA vaults\n\nArguments: username, cn, service, ipavaultsalt, replace, state, ipavaultpublickey, ipavaulttype, validate_certs, description\n\nAdd, modify and delete vaults and secret vaults.\nKRA service should be enabled to use this module.',
 'ipadm_addr': 'Manage IP addresses on an interface on Solaris/illumos systems\n\nArguments: addrtype, state, temporary, address, addrobj, wait\n\nCreate/delete static/dynamic IP addresses on network interfaces on Solaris/illumos systems.\nUp/down static/dynamic IP addresses on network interfaces on Solaris/illumos systems.\nManage IPv6 link-local addresses on network interfaces on Solaris/illumos systems.',
 'ipadm_addrprop': 'Manage IP address properties on Solaris/illumos systems.\n\nArguments: state, property, temporary, value, addrobj\n\nModify IP address properties on Solaris/illumos systems.',
 'ipadm_if': 'Manage IP interfaces  on Solaris/illumos systems.\n\nArguments: state, temporary, name\n\nCreate, delete, enable or disable IP interfaces on Solaris/illumos systems.',
 'ipadm_ifprop': 'Manage IP interface properties on Solaris/illumos systems.\n\nArguments: state, temporary, interface, protocol, property, value\n\nModify IP interface properties on Solaris/illumos systems.',
 'ipadm_prop': 'Manage protocol properties on Solaris/illumos systems.\n\nArguments: protocol, state, property, temporary, value\n\nModify protocol properties on Solaris/illumos systems.',
 'ipify_facts': 'Retrieve the public IP of your internet gateway\n\nArguments: validate_certs, api_url, timeout\n\nIf behind NAT and need to know the public IP of your internet gateway.',
 'ipinfoio_facts': "Retrieve IP geolocation facts of a host's IP address\n\nArguments: http_agent, timeout\n\nGather IP geolocation facts of a host's IP address using ipinfo.io API",
 'ipmi_boot': 'Management of order of boot devices\n\nArguments: bootdev, name, persistent, uefiboot, state, user, password, port\n\nUse this module to manage order of boot devices',
 'ipmi_power': 'Power management for machine\n\nArguments: state, name, timeout, password, port, user\n\nUse this module for power management',
 'iptables': 'Modify iptables rules\n\nArguments: tcp_flags, comment, log_prefix, protocol, chain, in_interface, out_interface, limit_burst, ctstate, jump, to_ports, flush, table, icmp_type, to_destination, gateway, uid_owner, set_dscp_mark_class, log_level, src_range, destination, state, source, set_dscp_mark, policy, set_counters, match, dst_range, goto, fragment, to_source, syn, gid_owner, source_port, rule_num, destination_port, reject_with, limit, action, ip_version\n\nC(iptables) is used to set up, maintain, and inspect the tables of IP packet filter rules in the Linux kernel.\nThis module does not handle the saving and/or loading of rules, but rather only manipulates the current rules that are present in memory. This is the same as the behaviour of the C(iptables) and C(ip6tables) command which this module uses internally.',
 'irc': 'Send a message to an IRC channel\n\nArguments: style, key, passwd, color, server, topic, nick, part, nick_to, timeout, msg, use_ssl, port, channel\n\nSend a message to an IRC channel. This is a very simplistic implementation.',
 'ironware_command': 'Run arbitrary commands on Extreme IronWare devices\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to a Extreme Ironware node and returns the results read from the device. This module includes a I(wait_for) argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'ironware_config': 'Manage configuration sections on Extreme Ironware devices\n\nArguments: src, backup_options, backup, after, lines, update, replace, parents, commit, save_when, config, match, before\n\nExtreme Ironware configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with Ironware configuration sections in a deterministic way.',
 'ironware_facts': 'Collect facts from devices running Extreme Ironware\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running Ironware.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'iso_extract': 'Extract files from an ISO image\n\nArguments: dest, files, image, force, executable\n\nThis module has two possible ways of operation.\nIf 7zip is installed on the system, this module extracts files from an ISO into a temporary directory and copies files to a given destination, if needed.\nIf the user has mount-capabilities (CAP_SYS_ADMIN on Linux) this module mounts the ISO image to a temporary location, and copies files to a given destination, if needed.',
 'jabber': 'Send a message to jabber user or chat room\n\nArguments: to, host, user, encoding, msg, password, port\n\nSend a message to jabber',
 'java_cert': 'Uses keytool to import/remove key from java keystore (cacerts)\n\nArguments: keystore_create, cert_alias, executable, pkcs12_password, cert_port, pkcs12_alias, keystore_type, state, keystore_pass, pkcs12_path, cert_url, cert_path, keystore_path\n\nThis is a wrapper module around keytool, which can be used to import/remove certificates from a given java keystore.',
 'java_keystore': 'Create or delete a Java keystore in JKS format.\n\nArguments: private_key, group, name, certificate, dest, mode, owner, force, password\n\nCreate or delete a Java keystore in JKS format for a given certificate.',
 'jboss': 'Deploy applications to JBoss\n\nArguments: src, deploy_path, state, deployment\n\nDeploy applications to JBoss standalone using the filesystem.',
 'jenkins_job': 'Manage jenkins jobs\n\nArguments: name, url, enabled, state, token, user, password, config\n\nManage Jenkins jobs by using Jenkins REST API.',
 'jenkins_job_info': 'Get information about Jenkins jobs\n\nArguments: name, color, glob, url, token, user, password, validate_certs\n\nThis module can be used to query information about which Jenkins jobs which already exists.\nThis module was called C(jenkins_job_info) before Ansible 2.9. The usage did not change.',
 'jenkins_plugin': 'Add or remove Jenkins plugin\n\nArguments: jenkins_home, group, name, url, updates_url, with_dependencies, state, version, updates_expiration, mode, timeout, owner\n\nAnsible module which helps to manage Jenkins plugins.',
 'jenkins_script': 'Executes a groovy script in the jenkins instance\n\nArguments: password, user, timeout, script, url, args, validate_certs\n\nThe C(jenkins_script) module takes a script plus a dict of values to use within the script and returns the result of the script being run.',
 'jira': 'create and modify issues in a JIRA instance\n\nArguments: username, comment, description, assignee, inwardissue, operation, password, linktype, issue, fields, outwardissue, uri, summary, project, status, timeout, issuetype, validate_certs\n\nCreate and modify issues in a JIRA instance.',
 'junos_banner': 'Manage multiline banners on Juniper JUNOS devices\n\nArguments: active, text, state, banner\n\nThis will configure both login and motd banners on network devices. It allows playbooks to add or remote banner text from the active running configuration.',
 'junos_command': 'Run arbitrary commands on an Juniper JUNOS device\n\nArguments: retries, commands, wait_for, rpcs, interval, display, match\n\nSends an arbitrary set of commands to an JUNOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'junos_config': 'Manage configuration on devices running Juniper JUNOS\n\nArguments: comment, src, backup_options, rollback, confirm, lines, update, replace, confirm_commit, zeroize, src_format, check_commit, backup\n\nThis module provides an implementation for working with the active configuration running on Juniper JUNOS devices.  It provides a set of arguments for loading configuration, performing rollback operations and zeroing the active configuration on the device.',
 'junos_facts': 'Collect facts from remote devices running Juniper Junos\n\nArguments: config_format, gather_subset, gather_network_resources\n\nCollects fact information from a remote device running the Junos operating system.  By default, the module will collect basic fact information from the device to be included with the hostvars. Additional fact information can be collected based on the configured set of arguments.',
 'junos_interfaces': 'Manages interface attributes of Juniper Junos OS network devices.\n\nArguments: state, config\n\nThis module manages the interfaces on Juniper Junos OS network devices.',
 'junos_l2_interfaces': 'Manage Layer-2 interface on Juniper JUNOS devices\n\nArguments: state, config\n\nThis module provides declarative management of a Layer-2 interface on Juniper JUNOS devices.',
 'junos_l3_interfaces': 'Manage Layer 3 interface on Juniper JUNOS devices\n\nArguments: state, config\n\nThis module provides declarative management of a Layer 3 interface on Juniper JUNOS devices',
 'junos_lacp': 'Manage Global Link Aggregation Control Protocol (LACP) on Juniper Junos devices\n\nArguments: state, config\n\nThis module provides declarative management of global LACP on Juniper Junos network devices.',
 'junos_lacp_interfaces': 'Manage Link Aggregation Control Protocol (LACP) attributes of interfaces on Juniper JUNOS devices.\n\nArguments: state, config\n\nThis module manages Link Aggregation Control Protocol (LACP) attributes of interfaces on Juniper JUNOS devices.',
 'junos_lag_interfaces': 'Manage Link Aggregation on Juniper JUNOS devices.\n\nArguments: state, config\n\nThis module manages properties of Link Aggregation Group on Juniper JUNOS devices.',
 'junos_lldp_global': 'Manage link layer discovery protocol (LLDP) attributes on Juniper JUNOS devices.\n\nArguments: state, config\n\nThis module manages link layer discovery protocol (LLDP) attributes on Juniper JUNOS devices.',
 'junos_lldp_interfaces': 'Manage link layer discovery protocol (LLDP) attributes of interfaces on Juniper JUNOS devices\n\nArguments: state, config\n\nThis module manages link layer discovery protocol (LLDP) attributes of interfaces on Juniper JUNOS devices.',
 'junos_logging': 'Manage logging on network devices\n\nArguments: files, name, level, dest, facility, aggregate, state, active, rotate_frequency, size\n\nThis module provides declarative management of logging on Juniper JUNOS devices.',
 'junos_netconf': 'Configures the Junos Netconf system service\n\nArguments: state, netconf_port\n\nThis module provides an abstraction that enables and configures the netconf system service running on Junos devices.  This module can be used to easily enable the Netconf API. Netconf provides a programmatic interface for working with configuration and state resources as defined in RFC 6242. If the C(netconf_port) is not mentioned in the task by default netconf will be enabled on port 830 only.',
 'junos_package': 'Installs packages on remote devices running Junos\n\nArguments: src, force, no_copy, reboot, issu, version, force_host, validate\n\nThis module can install new and updated packages on remote devices running Junos.  The module will compare the specified package with the one running on the remote device and install the specified version if there is a mismatch',
 'junos_ping': 'Tests reachability using ping from devices running Juniper JUNOS\n\nArguments: count, dest, interval, source, state, ttl, interface, size\n\nTests reachability using ping from devices running Juniper JUNOS to a remote destination.\nTested against Junos (17.3R1.10)\nFor a general purpose network module, see the M(net_ping) module.\nFor Windows targets, use the M(win_ping) module instead.\nFor targets running Python, use the M(ping) module instead.',
 'junos_rpc': 'Runs an arbitrary RPC over NetConf on an Juniper JUNOS device\n\nArguments: output, rpc, args, attrs\n\nSends a request to the remote device running JUNOS to execute the specified RPC using the NetConf transport.  The reply is then returned to the playbook in the C(xml) key.  If an alternate output format is requested, the reply is transformed to the requested output.',
 'junos_scp': 'Transfer files from or to remote devices running Junos\n\nArguments: dest, src, recursive, remote_src\n\nThis module transfers files via SCP from or to remote devices running Junos.',
 'junos_static_route': 'Manage static IP routes on Juniper JUNOS network devices\n\nArguments: qualified_next_hop, aggregate, state, next_hop, preference, qualified_preference, address, active\n\nThis module provides declarative management of static IP routes on Juniper JUNOS network devices.',
 'junos_system': 'Manage the system attributes on Juniper JUNOS devices\n\nArguments: name_servers, state, active, domain_search, hostname, domain_name\n\nThis module provides declarative management of node system attributes on Juniper JUNOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 'junos_user': 'Manage local user accounts on Juniper JUNOS devices\n\nArguments: encrypted_password, name, purge, aggregate, state, role, full_name, active, sshkey\n\nThis module manages locally configured user accounts on remote network devices running the JUNOS operating system.  It provides a set of arguments for creating, removing and updating locally defined accounts',
 'junos_vlans': 'Create and manage VLAN configurations on Junos OS\n\nArguments: state, config\n\nThis module creates and manages VLAN configurations on Junos OS.',
 'junos_vrf': 'Manage the VRF definitions on Juniper JUNOS devices\n\nArguments: target, interfaces, name, rd, table_label, state, aggregate, active, description\n\nThis module provides declarative management of VRF definitions on Juniper JUNOS devices.  It allows playbooks to manage individual or the entire VRF collection.',
 'k8s': 'Manage Kubernetes (K8s) objects\n\nArguments: append_hash, merge_type, wait_sleep, wait_condition, wait_timeout, apply, validate, wait\n\nUse the OpenShift Python client to perform CRUD operations on K8s objects.\nPass the object definition from a source file or inline. See examples for reading files and using Jinja templates or vault-encrypted files.\nAccess to the full range of K8s APIs.\nUse the M(k8s_info) module to obtain a list of items about an object of type C(kind)\nAuthenticate using either a config file, certificates, password or token.\nSupports check mode.',
 'k8s_auth': u"Authenticate to Kubernetes clusters which require an explicit login step\n\nArguments: username, host, password, ca_cert, api_key, validate_certs, state\n\nThis module handles authenticating to Kubernetes clusters requiring I(explicit) authentication procedures, meaning ones where a client logs in (obtains an authentication token), performs API operations using said token and then logs out (revokes the token). An example of a Kubernetes distribution requiring this module is OpenShift.\nOn the other hand a popular configuration for username+password authentication is one utilizing HTTP Basic Auth, which does not involve any additional login/logout steps (instead login credentials can be attached to each and every API call performed) and as such is handled directly by the C(k8s) module (and other resource\u2013specific modules) by utilizing the C(host), C(username) and C(password) parameters. Please consult your preferred module's documentation for more details.",
 'k8s_info': 'Describe Kubernetes (K8s) objects\n\nArguments: kind, field_selectors, name, namespace, label_selectors, api_version\n\nUse the OpenShift Python client to perform read operations on K8s objects.\nAccess to the full range of K8s APIs.\nAuthenticate using either a config file, certificates, password or token.\nSupports check mode.\nThis module was called C(k8s_facts) before Ansible 2.9. The usage did not change.',
 'k8s_scale': 'Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.\n\nArguments: \n\nSimilar to the kubectl scale command. Use to set the number of replicas for a Deployment, ReplicaSet, or Replication Controller, or the parallelism attribute of a Job. Supports check mode.',
 'k8s_service': 'Manage Services on Kubernetes\n\nArguments: merge_type, force, name, namespace, resource_definition, state, selector, type, ports\n\nUse Openshift Python SDK to manage Services on Kubernetes',
 'kernel_blacklist': 'Blacklist kernel modules\n\nArguments: blacklist_file, state, name\n\nAdd or remove kernel modules from blacklist.',
 'keycloak_client': 'Allows administration of Keycloak clients via Keycloak API\n\nArguments: default_roles, protocol, use_template_config, authorization_settings, frontchannel_logout, use_template_scope, registration_access_token, authorization_services_enabled, standard_flow_enabled, direct_access_grants_enabled, id, surrogate_auth_required, implicit_flow_enabled, node_re_registration_timeout, root_url, realm, base_url, web_origins, full_scope_allowed, secret, bearer_only, not_before, redirect_uris, description, registered_nodes, state, client_id, public_client, service_accounts_enabled, name, client_authenticator_type, admin_url, enabled, protocol_mappers, client_template, use_template_mappers, attributes, consent_required\n\nThis module allows the administration of Keycloak clients via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(http://www.keycloak.org/docs-api/3.3/rest-api/). Aliases are provided so camelCased versions can be used as well.\nThe Keycloak API does not always sanity check inputs e.g. you can set SAML-specific settings on an OpenID Connect client for instance and vice versa. Be careful. If you do not specify a setting, usually a sensible default is chosen.',
 'keycloak_clienttemplate': 'Allows administration of Keycloak client templates via Keycloak API\n\nArguments: protocol, description, protocol_mappers, full_scope_allowed, state, attributes, realm, id, name\n\nThis module allows the administration of Keycloak client templates via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(http://www.keycloak.org/docs-api/3.3/rest-api/)\nThe Keycloak API does not always enforce for only sensible settings to be used -- you can set SAML-specific settings on an OpenID Connect client for instance and vice versa. Be careful. If you do not specify a setting, usually a sensible default is chosen.',
 'keycloak_group': 'Allows administration of Keycloak groups via Keycloak API\n\nArguments: attributes, state, realm, name, id\n\nThis module allows you to add, remove or modify Keycloak groups via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs and a user having the expected roles.\nThe names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at U(http://www.keycloak.org/docs-api/3.3/rest-api/).\nAttributes are multi-valued in the Keycloak API. All attributes are lists of individual values and will be returned that way by this module. You may pass single values for attributes when calling the module, and this will be translated into a list suitable for the API.\nWhen updating a group, where possible provide the group ID to the module. This removes a lookup to the API to translate the name into the group ID.',
 'kibana_plugin': 'Manage Kibana plugins\n\nArguments: force, name, url, state, version, timeout, plugin_dir, plugin_bin\n\nThis module can be used to manage Kibana plugins.',
 'kinesis_stream': 'Manage a Kinesis Stream.\n\nArguments: name, tags, encryption_type, retention_period, shards, encryption_state, state, wait_timeout, key_id, wait\n\nCreate or Delete a Kinesis Stream.\nUpdate the retention period of a Kinesis Stream.\nUpdate Tags on a Kinesis Stream.\nEnable/disable server side encryption on a Kinesis Stream.',
 'known_hosts': "Add or remove a host from the C(known_hosts) file\n\nArguments: path, state, hash_host, name, key\n\nThe C(known_hosts) module lets you add or remove a host keys from the C(known_hosts) file.\nStarting at Ansible 2.2, multiple entries per host are allowed, but only one for each key type supported by ssh. This is useful if you're going to want to use the M(git) module over ssh, for example.\nIf you have a very large number of host keys to manage, you will find the M(template) module more useful.",
 'kubevirt_cdi_upload': 'Upload local VM images to CDI Upload Proxy.\n\nArguments: merge_type, pvc_namespace, upload_host, path, upload_host_validate_certs, pvc_name\n\nUse Openshift Python SDK to create UploadTokenRequest objects.\nTransfer contents of local files to the CDI Upload Proxy.',
 'kubevirt_preset': 'Manage KubeVirt virtual machine presets\n\nArguments: state, namespace, name, selector\n\nUse Openshift Python SDK to manage the state of KubeVirt virtual machine presets.',
 'kubevirt_pvc': 'Manage PVCs on Kubernetes\n\nArguments: force, labels, selector, wait_timeout, cdi_source, storage_class_name, access_modes, volume_mode, wait, merge_type, name, namespace, resource_definition, state, volume_name, size, annotations\n\nUse Openshift Python SDK to manage PVCs on Kubernetes\nSupport Containerized Data Importer out of the box',
 'kubevirt_rs': 'Manage KubeVirt virtual machine replica sets\n\nArguments: state, selector, namespace, name, replicas\n\nUse Openshift Python SDK to manage the state of KubeVirt virtual machine replica sets.',
 'kubevirt_template': 'Manage KubeVirt templates\n\nArguments: icon_class, description, default_nic, editable, documentation_url, objects, long_description, name, merge_type, display_name, parameters, default_volume, support_url, provider_display_name, namespace, default_disk, version, default_network\n\nUse Openshift Python SDK to manage the state of KubeVirt templates.',
 'kubevirt_vm': 'Manage KubeVirt virtual machine\n\nArguments: datavolumes, name, template, ephemeral, namespace, state, template_parameters\n\nUse Openshift Python SDK to manage the state of KubeVirt virtual machines.',
 'lambda': 'Manage AWS Lambda functions\n\nArguments: description, tags, s3_key, zip_file, s3_object_version, memory_size, dead_letter_arn, name, s3_bucket, state, handler, role, timeout, environment_variables, runtime, vpc_subnet_ids, vpc_security_group_ids\n\nAllows for the management of Lambda functions.',
 'lambda_alias': 'Creates, updates or deletes AWS Lambda function aliases.\n\nArguments: function_name, state, version, description, name\n\nThis module allows the management of AWS Lambda functions aliases via the Ansible framework.  It is idempotent and supports "Check" mode.    Use module M(lambda) to manage the lambda function itself and M(lambda_event) to manage event source mappings.',
 'lambda_event': 'Creates, updates or deletes AWS Lambda function event mappings.\n\nArguments: source_params, state, version, event_source, alias, lambda_function_arn\n\nThis module allows the management of AWS Lambda function event source mappings such as DynamoDB and Kinesis stream events via the Ansible framework. These event source mappings are relevant only in the AWS Lambda pull model, where AWS Lambda invokes the function. It is idempotent and supports "Check" mode.  Use module M(lambda) to manage the lambda function itself and M(lambda_alias) to manage function aliases.',
 'lambda_info': 'Gathers AWS Lambda function details\n\nArguments: query, event_source_arn, function_name\n\nGathers various details related to Lambda functions, including aliases, versions and event source mappings. Use module M(lambda) to manage the lambda function itself, M(lambda_alias) to manage function aliases and M(lambda_event) to manage lambda event source mappings.',
 'lambda_policy': 'Creates, updates or deletes AWS Lambda policy statements.\n\nArguments: event_source_token, statement_id, alias, state, version, action, source_arn, function_name, source_account, principal\n\nThis module allows the management of AWS Lambda policy statements. It is idempotent and supports "Check" mode.  Use module M(lambda) to manage the lambda function itself, M(lambda_alias) to manage function aliases, M(lambda_event) to manage event source mappings such as Kinesis streams, M(execute_lambda) to execute a lambda function and M(lambda_info) to gather information relating to one or more lambda functions.',
 'layman': 'Manage Gentoo overlays\n\nArguments: list_url, validate_certs, name, state\n\nUses Layman to manage an additional repositories for the Portage package manager on Gentoo Linux. Please note that Layman must be installed on a managed node prior using this module.',
 'ldap_attr': 'Add or remove LDAP attribute values\n\nArguments: state, values, name\n\nAdd or remove LDAP attribute values.',
 'ldap_entry': 'Add or remove LDAP entries.\n\nArguments: objectClass, attributes, state\n\nAdd or remove LDAP entries. This module only asserts the existence or non-existence of an LDAP entry, not its attributes. To assert the attribute values of an entry, see M(ldap_attr).',
 'ldap_passwd': 'Set passwords in LDAP.\n\nArguments: passwd\n\nSet a password for an LDAP entry.  This module only asserts that a given password is valid for a given entry.  To assert the existence of an entry, see M(ldap_entry).',
 'librato_annotation': 'create an annotation in librato\n\nArguments: description, links, title, start_time, name, source, end_time, api_key, user\n\nCreate an annotation event on the given annotation stream :name. If the annotation stream does not exist, it will be created automatically',
 'lightsail': "Create or delete a virtual machine instance in AWS Lightsail\n\nArguments: name, zone, blueprint_id, user_data, key_pair_name, state, wait_timeout, bundle_id, wait\n\nCreates or instances in AWS Lightsail and optionally wait for it to be 'running'.",
 'lineinfile': 'Manage lines in text files\n\nArguments: insertbefore, create, others, backrefs, state, firstmatch, insertafter, regexp, path, backup, line\n\nThis module ensures a particular line is in a file, or replace an existing line using a back-referenced regular expression.\nThis is primarily useful when you want to change a single line in a file only.\nSee the M(replace) module if you want to change multiple, similar lines or check M(blockinfile) if you want to insert/update/remove a block of lines in a file. For other cases, see the M(copy) or M(template) modules.',
 'linode': "Manage instances on the Linode Public Cloud\n\nArguments: alert_diskio_enabled, additional_disks, alert_bwin_enabled, payment_term, kernel_id, alert_bwin_threshold, alert_cpu_enabled, alert_bwquota_enabled, linode_id, alert_diskio_threshold, wait_timeout, private_ip, watchdog, password, ssh_pub_key, wait, datacenter, alert_bwquota_threshold, backupweeklyday, name, displaygroup, alert_cpu_threshold, alert_bwout_enabled, state, swap, alert_bwout_threshold, distribution, api_key, plan\n\nManage Linode Public Cloud instances and optionally wait for it to be 'running'.",
 'linode_v4': 'Manage instances on the Linode cloud.\n\nArguments: root_pass, group, tags, access_token, region, label, state, authorized_keys, type, image\n\nManage instances on the Linode cloud.',
 'listen_ports_facts': 'Gather facts on processes listening on TCP and UDP ports.\n\nArguments: \n\nGather facts on processes listening on TCP and UDP ports.',
 'lldp': 'get details reported by lldp\n\nArguments: \n\nReads data out of lldpctl',
 'locale_gen': 'Creates or removes locales\n\nArguments: state, name\n\nManages locales by editing /etc/locale.gen and invoking locale-gen.',
 'logentries': 'Module for tracking logs via logentries.com\n\nArguments: path, state, name, logtype\n\nSends logs to LogEntries in realtime',
 'logentries_msg': 'Send a message to logentries.\n\nArguments: msg, token, api, port\n\nSend a message to logentries',
 'logicmonitor': 'Manage your LogicMonitor account through Ansible Playbooks\n\nArguments: displayname, description, company, user, groups, duration, password, collector, id, alertenable, target, hostname, properties, starttime, action, fullpath\n\nLogicMonitor is a hosted, full-stack, infrastructure monitoring platform.\nThis module manages hosts, host groups, and collectors within your LogicMonitor account.',
 'logicmonitor_facts': 'Collect facts about LogicMonitor objects\n\nArguments: displayname, target, company, hostname, user, fullpath, password, collector\n\nLogicMonitor is a hosted, full-stack, infrastructure monitoring platform.\nThis module collects facts about hosts and host groups within your LogicMonitor account.',
 'logstash_plugin': 'Manage Logstash plugins\n\nArguments: proxy_port, state, version, name, proxy_host, plugin_bin\n\nManages Logstash plugins.',
 'luks_device': 'Manage encrypted (LUKS) devices\n\nArguments: remove_keyfile, force_remove_last_key, name, device, keyfile, state, new_keyfile\n\nModule manages L(LUKS,https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup) on given device. Supports creating, destroying, opening and closing of LUKS container and adding or removing new keys.',
 'lvg': 'Configure LVM volume groups\n\nArguments: vg_options, pvs, force, vg, pesize, pv_options, state\n\nThis module creates, removes or resizes volume groups.',
 'lvol': 'Configure LVM logical volumes\n\nArguments: pvs, force, vg, lv, resizefs, state, thinpool, snapshot, active, shrink, opts, size\n\nThis module creates, removes or resizes logical volumes.',
 'lxc_container': 'Manage LXC Containers\n\nArguments: archive_path, zfs_root, container_log_level, template_options, container_command, clone_name, lxc_path, container_config, fs_type, archive, vg_name, clone_snapshot, container_log, name, lv_name, fs_size, archive_compression, backing_store, state, thinpool, template, directory, config\n\nManagement of LXC containers',
 'lxca_cmms': 'Custom module for lxca cmms inventory utility\n\nArguments: command_options, uuid, chassis\n\nThis module returns/displays a inventory details of cmms',
 'lxca_nodes': 'Custom module for lxca nodes inventory utility\n\nArguments: command_options, uuid, chassis\n\nThis module returns/displays a inventory details of nodes',
 'lxd_container': 'Manage LXD Containers\n\nArguments: name, source, url, config, ephemeral, snap_url, wait_for_ipv4_addresses, state, devices, timeout, client_key, trust_password, client_cert, force_stop, architecture\n\nManagement of LXD containers',
 'lxd_profile': 'Manage LXD profiles\n\nArguments: new_name, name, url, config, description, devices, state, snap_url, trust_password, client_cert, client_key\n\nManagement of LXD profiles',
 'macports': 'Package manager for MacPorts\n\nArguments: variant, state, upgrade, selfupdate, name\n\nManages MacPorts packages (ports)',
 'mail': "Send an email\n\nArguments: body, username, secure, cc, host, password, port, to, subject, from, headers, charset, bcc, attach, timeout, subtype\n\nThis module is useful for sending emails from playbooks.\nOne may wonder why automate sending emails?  In complex environments there are from time to time processes that cannot be automated, either because you lack the authority to make it so, or because not everyone agrees to a common approach.\nIf you cannot automate a specific step, but the step is non-blocking, sending out an email to the responsible party to make them perform their part of the bargain is an elegant way to put the responsibility in someone else's lap.\nOf course sending out a mail can be equally useful as a way to notify one or more people in a team that a specific action has been (successfully) taken.",
 'make': 'Run targets in a Makefile\n\nArguments: chdir, params, target, file\n\nRun targets in a Makefile.',
 'manageiq_alert_profiles': 'Configuration of alert profiles for ManageIQ\n\nArguments: notes, alerts, state, resource_type, name\n\nThe manageiq_alert_profiles module supports adding, updating and deleting alert profiles in ManageIQ.',
 'manageiq_alerts': 'Configuration of alerts in ManageIQ\n\nArguments: state, description, expression, expression_type, enabled, options, resource_type\n\nThe manageiq_alerts module supports adding, updating and deleting alerts in ManageIQ.',
 'manageiq_group': 'Management of groups in ManageIQ.\n\nArguments: description, tenant_id, belongsto_filters_merge_mode, role_id, managed_filters, state, role, managed_filters_merge_mode, belongsto_filters, tenant\n\nThe manageiq_group module supports adding, updating and deleting groups in ManageIQ.',
 'manageiq_policies': 'Management of resource policy_profiles in ManageIQ.\n\nArguments: state, resource_name, policy_profiles, resource_type\n\nThe manageiq_policies module supports adding and deleting policy_profiles in ManageIQ.',
 'manageiq_provider': 'Management of provider in ManageIQ.\n\nArguments: ssh_keypair, host_default_vnc_port_start, tenant_mapping_enabled, metrics, azure_tenant_id, provider_region, subscription, name, zone, host_default_vnc_port_end, alerts, project, state, provider, type, api_version\n\nThe manageiq_provider module supports adding, updating, and deleting provider in ManageIQ.',
 'manageiq_tags': 'Management of resource tags in ManageIQ.\n\nArguments: state, resource_name, resource_type, tags\n\nThe manageiq_tags module supports adding, updating and deleting tags in ManageIQ.',
 'manageiq_tenant': 'Management of tenants in ManageIQ.\n\nArguments: parent_id, state, name, parent, quotas, description\n\nThe manageiq_tenant module supports adding, updating and deleting tenants in ManageIQ.',
 'manageiq_user': 'Management of users in ManageIQ.\n\nArguments: update_password, group, name, password, userid, state, email\n\nThe manageiq_user module supports adding, updating and deleting users in ManageIQ.',
 'matrix': 'Send notifications to matrix\n\nArguments: token, msg_plain, user_id, msg_html, hs_url, room_id, password\n\nThis module sends html formatted notifications to matrix rooms.',
 'mattermost': 'Send Mattermost notifications\n\nArguments: username, icon_url, url, text, api_key, validate_certs, channel\n\nSends notifications to U(http://your.mattermost.url) via the Incoming WebHook integration.',
 'maven_artifact': 'Downloads an Artifact from a Maven Repository\n\nArguments: username, keep_name, group_id, artifact_id, extension, dest, validate_certs, headers, state, version, timeout, repository_url, password, verify_checksum, classifier\n\nDownloads an artifact from a maven repository given the maven coordinates provided to the module.\nCan retrieve snapshots or release versions of the artifact and will resolve the latest available version if one is not available.',
 'memset_dns_reload': "Request reload of Memset's DNS infrastructure,\n\nArguments: api_key, poll\n\nRequest a reload of Memset's DNS infrastructure, and optionally poll until it finishes.",
 'memset_memstore_info': 'Retrieve Memstore product usage information.\n\nArguments: api_key, name\n\nRetrieve Memstore product usage information.\nThis module was called C(memset_memstore_facts) before Ansible 2.9. The usage did not change.',
 'memset_server_info': 'Retrieve server information.\n\nArguments: api_key, name\n\nRetrieve server information.\nThis module was called C(memset_server_facts) before Ansible 2.9. The usage did not change.',
 'memset_zone': 'Creates and deletes Memset DNS zones.\n\nArguments: state, api_key, force, name, ttl\n\nManage DNS zones in a Memset account.',
 'memset_zone_domain': 'Create and delete domains in Memset DNS zones.\n\nArguments: state, api_key, domain, zone\n\nManage DNS zone domains in a Memset account.',
 'memset_zone_record': 'Create and delete records in Memset DNS zones.\n\nArguments: priority, zone, address, relative, record, state, ttl, api_key, type\n\nManage DNS records in a Memset account.',
 'meraki_admin': 'Manage administrators in the Meraki cloud\n\nArguments: org_name, state, name, tags, org_access, email, networks\n\nAllows for creation, management, and visibility into administrators within Meraki.',
 'meraki_config_template': 'Manage configuration templates in the Meraki cloud\n\nArguments: org_name, state, config_template, net_name, org_id, auto_bind, net_id\n\nAllows for querying, deleting, binding, and unbinding of configuration templates.',
 'meraki_content_filtering': 'Edit Meraki MX content filtering policies\n\nArguments: subset, blocked_urls, auth_key, blocked_categories, state, category_list_size, net_name, allowed_urls, net_id\n\nAllows for setting policy on content filtering.',
 'meraki_device': 'Manage devices in the Meraki cloud\n\nArguments: model, lldp_cdp_timespan, tags, move_map_marker, hostname, note, serial_uplink, state, net_name, address, lat, lng, net_id, serial, serial_lldp_cdp\n\nVisibility into devices associated to a Meraki environment.',
 'meraki_firewalled_services': 'Edit firewall policies for administrative network services\n\nArguments: org_name, auth_key, service, org_id, allowed_ips, access, state, net_name, net_id\n\nAllows for setting policy firewalled services for Meraki network devices.',
 'meraki_malware': 'Manage Malware Protection in the Meraki cloud\n\nArguments: state, allowed_files, net_name, allowed_urls, net_id, mode\n\nFully configure malware protection in a Meraki environment.',
 'meraki_mr_l3_firewall': 'Manage MR access point layer 3 firewalls in the Meraki cloud\n\nArguments: allow_lan_access, state, net_name, rules, ssid_name, number, net_id\n\nAllows for creation, management, and visibility into layer 3 firewalls implemented on Meraki MR access points.\nModule is not idempotent as of current release.',
 'meraki_mx_l3_firewall': 'Manage MX appliance layer 3 firewalls in the Meraki cloud\n\nArguments: rules, state, net_id, syslog_default_rule, net_name\n\nAllows for creation, management, and visibility into layer 3 firewalls implemented on Meraki MX firewalls.',
 'meraki_mx_l7_firewall': 'Manage MX appliance layer 7 firewalls in the Meraki cloud\n\nArguments: rules, state, net_name, categories, net_id\n\nAllows for creation, management, and visibility into layer 7 firewalls implemented on Meraki MX firewalls.',
 'meraki_nat': 'Manage NAT rules in Meraki cloud\n\nArguments: subset, one_to_many, one_to_one, org_id, state, net_name, port_forwarding, net_id\n\nAllows for creation, management, and visibility of NAT rules (1:1, 1:many, port forwarding) within Meraki.',
 'meraki_network': 'Manage networks in the Meraki cloud\n\nArguments: enable_vlans, tags, disable_my_meraki, state, net_name, enable_remote_status_page, enable_my_meraki, timezone, type, net_id\n\nAllows for creation, management, and visibility into networks within Meraki.',
 'meraki_organization': 'Manage organizations in the Meraki cloud\n\nArguments: org_name, state, org_id, clone\n\nAllows for creation, management, and visibility into organizations within Meraki.',
 'meraki_snmp': 'Manage organizations in the Meraki cloud\n\nArguments: v3_auth_pass, v3_priv_mode, users, v3_auth_mode, v3_enabled, access, v3_priv_pass, state, peer_ips, net_name, net_id, v2c_enabled, community_string\n\nAllows for management of SNMP settings for Meraki.',
 'meraki_ssid': 'Manage wireless SSIDs in the Meraki cloud\n\nArguments: psk, net_name, ip_assignment_mode, state, encryption_mode, number, radius_load_balancing_policy, auth_mode, per_client_bandwidth_limit_up, concentrator_network_id, radius_coa_enabled, band_selection, default_vlan_id, vlan_id, ap_tags_vlan_ids, name, min_bitrate, use_vlan_tagging, enabled, radius_accounting_enabled, walled_garden_ranges, walled_garden_enabled, wpa_encryption_mode, radius_servers, radius_accounting_servers, per_client_bandwidth_limit_down, net_id, radius_failover_policy, splash_page\n\nAllows for management of SSIDs in a Meraki wireless environment.',
 'meraki_static_route': 'Manage static routes in the Meraki cloud\n\nArguments: subnet, name, enabled, route_id, state, reserved_ip_ranges, gateway_ip, net_name, net_id, fixed_ip_assignments\n\nAllows for creation, management, and visibility into static routes within Meraki.',
 'meraki_switchport': 'Manage switchports on a switch in the Meraki cloud\n\nArguments: isolation_enabled, tags, vlan, number, rstp_enabled, voice_vlan, allowed_vlans, serial, name, access_policy_number, enabled, poe_enabled, state, stp_guard, type, link_negotiation\n\nAllows for management of switchports settings for Meraki MS switches.',
 'meraki_syslog': 'Manage syslog server settings in the Meraki cloud.\n\nArguments: state, net_id, net_name, auth_key, servers\n\nAllows for creation and management of Syslog servers within Meraki.',
 'meraki_vlan': 'Manage VLANs in the Meraki cloud\n\nArguments: subnet, name, appliance_ip, dns_nameservers, state, net_name, reserved_ip_range, vpn_nat_subnet, net_id, vlan_id, fixed_ip_assignments\n\nCreate, edit, query, or delete VLANs in a Meraki environment.',
 'meraki_webhook': 'Manage webhooks configured in the Meraki cloud\n\nArguments: name, url, shared_secret, state, net_name, webhook_id, test, test_id, net_id\n\nConfigure and query information about webhooks within the Meraki cloud.',
 'meta': "Execute Ansible 'actions'\n\nArguments: free_form\n\nMeta tasks are a special kind of task which can influence Ansible internal execution or state.\nMeta tasks can be used anywhere within your playbook.\nThis module is also supported for Windows targets.",
 'mksysb': 'Generates AIX mksysb rootvg backups.\n\nArguments: exclude_files, name, software_packing, use_snapshot, create_map_files, extended_attrs, backup_crypt_files, new_image_data, exclude_wpar_files, backup_dmapi_fs, storage_path\n\nThis module manages a basic AIX mksysb (image) of rootvg.',
 'modprobe': 'Load or unload kernel modules\n\nArguments: state, params, name\n\nLoad or unload kernel modules.',
 'mongodb_parameter': 'Change an administrative parameter on a MongoDB server.\n\nArguments: login_port, database, login_user, login_host, login_database, param, ssl, param_type, value, login_password, replica_set\n\nChange an administrative parameter on a MongoDB server.',
 'mongodb_replicaset': 'Initialises a MongoDB replicaset.\n\nArguments: login_port, ssl_cert_reqs, election_timeout_millis, login_user, login_host, login_database, arbiter_at_index, heartbeat_timeout_secs, ssl, members, login_password, chaining_allowed, protocol_version, validate, replica_set\n\nInitialises a MongoDB replicaset in a new deployment.\nValidates the replicaset name for existing deployments.',
 'mongodb_shard': 'Add and remove shards from a MongoDB Cluster.\n\nArguments: login_port, login_user, login_host, login_database, ssl_cert_reqs, shard, ssl, state, login_password\n\nAdd and remove shards from a MongoDB Cluster.',
 'mongodb_user': 'Adds or removes a user from a MongoDB database.\n\nArguments: login_port, update_password, name, roles, database, login_user, login_host, login_database, ssl_cert_reqs, ssl, state, login_password, password, replica_set\n\nAdds or removes a user from a MongoDB database.',
 'monit': 'Manage the state of a program monitored via Monit\n\nArguments: state, name, timeout\n\nManage the state of a program monitored via I(Monit)',
 'mount': 'Control active and configured mount points\n\nArguments: src, dump, passno, fstab, boot, fstype, state, path, backup, opts\n\nThis module controls active and configured mount points in C(/etc/fstab).',
 'mqtt': 'Publish a message on an MQTT topic for the IoT\n\nArguments: username, tls_version, qos, ca_cert, port, client_cert, server, topic, client_id, retain, password, payload, client_key\n\nPublish a message on an MQTT topic.',
 'mso_label': 'Manage labels\n\nArguments: state, type, label\n\nManage labels on Cisco ACI Multi-Site.',
 'mso_role': 'Manage roles\n\nArguments: role, state, display_name, description, permissions\n\nManage roles on Cisco ACI Multi-Site.',
 'mso_schema': 'Manage schemas\n\nArguments: templates, state, sites, schema\n\nManage schemas on Cisco ACI Multi-Site.',
 'mso_schema_site': 'Manage sites in schemas\n\nArguments: state, site, template, schema\n\nManage sites on Cisco ACI Multi-Site.',
 'mso_schema_site_anp': 'Manage site-local Application Network Profiles (ANPs) in schema template\n\nArguments: state, anp, site, template, schema\n\nManage site-local ANPs in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_anp_epg': 'Manage site-local Endpoint Groups (EPGs) in schema template\n\nArguments: state, anp, template, epg, site, schema\n\nManage site-local EPGs in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_anp_epg_domain': 'Manage site-local EPG domains in schema template\n\nArguments: switch_type, allow_micro_segmentation, template, vlan_encap_mode, site, anp, domain_association_type, resolution_immediacy, micro_seg_vlan, enhanced_lagpolicy_dn, domain_profile, micro_seg_vlan_type, switching_mode, enhanced_lagpolicy_name, port_encap_vlan_type, state, deployment_immediacy, epg, port_encap_vlan, schema\n\nManage site-local EPG domains in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_anp_epg_staticleaf': 'Manage site-local EPG static leafs in schema template\n\nArguments: leaf, vlan, site, state, anp, template, epg, pod, schema\n\nManage site-local EPG static leafs in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_anp_epg_staticport': 'Manage site-local EPG static ports in schema template\n\nArguments: leaf, template, vlan, site, state, anp, mode, deployment_immediacy, epg, path, pod, type, schema\n\nManage site-local EPG static ports in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_anp_epg_subnet': 'Manage site-local EPG subnets in schema template\n\nArguments: subnet, epg, description, no_default_gateway, site, state, anp, template, scope, shared, schema\n\nManage site-local EPG subnets in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_bd': 'Manage site-local Bridge Domains (BDs) in schema template\n\nArguments: bd, state, template, site, host_route, schema\n\nManage site-local BDs in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_bd_l3out': "Manage site-local BD l3out's in schema template\n\nArguments: bd, l3out, state, template, site, schema\n\nManage site-local BDs l3out's in schema template on Cisco ACI Multi-Site.",
 'mso_schema_site_bd_subnet': 'Manage site-local BD subnets in schema template\n\nArguments: bd, subnet, description, no_default_gateway, site, state, template, scope, shared, schema\n\nManage site-local BD subnets in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_vrf': 'Manage site-local VRFs in schema template\n\nArguments: state, schema, vrf, template, site\n\nManage site-local VRFs in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_vrf_region': 'Manage site-local VRF regions in schema template\n\nArguments: state, vrf, template, region, site, schema\n\nManage site-local VRF regions in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_vrf_region_cidr': 'Manage site-local VRF region CIDRs in schema template\n\nArguments: region, site, primary, state, vrf, template, cidr, schema\n\nManage site-local VRF region CIDRs in schema template on Cisco ACI Multi-Site.',
 'mso_schema_site_vrf_region_cidr_subnet': 'Manage site-local VRF regions in schema template\n\nArguments: subnet, zone, region, site, state, vrf, template, cidr, schema\n\nManage site-local VRF regions in schema template on Cisco ACI Multi-Site.',
 'mso_schema_template': 'Manage templates in schemas\n\nArguments: state, display_name, tenant, template, schema\n\nManage templates on Cisco ACI Multi-Site.',
 'mso_schema_template_anp': 'Manage Application Network Profiles (ANPs) in schema templates\n\nArguments: anp, state, display_name, template, schema\n\nManage ANPs in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_anp_epg': 'Manage Endpoint Groups (EPGs) in schema templates\n\nArguments: bd, subnets, useg_epg, display_name, intersite_multicaste_source, state, preferred_group, vrf, template, epg, anp, intra_epg_isolation, schema\n\nManage EPGs in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_anp_epg_contract': 'Manage EPG contracts in schema templates\n\nArguments: state, anp, template, epg, contract, schema\n\nManage EPG contracts in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_anp_epg_subnet': 'Manage EPG subnets in schema templates\n\nArguments: subnet, epg, description, no_default_gateway, state, anp, template, scope, shared, schema\n\nManage EPG subnets in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_bd': 'Manage Bridge Domains (BDs) in schema templates\n\nArguments: bd, subnets, display_name, layer2_stretch, optimize_wan_bandwidth, state, layer3_multicast, template, layer2_unknown_unicast, schema, intersite_bum_traffic, vrf\n\nManage BDs in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_bd_subnet': 'Manage BD subnets in schema templates\n\nArguments: bd, subnet, description, no_default_gateway, state, template, scope, shared, schema\n\nManage BD subnets in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_contract_filter': 'Manage contract filters in schema templates\n\nArguments: template, filter_type, filter, state, contract_display_name, contract, filter_directives, filter_template, contract_scope, contract_filter_type, schema, filter_schema\n\nManage contract filters in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_deploy': 'Deploy schema templates to sites\n\nArguments: state, site, template, schema\n\nDeploy schema templates to sites.',
 'mso_schema_template_externalepg': 'Manage external EPGs in schema templates\n\nArguments: state, display_name, vrf, template, externalepg, schema\n\nManage external EPGs in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_filter_entry': 'Manage filter entries in schema templates\n\nArguments: filter_display_name, description, arp_flag, fragments_only, stateful, tcp_session_rules, source_from, ip_protocol, display_name, source_to, ethertype, destination_from, filter, state, template, entry, destination_to, schema\n\nManage filter entries in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_l3out': 'Manage l3outs in schema templates\n\nArguments: l3out, state, display_name, vrf, template, schema\n\nManage l3outs in schema templates on Cisco ACI Multi-Site.',
 'mso_schema_template_vrf': 'Manage VRFs in schema templates\n\nArguments: state, display_name, layer3_multicast, template, vrf, schema\n\nManage VRFs in schema templates on Cisco ACI Multi-Site.',
 'mso_site': 'Manage sites\n\nArguments: apic_site_id, apic_password, labels, site, apic_username, state, location, urls\n\nManage sites on Cisco ACI Multi-Site.',
 'mso_tenant': 'Manage tenants\n\nArguments: state, display_name, description, sites, tenant, users\n\nManage tenants on Cisco ACI Multi-Site.',
 'mso_user': 'Manage users\n\nArguments: first_name, last_name, roles, user_password, domain, phone, state, user, account_status, email\n\nManage users on Cisco ACI Multi-Site.',
 'mssql_db': 'Add or remove MSSQL databases from a remote host.\n\nArguments: autocommit, login_port, name, login_user, login_host, state, login_password, target\n\nAdd or remove MSSQL databases from a remote host.',
 'mysql_db': 'Add or remove MySQL databases from a remote host.\n\nArguments: target, encoding, collation, state, ignore_tables, quick, single_transaction, name\n\nAdd or remove MySQL databases from a remote host.',
 'mysql_info': 'Gather information about MySQL servers\n\nArguments: filter, login_db\n\nGathers information about MySQL servers.',
 'mysql_replication': 'Manage MySQL replication\n\nArguments: master_ssl_cert, master_auto_position, master_password, master_host, master_ssl_capath, master_ssl_ca, master_connect_retry, master_user, master_port, master_log_file, master_ssl_cipher, relay_log_file, master_ssl, master_ssl_key, mode, master_log_pos, relay_log_pos\n\nManages MySQL server replication, slave, master status get and change master host.',
 'mysql_user': 'Adds or removes a user from a MySQL database\n\nArguments: update_password, name, encrypted, append_privs, sql_log_bin, host_all, state, host, check_implicit_admin, password, priv\n\nAdds or removes a user from a MySQL database.',
 'mysql_variables': 'Manage MySQL global variables\n\nArguments: variable, value\n\nQuery / Set MySQL variables.',
 'na_elementsw_access_group': 'NetApp Element Software Manage Access Groups\n\nArguments: from_name, name, virtual_network_id, state, volumes, initiators, attributes, virtual_network_tags, account_id\n\nCreate, destroy, or update access groups on Element Software Cluster.',
 'na_elementsw_account': 'NetApp Element Software Manage Accounts\n\nArguments: status, state, element_username, attributes, from_name, target_secret, initiator_secret\n\nCreate, destroy, or update accounts on Element SW',
 'na_elementsw_admin_users': 'NetApp Element Software Manage Admin Users\n\nArguments: element_password, access, state, element_username, acceptEula\n\nCreate, destroy, or update admin users on SolidFire',
 'na_elementsw_backup': 'NetApp Element Software Create Backups\n\nArguments: dest_username, format, script_parameters, script, dest_hostname, dest_volume_id, dest_password, src_volume_id\n\nCreate backup',
 'na_elementsw_check_connections': 'NetApp Element Software Check connectivity to MVIP and SVIP.\n\nArguments: svip, skip, mvip\n\nUsed to test the management connection to the cluster.\nThe test pings the MVIP and SVIP, and executes a simple API method to verify connectivity.',
 'na_elementsw_cluster': 'NetApp Element Software Create Cluster\n\nArguments: accept_eula, storage_virtual_ip, replica_count, management_virtual_ip, cluster_admin_username, cluster_admin_password, attributes, nodes\n\nInitialize Element Software node ownership to form a cluster.',
 'na_elementsw_cluster_config': 'Configure Element SW Cluster\n\nArguments: encryption_at_rest, modify_cluster_full_threshold, enable_virtual_volumes, set_ntp_info\n\nConfigure Element Software cluster.',
 'na_elementsw_cluster_pair': 'NetApp Element Software Manage Cluster Pair\n\nArguments: dest_password, state, dest_mvip, dest_username\n\nCreate, delete cluster pair',
 'na_elementsw_cluster_snmp': 'Configure Element SW Cluster SNMP\n\nArguments: state, snmp_v3_enabled, networks, usm_users\n\nConfigure Element Software cluster SNMP.',
 'na_elementsw_drive': 'NetApp Element Software Manage Node Drives\n\nArguments: drive_id, state, node_id, force_during_bin_sync, force_during_upgrade\n\nAdd, Erase or Remove drive for nodes on Element Software Cluster.',
 'na_elementsw_initiators': 'Manage Element SW initiators\n\nArguments: initiators, state\n\nManage Element Software initiators that allow external clients access to volumes.',
 'na_elementsw_ldap': 'NetApp Element Software Manage ldap admin users\n\nArguments: authType, searchBindDN, groupSearchBaseDn, userSearchFilter, state, userDNTemplate, searchBindPassword, groupSearchCustomFilter, userSearchBaseDN, serverURIs, groupSearchType\n\nEnable, disable ldap, and add ldap users',
 'na_elementsw_network_interfaces': 'NetApp Element Software Configure Node Network Interfaces\n\nArguments: mtu_1g, subnet_1g, lacp_10g, bond_mode_10g, virtual_network_tag, mtu_10g, dns_search_domains, ip_address_1g, subnet_10g, gateway_address_10g, lacp_1g, dns_nameservers, ip_address_10g, gateway_address_1g, bond_mode_1g, method\n\nConfigure Element SW Node Network Interfaces for Bond 1G and 10G IP address.',
 'na_elementsw_node': 'NetApp Element Software Node Operation\n\nArguments: state, node_id\n\nAdd, remove cluster node on Element Software Cluster.',
 'na_elementsw_snapshot': 'NetApp Element Software Manage Snapshots\n\nArguments: enable_remote_replication, username, src_snapshot_id, name, retention, state, snap_mirror_label, expiration_time, password, src_volume_id, account_id\n\nCreate, Modify or Delete Snapshot on Element OS Cluster.',
 'na_elementsw_snapshot_restore': 'NetApp Element Software Restore Snapshot\n\nArguments: src_volume_id, src_snapshot_id, dest_volume_name, account_id\n\nElement OS Cluster restore snapshot to volume.',
 'na_elementsw_snapshot_schedule': 'NetApp Element Software Snapshot Schedules\n\nArguments: username, time_interval_days, account_id, time_interval_minutes, days_of_month_hours, paused, snapshot_name, days_of_week_weekdays, days_of_week_hours, password, retention, name, time_interval_hours, schedule_type, days_of_month_monthdays, state, volumes, days_of_month_minutes, days_of_week_minutes, starting_date, recurring\n\nCreate, destroy, or update accounts on ElementSW',
 'na_elementsw_vlan': 'NetApp Element Software Manage VLAN\n\nArguments: name, address_blocks, namespace, state, netmask, svip, attributes, vlan_tag, gateway\n\nCreate, delete, modify VLAN',
 'na_elementsw_volume': 'NetApp Element Software Manage Volumes\n\nArguments: username, enable512e, qos, name, size_unit, account_id, access, state, attributes, password, size\n\nCreate, destroy, or update volumes on ElementSW',
 'na_elementsw_volume_clone': 'NetApp Element Software Create Volume Clone\n\nArguments: src_snapshot_id, name, size_unit, access, attributes, size, src_volume_id, account_id\n\nCreate volume clones on Element OS',
 'na_elementsw_volume_pair': 'NetApp Element Software Volume Pair\n\nArguments: src_account, dest_username, state, dest_volume, dest_mvip, mode, dest_password, dest_account, src_volume\n\nCreate, delete volume pair',
 'na_ontap_aggregate': 'NetApp ONTAP manage aggregates.\n\nArguments: from_name, spare_pool, mirror_disks, raid_type, raid_size, wait_for_online, is_mirrored, disk_type, nodes, unmount_volumes, disk_size, name, disks, disk_count, state, time_out, service_state\n\nCreate, delete, or manage aggregates on ONTAP.',
 'na_ontap_autosupport': 'NetApp ONTAP Autosupport\n\nArguments: mail_hosts, from_address, support, proxy_url, state, node_name, post_url, noteto, to_addresses, hostname_in_subject, partner_addresses, transport\n\nEnable/Disable Autosupport',
 'na_ontap_broadcast_domain': 'NetApp ONTAP manage broadcast domains.\n\nArguments: state, from_name, name, ipspace, ports, mtu\n\nModify a ONTAP broadcast domain.',
 'na_ontap_broadcast_domain_ports': 'NetApp ONTAP manage broadcast domain ports\n\nArguments: broadcast_domain, state, ipspace, ports\n\nAdd or remove ONTAP broadcast domain ports.  Existing ports that are not listed are kept.',
 'na_ontap_cg_snapshot': 'NetApp ONTAP manage consistency group snapshot\n\nArguments: vserver, state, snapshot, timeout, volumes, snapmirror_label\n\nCreate consistency group snapshot for ONTAP volumes.',
 'na_ontap_cifs': 'NetApp ONTAP Manage cifs-share\n\nArguments: vserver, vscan_fileop_profile, state, share_name, symlink_properties, path, share_properties\n\nCreate or destroy or modify(path) cifs-share on ONTAP',
 'na_ontap_cifs_acl': 'NetApp ONTAP manage cifs-share-access-control\n\nArguments: vserver, state, permission, user_or_group, share_name\n\nCreate or destroy or modify cifs-share-access-controls on ONTAP',
 'na_ontap_cifs_server': 'NetApp ONTAP CIFS server configuration\n\nArguments: admin_user_name, force, name, domain, vserver, state, admin_password, ou, service_state, workgroup\n\nCreating / deleting and modifying the CIFS server .',
 'na_ontap_cluster': 'NetApp ONTAP cluster - create, join, add license\n\nArguments: cluster_name, state, node_serial_number, license_code, cluster_ip_address, license_package\n\nCreate or join or apply licenses to ONTAP clusters\nCluster join can be performed using only one of the parameters, either cluster_name or cluster_ip_address',
 'na_ontap_cluster_ha': 'NetApp ONTAP Manage HA status for cluster\n\nArguments: state\n\nEnable or disable HA on a cluster',
 'na_ontap_cluster_peer': 'NetApp ONTAP Manage Cluster peering\n\nArguments: dest_username, dest_intercluster_lifs, dest_hostname, source_cluster_name, state, source_intercluster_lifs, passphrase, dest_password, dest_cluster_name\n\nCreate/Delete cluster peer relations on ONTAP',
 'na_ontap_command': 'NetApp ONTAP Run any cli command, the username provided needs to have console login permission.\n\nArguments: privilege, return_dict, command\n\nRun system-cli commands on ONTAP',
 'na_ontap_disks': 'NetApp ONTAP Assign disks to nodes\n\nArguments: node, disk_count\n\nAssign all or part of disks to nodes.',
 'na_ontap_dns': 'NetApp ONTAP Create, delete, modify DNS servers.\n\nArguments: vserver, domains, state, nameservers, skip_validation\n\nCreate, delete, modify DNS servers.',
 'na_ontap_export_policy': 'NetApp ONTAP manage export-policy\n\nArguments: vserver, state, from_name, name\n\nCreate or destroy or rename export-policies on ONTAP',
 'na_ontap_export_policy_rule': 'NetApp ONTAP manage export policy rules\n\nArguments: protocol, name, super_user_security, rw_rule, allow_suid, vserver, ro_rule, state, client_match, rule_index\n\nCreate or delete or modify export rules in ONTAP',
 'na_ontap_fcp': 'NetApp ONTAP Start, Stop and Enable FCP services.\n\nArguments: status, vserver, state\n\nStart, Stop and Enable FCP services.',
 'na_ontap_firewall_policy': 'NetApp ONTAP Manage a firewall policy\n\nArguments: allow_list, node, enable, logging, service, vserver, state, policy\n\nConfigure firewall on an ONTAP node and manage firewall policy for an ONTAP SVM',
 'na_ontap_firmware_upgrade': 'NetApp ONTAP firmware upgrade for SP, shelf, ACP, and disk.\n\nArguments: node, update_type, shelf_module_fw, package, firmware_type, disk_fw, state, install_baseline_image, clear_logs\n\nUpdate ONTAP service-prosessor firmware',
 'na_ontap_flexcache': 'NetApp ONTAP FlexCache - create/delete relationship\n\nArguments: volume, origin_cluster, origin_volume, aggr_list_multiplier, size_unit, origin_vserver, force_unmount, vserver, state, aggr_list, auto_provision_as, time_out, size, force_offline, junction_path\n\nCreate/Delete FlexCache volume relationships',
 'na_ontap_igroup': 'NetApp ONTAP iSCSI or FC igroup configuration\n\nArguments: from_name, name, bind_portset, force_remove_initiator, vserver, ostype, state, initiator_group_type, initiators\n\nCreate/Delete/Rename Igroups and Modify initiators belonging to an igroup',
 'na_ontap_igroup_initiator': 'NetApp ONTAP igroup initiator configuration\n\nArguments: initiator_group, vserver, state, names\n\nAdd/Remove initiators from an igroup',
 'na_ontap_info': 'NetApp information gatherer\n\nArguments: state, gather_subset\n\nThis module allows you to gather various information about ONTAP configuration',
 'na_ontap_interface': 'NetApp ONTAP LIF configuration\n\nArguments: force_subnet_association, failover_policy, netmask, address, home_port, is_auto_revert, protocols, is_dns_update_enabled, firewall_policy, home_node, dns_domain_name, listen_for_dns_query, admin_status, vserver, state, role, subnet_name, interface_name\n\nCreating / deleting and modifying the LIF.',
 'na_ontap_ipspace': 'NetApp ONTAP Manage an ipspace\n\nArguments: state, from_name, name\n\nManage an ipspace for an Ontap Cluster',
 'na_ontap_iscsi': 'NetApp ONTAP manage iSCSI service\n\nArguments: vserver, state, service_state\n\ncreate, delete, start, stop iSCSI service on SVM.',
 'na_ontap_job_schedule': 'NetApp ONTAP Job Schedule\n\nArguments: job_hours, state, job_months, name, job_days_of_week, job_minutes, job_days_of_month\n\nCreate/Delete/Modify job-schedules on ONTAP',
 'na_ontap_kerberos_realm': 'NetApp ONTAP vserver nfs kerberos realm\n\nArguments: comment, realm, kdc_vendor, admin_server_ip, vserver, pw_server_port, state, admin_server_port, kdc_port, clock_skew, pw_server_ip, kdc_ip\n\nCreate, modify or delete vserver kerberos realm configuration',
 'na_ontap_ldap': 'NetApp ONTAP LDAP\n\nArguments: vserver, state, name, skip_config_validation\n\nCreate, modify or delete LDAP on NetApp ONTAP SVM/vserver',
 'na_ontap_ldap_client': 'NetApp ONTAP LDAP client\n\nArguments: min_bind_level, referral_enabled, query_timeout, ldap_servers, bind_dn, session_security, vserver, state, use_start_tls, base_scope, bind_password, base_dn, schema, port, name\n\nCreate, modify or delete LDAP client on NetApp ONTAP',
 'na_ontap_license': 'NetApp ONTAP protocol and feature licenses\n\nArguments: license_names, state, remove_unused, remove_expired, serial_number, license_codes\n\nAdd or remove licenses on NetApp ONTAP.',
 'na_ontap_lun': 'NetApp ONTAP manage LUNs\n\nArguments: force_remove, name, flexvol_name, state, size_unit, vserver, force_resize, space_reserve, ostype, size, force_remove_fenced, space_allocation\n\nCreate, destroy, resize LUNs on NetApp ONTAP.',
 'na_ontap_lun_copy': 'NetApp ONTAP copy LUNs\n\nArguments: destination_vserver, state, source_path, destination_path, source_vserver\n\nCopy LUNs on NetApp ONTAP.',
 'na_ontap_lun_map': 'NetApp ONTAP LUN maps\n\nArguments: vserver, path, state, initiator_group_name, lun_id\n\nMap and unmap LUNs on NetApp ONTAP.',
 'na_ontap_motd': 'Setup motd\n\nArguments: vserver, state, message, show_cluster_motd\n\nThis module allows you to manipulate motd for a vserver\nIt also allows to manipulate motd at the cluster level by using the cluster vserver (cserver)',
 'na_ontap_ndmp': 'NetApp ONTAP NDMP services configuration\n\nArguments: backup_log_enable, secondary_debug_filter, authtype, enable, ignore_ctime_enabled, tcpwinsize, offset_map_enable, preferred_interface_role, fh_dir_retry_interval, debug_filter, dump_logical_find, fh_node_retry_interval, data_port_range, debug_enable, per_qtree_exclude_enable, vserver, abort_on_disk_error, tcpnodelay, restore_vm_cache_size, is_secure_control_connection_enabled, dump_detailed_stats\n\nModify NDMP Services.',
 'na_ontap_net_ifgrp': 'NetApp Ontap modify network interface group\n\nArguments: node, state, name, distribution_function, ports, mode\n\nCreate, modify ports, destroy the network interface group',
 'na_ontap_net_port': 'NetApp ONTAP network ports.\n\nArguments: node, duplex_admin, flowcontrol_admin, autonegotiate_admin, ipspace, mtu, state, speed_admin, ports\n\nModify a ONTAP network port.',
 'na_ontap_net_routes': 'NetApp ONTAP network routes\n\nArguments: metric, destination, gateway, vserver, state, from_gateway, from_metric, from_destination\n\nModify ONTAP network routes.',
 'na_ontap_net_subnet': 'NetApp ONTAP Create, delete, modify network subnets.\n\nArguments: subnet, from_name, name, broadcast_domain, ipspace, ip_ranges, state, gateway\n\nCreate, modify, destroy the network subnet',
 'na_ontap_net_vlan': 'NetApp ONTAP network VLAN\n\nArguments: parent_interface, node, state, vlanid\n\nCreate or Delete a network VLAN',
 'na_ontap_nfs': 'NetApp ONTAP NFS status\n\nArguments: udp, nfsv4, tcp, nfsv3, nfsv41, nfsv40_write_delegation, nfsv41_referrals, nfsv4_numeric_ids, nfsv41_pnfs, nfsv41_write_delegation, nfsv3_fsid_change, nfsv4_fsid_change, nfsv41_acl, tcp_max_xfer_size, nfsv41_read_delegation, nfsv40_acl, vserver, vstorage_state, state, showmount, nfsv4_id_domain, nfsv40_referrals, nfsv40_read_delegation, service_state\n\nEnable or disable NFS on ONTAP',
 'na_ontap_node': 'NetApp ONTAP Rename a node.\n\nArguments: from_name, name\n\nRename an ONTAP node.',
 'na_ontap_ntp': 'NetApp ONTAP NTP server\n\nArguments: state, version, server_name\n\nCreate or delete or modify NTP server in ONTAP',
 'na_ontap_nvme': 'NetApp ONTAP Manage NVMe Service\n\nArguments: vserver, state, status_admin\n\nCreate/Delete NVMe Service',
 'na_ontap_nvme_namespace': 'NetApp ONTAP Manage NVME Namespace\n\nArguments: vserver, ostype, state, size, path\n\nCreate/Delete NVME namespace',
 'na_ontap_nvme_subsystem': 'NetApp ONTAP Manage NVME Subsystem\n\nArguments: subsystem, paths, vserver, state, skip_host_check, ostype, hosts, skip_mapped_check\n\nCreate/Delete NVME subsystem\nAssociate(modify) host/map to NVME subsystem\nNVMe service should be existing in the data vserver with NVMe protocol as a pre-requisite',
 'na_ontap_object_store': 'NetApp ONTAP manage object store config.\n\nArguments: access_key, state, secret_password, container, name, provider_type, server\n\nCreate or delete object store config on ONTAP.',
 'na_ontap_ports': 'NetApp ONTAP add/remove ports\n\nArguments: vserver, state, resource_name, names, portset_type, ipspace, resource_type\n\nAdd or remove ports for broadcast domain and portset.',
 'na_ontap_portset': 'NetApp ONTAP Create/Delete portset\n\nArguments: vserver, state, force, name, type, ports\n\nCreate/Delete ONTAP portset, modify ports in a portset.',
 'na_ontap_qos_adaptive_policy_group': 'NetApp ONTAP Adaptive Quality of Service policy group.\n\nArguments: peak_iops, from_name, peak_iops_allocation, name, absolute_min_iops, vserver, state, expected_iops, force\n\nCreate, destroy, modify, or rename an Adaptive QoS policy group on NetApp ONTAP. Module is based on the standard QoS policy group module.',
 'na_ontap_qos_policy_group': 'NetApp ONTAP manage policy group in Quality of Service.\n\nArguments: vserver, state, from_name, force, name, min_throughput, max_throughput\n\nCreate, destroy, modify, or rename QoS policy group on NetApp ONTAP.',
 'na_ontap_qtree': 'NetApp ONTAP manage qtrees\n\nArguments: export_policy, from_name, name, flexvol_name, unix_permissions, vserver, state, oplocks, security_style\n\nCreate or destroy Qtrees.',
 'na_ontap_quotas': 'NetApp ONTAP Quotas\n\nArguments: qtree, vserver, quota_target, file_limit, set_quota_status, disk_limit, volume, policy, state, threshold, type\n\nSet/Modify/Delete quota on ONTAP',
 'na_ontap_security_key_manager': 'NetApp ONTAP security key manager.\n\nArguments: node, tcp_port, state, ip_address\n\nAdd or delete or setup key management on NetApp ONTAP.',
 'na_ontap_service_processor_network': 'NetApp ONTAP service processor network\n\nArguments: is_enabled, node, address_type, state, netmask, prefix_length, dhcp, wait_for_completion, ip_address, gateway_ip_address\n\nModify a ONTAP service processor network',
 'na_ontap_snapmirror': 'NetApp ONTAP or ElementSW Manage SnapMirror\n\nArguments: destination_vserver, schedule, destination_path, source_password, relationship_type, max_transfer_rate, connection_type, source_username, identity_preserve, source_path, source_volume, source_vserver, state, source_hostname, policy, destination_volume\n\nCreate/Delete/Initialize SnapMirror volume/vserver relationships for ONTAP/ONTAP\nCreate/Delete/Initialize SnapMirror volume relationship between ElementSW and ONTAP\nModify schedule for a SnapMirror relationship for ONTAP/ONTAP and ElementSW/ONTAP\nPre-requisite for ElementSW to ONTAP relationship or vice-versa is an established SnapMirror endpoint for ONTAP cluster with ElementSW UI\nPre-requisite for ElementSW to ONTAP relationship or vice-versa is to have SnapMirror enabled in the ElementSW volume\nFor creating a SnapMirror ElementSW/ONTAP relationship, an existing ONTAP/ElementSW relationship should be present',
 'na_ontap_snapshot': 'NetApp ONTAP manage Snapshots\n\nArguments: comment, volume, from_name, snapshot_instance_uuid, ignore_owners, state, vserver, async_bool, snapmirror_label, snapshot\n\nCreate/Modify/Delete ONTAP snapshots',
 'na_ontap_snapshot_policy': 'NetApp ONTAP manage Snapshot Policy\n\nArguments: comment, count, name, schedule, enabled, state, vserver, snapmirror_label\n\nCreate/Modify/Delete ONTAP snapshot policies',
 'na_ontap_snmp': 'NetApp ONTAP SNMP community\n\nArguments: community_name, state, access_control\n\nCreate/Delete SNMP community',
 'na_ontap_software_update': 'NetApp ONTAP Update Software\n\nArguments: package_url, state, ignore_validation_warning, nodes, package_version\n\nUpdate ONTAP software\nRequires an https connection and is not supported over http',
 'na_ontap_svm': 'NetApp ONTAP SVM\n\nArguments: comment, from_name, root_volume_aggregate, name, language, ipspace, root_volume_security_style, allowed_protocols, subtype, state, aggr_list, snapshot_policy, root_volume\n\nCreate, modify or delete SVM on NetApp ONTAP',
 'na_ontap_svm_options': 'NetApp ONTAP Modify SVM Options\n\nArguments: vserver, name, value\n\nModify ONTAP SVM Options\nOnly Options that appear on "vserver options show" can be set',
 'na_ontap_ucadapter': 'NetApp ONTAP UC adapter configuration\n\nArguments: state, node_name, type, mode, adapter_name\n\nmodify the UC adapter mode and type taking pending type and mode into account.',
 'na_ontap_unix_group': 'NetApp ONTAP UNIX Group\n\nArguments: vserver, skip_name_validation, state, name, id, users\n\nCreate/Delete Unix user group',
 'na_ontap_unix_user': 'NetApp ONTAP UNIX users\n\nArguments: vserver, state, name, full_name, group_id, id\n\nCreate, delete or modify UNIX users local to ONTAP.',
 'na_ontap_user': 'NetApp ONTAP user configuration and management\n\nArguments: lock_user, name, authentication_method, vserver, applications, state, role_name, set_password\n\nCreate or destroy users.',
 'na_ontap_user_role': 'NetApp ONTAP user role configuration and management\n\nArguments: vserver, access_level, state, name, query, command_directory_name\n\nCreate or destroy user roles',
 'na_ontap_volume': 'NetApp ONTAP manage volumes.\n\nArguments: comment, space_slo, unix_permissions, size, aggr_list, encrypt, tiering_policy, snapdir_access, size_unit, vserver, state, vserver_dr_protection, policy, auto_provision_as, aggregate_name, aggr_list_multiplier, from_name, is_infinite, atime_update, qos_adaptive_policy_group, junction_path, is_online, nvfail_enabled, wait_for_completion, name, volume_security_style, efficiency_policy, language, type, percent_snapshot_space, space_guarantee, snapshot_policy, time_out, qos_policy_group\n\nCreate or destroy or modify volumes on NetApp ONTAP.',
 'na_ontap_volume_autosize': 'NetApp ONTAP manage volume autosize\n\nArguments: reset, volume, increment_size, minimum_size, shrink_threshold_percent, vserver, mode, maximum_size, grow_threshold_percent\n\nModify Volume AutoSize',
 'na_ontap_volume_clone': 'NetApp ONTAP manage volume clones.\n\nArguments: parent_volume, name, parent_snapshot, state, volume_type, vserver, space_reserve, junction_path, gid, qos_policy_group_name, parent_vserver, uid\n\nCreate NetApp ONTAP volume clones.\nA FlexClone License is required to use this module',
 'na_ontap_vscan': 'NetApp ONTAP Vscan enable/disable.\n\nArguments: vserver, enable\n\nEnable and Disable Vscan',
 'na_ontap_vscan_on_access_policy': 'NetApp ONTAP Vscan on access policy configuration.\n\nArguments: max_file_size, vserver, filters, is_scan_mandatory, scan_files_with_no_ext, policy_name, file_ext_to_include, state, paths_to_exclude, file_ext_to_exclude\n\nConfigure on access policy for Vscan (virus scan)',
 'na_ontap_vscan_on_demand_task': 'NetApp ONTAP Vscan on demand task configuration.\n\nArguments: request_timeout, schedule, scan_files_with_no_ext, scan_priority, state, file_ext_to_exclude, directory_recursion, max_file_size, cross_junction, vserver, scan_paths, report_directory, file_ext_to_include, report_log_level, paths_to_exclude, task_name\n\nConfigure on demand task for Vscan',
 'na_ontap_vscan_scanner_pool': 'NetApp ONTAP Vscan Scanner Pools Configuration.\n\nArguments: vserver, scanner_policy, privileged_users, hostnames, state, scanner_pool\n\nConfigure a Vscan Scanner Pool',
 'na_ontap_vserver_cifs_security': 'NetApp ONTAP vserver CIFS security modification\n\nArguments: session_security_for_ad_ldap, kerberos_renew_age, use_start_tls_for_ad_ldap, is_password_complexity_required, smb1_enabled_for_dc_connections, is_signing_required, kerberos_clock_skew, kerberos_ticket_age, is_aes_encryption_enabled, vserver, kerberos_kdc_timeout, is_smb_encryption_required, referral_enabled_for_ad_ldap, smb2_enabled_for_dc_connections, lm_compatibility_level\n\nmodify vserver CIFS security.',
 'na_ontap_vserver_peer': 'NetApp ONTAP Vserver peering\n\nArguments: dest_username, dest_hostname, vserver, applications, state, peer_cluster, dest_password, peer_vserver\n\nCreate/Delete vserver peer',
 'nagios': 'Perform common tasks in Nagios related to downtime and notifications.\n\nArguments: comment, servicegroup, author, action, host, command, services, minutes, cmdfile\n\nThe C(nagios) module has two basic functions: scheduling downtime and toggling alerts for services or hosts.\nAll actions require the I(host) parameter to be given explicitly. In playbooks you can use the C({{inventory_hostname}}) variable to refer to the host the playbook is currently running on.\nYou can specify multiple services at once by separating them with commas, .e.g., C(services=httpd,nfs,puppet).\nWhen specifying what service to handle there is a special service value, I(host), which will handle alerts/downtime for the I(host itself), e.g., C(service=host). This keyword may not be given with other services at the same time. I(Setting alerts/downtime for a host does not affect alerts/downtime for any of the services running on it.) To schedule downtime for all services on particular host use keyword "all", e.g., C(service=all).\nWhen using the C(nagios) module you will need to specify your Nagios server using the C(delegate_to) parameter.',
 'nclu': 'Configure network interfaces using NCLU\n\nArguments: commands, abort, description, template, commit, atomic\n\nInterface to the Network Command Line Utility, developed to make it easier to configure operating systems running ifupdown2 and Quagga, such as Cumulus Linux. Command documentation is available at U(https://docs.cumulusnetworks.com/cumulus-linux/System-Configuration/Network-Command-Line-Utility-NCLU/)',
 'net_get': 'Copy a file from a network device to Ansible Controller\n\nArguments: dest, src, protocol\n\nThis module provides functionality to copy file from network device to ansible controller.',
 'net_ping': 'Tests reachability using ping from a network device\n\nArguments: count, dest, state, vrf, source\n\nTests reachability using ping from network device to a remote destination.\nFor Windows targets, use the M(win_ping) module instead.\nFor targets running Python, use the M(ping) module instead.',
 'net_put': 'Copy a file from Ansible Controller to a network device\n\nArguments: dest, src, protocol, mode\n\nThis module provides functionality to copy file from Ansible controller to network devices.',
 'netact_cm_command': 'Manage network configuration data in Nokia Core and Radio networks\n\nArguments: DN, planName, verbose, opsName, fileName, typeOption, WS, MR, extra_opts, operation, createBackupPlan, backupPlanName, fileFormat, inputFile\n\nnetact_cm_command can be used to run various configuration management operations. This module requires that the target hosts have Nokia NetAct network management system installed. Module will access the Configurator command line interface in NetAct to upload network configuration to NetAct, run configuration export, plan import and configuration provision operations To set the scope of the operation, define Distinguished Name (DN) or Working Set (WS) or Maintenance Region (MR) as input',
 'netapp_e_alerts': 'NetApp E-Series manage email notification settings\n\nArguments: test, state, contact, sender, recipients, log_path, server\n\nCertain E-Series systems have the capability to send email notifications on potentially critical events.\nThis module will allow the owner of the system to specify email recipients for these messages.',
 'netapp_e_amg': 'NetApp E-Series create, remove, and update asynchronous mirror groups\n\nArguments: name, syncIntervalMinutes, recoveryWarnThresholdMinutes, secondaryArrayId, repoUtilizationWarnThreshold, state, interfaceType, manualSync, syncWarnThresholdMinutes\n\nAllows for the creation, removal and updating of Asynchronous Mirror Groups for NetApp E-series storage arrays',
 'netapp_e_amg_role': 'NetApp E-Series update the role of a storage array within an Asynchronous Mirror Group (AMG).\n\nArguments: force, ssid, api_password, role, api_username, validate_certs, noSync, api_url\n\nUpdate a storage array to become the primary or secondary instance in an asynchronous mirror group',
 'netapp_e_amg_sync': "NetApp E-Series conduct synchronization actions on asynchronous mirror groups.\n\nArguments: ssid, api_password, state, api_username, api_url, delete_recovery_point, validate_certs, name\n\nAllows for the initialization, suspension and resumption of an asynchronous mirror group's synchronization for NetApp E-series storage arrays.",
 'netapp_e_asup': 'NetApp E-Series manage auto-support settings\n\nArguments: start, state, end, verbose, log_path, active, days\n\nAllow the auto-support settings to be configured for an individual E-Series storage-system',
 'netapp_e_auditlog': 'NetApp E-Series manage audit-log configuration\n\nArguments: threshold, force, log_path, log_level, max_records, full_policy\n\nThis module allows an e-series storage system owner to set audit-log configuration parameters.',
 'netapp_e_auth': 'NetApp E-Series set or update the password for a storage array.\n\nArguments: ssid, name, new_password, api_password, current_password, api_username, validate_certs, set_admin, api_url\n\nSets or updates the password for a storage array.  When the password is updated on the storage array, it must be updated on the SANtricity Web Services proxy. Note, all storage arrays do not have a Monitor or RO role.',
 'netapp_e_drive_firmware': 'NetApp E-Series manage drive firmware\n\nArguments: upgrade_drives_online, ignore_inaccessible_drives, firmware, wait_for_completion\n\nEnsure drive firmware version is activated on specified drive model.',
 'netapp_e_facts': 'NetApp E-Series retrieve facts about NetApp E-Series storage arrays\n\nArguments: \n\nThe netapp_e_facts module returns a collection of facts regarding NetApp E-Series storage arrays.\nWhen contacting a storage array directly the collection includes details about the array, controllers, management interfaces, hostside interfaces, driveside interfaces, disks, storage pools, volumes, snapshots, and features.\nWhen contacting a web services proxy the collection will include basic information regarding the storage systems that are under its management.',
 'netapp_e_firmware': 'NetApp E-Series manage firmware.\n\nArguments: firmware, ignore_health_check, wait_for_completion, nvsram\n\nEnsure specific firmware versions are activated on E-Series storage system.',
 'netapp_e_flashcache': 'NetApp E-Series manage SSD caches\n\nArguments: cache_size_min, ssid, api_password, io_type, disk_count, size_unit, state, api_username, api_url, validate_certs, name\n\nCreate or remove SSD caches on a NetApp E-Series storage array.',
 'netapp_e_global': 'NetApp E-Series manage global settings configuration\n\nArguments: log_path, name\n\nAllow the user to configure several of the global settings associated with an E-Series storage-system',
 'netapp_e_host': 'NetApp E-Series manage eseries hosts\n\nArguments: state, group, name, log_path, host_type, ports, force_port\n\nCreate, update, remove hosts on NetApp E-series storage arrays',
 'netapp_e_hostgroup': 'NetApp E-Series manage array host groups\n\nArguments: new_name, state, hosts, name, id\n\nCreate, update or destroy host groups on a NetApp E-Series storage array.',
 'netapp_e_iscsi_interface': 'NetApp E-Series manage iSCSI interface configuration\n\nArguments: name, log_path, config_method, controller, mtu, subnet_mask, state, address, gateway\n\nConfigure settings of an E-Series iSCSI interface',
 'netapp_e_iscsi_target': 'NetApp E-Series manage iSCSI target configuration\n\nArguments: log_path, unnamed_discovery, ping, name, chap_secret\n\nConfigure the settings of an E-Series iSCSI target',
 'netapp_e_ldap': 'NetApp E-Series manage LDAP integration to use for authentication\n\nArguments: username, user_attribute, password, name, search_base, log_path, server, state, role_mappings, attributes, identifier\n\nConfigure an E-Series system to allow authentication via an LDAP server',
 'netapp_e_lun_mapping': 'NetApp E-Series create, delete, or modify lun mappings\n\nArguments: state, volume_name, target_type, lun, target\n\nCreate, delete, or modify mappings between a volume and a targeted host/host+ group.',
 'netapp_e_mgmt_interface': 'NetApp E-Series management interface configuration\n\nArguments: log_path, ntp_config_method, ntp_address, subnet_mask, controller, ssh, address, dns_address, gateway, name, ntp_address_backup, config_method, dns_address_backup, state, dns_config_method, channel\n\nConfigure the E-Series management interfaces',
 'netapp_e_snapshot_group': 'NetApp E-Series manage snapshot groups\n\nArguments: repo_pct, warning_threshold, rollback_priority, delete_limit, api_password, name, state, storage_pool_name, api_username, base_volume_name, full_policy, validate_certs, api_url\n\nCreate, update, delete snapshot groups for NetApp E-series storage arrays',
 'netapp_e_snapshot_images': 'NetApp E-Series create and delete snapshot images\n\nArguments: state, api_url, snapshot_group, api_username, validate_certs, api_password\n\nCreate and delete snapshots images on snapshot groups for NetApp E-series storage arrays.\nOnly the oldest snapshot image can be deleted so consistency is preserved.\nRelated: Snapshot volumes are created from snapshot images.',
 'netapp_e_snapshot_volume': 'NetApp E-Series manage snapshot volumes.\n\nArguments: snapshot_image_id, ssid, api_password, repo_percentage, full_threshold, view_mode, state, storage_pool_name, api_username, api_url, validate_certs, name\n\nCreate, update, remove snapshot volumes for NetApp E/EF-Series storage arrays.',
 'netapp_e_storage_system': 'NetApp E-Series Web Services Proxy manage storage arrays\n\nArguments: meta_tags, ssid, array_wwn, api_password, api_username, state, array_password, api_url, enable_trace, validate_certs, controller_addresses\n\nManage the arrays accessible via a NetApp Web Services Proxy for NetApp E-series storage arrays.',
 'netapp_e_storagepool': 'NetApp E-Series manage volume groups and disk pools\n\nArguments: criteria_size_unit, criteria_drive_require_fde, criteria_min_usable_capacity, name, reserve_drive_count, secure_pool, raid_level, criteria_drive_type, state, remove_volumes, criteria_drive_min_size, criteria_drive_count, criteria_drive_require_da, erase_secured_drives, criteria_drive_interface_type\n\nCreate or remove volume groups and disk pools for NetApp E-series storage arrays.',
 'netapp_e_syslog': 'NetApp E-Series manage syslog settings\n\nArguments: test, state, protocol, components, address, log_path, port\n\nAllow the syslog settings to be configured for an individual E-Series storage-system',
 'netapp_e_volume': 'NetApp E-Series manage storage volumes (standard and thin)\n\nArguments: segment_size_kb, read_cache_enable, thin_provision, initialization_timeout, data_assurance_enabled, thin_volume_growth_alert_threshold, write_cache_enable, thin_volume_expansion_policy, size, read_ahead_enable, ssd_cache_enabled, name, workload_name, size_unit, cache_without_batteries, state, storage_pool_name, wait_for_initialization, owning_controller, metadata, thin_volume_repo_size, thin_volume_max_repo_size\n\nCreate or remove volumes (standard and thin) for NetApp E/EF-series storage arrays.',
 'netapp_e_volume_copy': 'NetApp E-Series create volume copy pairs\n\nArguments: create_copy_pair_if_does_not_exist, search_volume_id, api_url, source_volume_id, api_password, destination_volume_id, volume_copy_pair_id, state, api_username, start_stop_copy, validate_certs\n\nCreate and delete snapshots images on volume groups for NetApp E-series storage arrays.',
 'netbox_device': 'Create, update or delete devices within Netbox\n\nArguments: netbox_url, state, data, netbox_token, validate_certs\n\nCreates, updates or removes devices from Netbox',
 'netbox_interface': 'Creates or removes interfaces from Netbox\n\nArguments: netbox_url, state, data, netbox_token, validate_certs\n\nCreates or removes interfaces from Netbox',
 'netbox_ip_address': 'Creates or removes IP addresses from Netbox\n\nArguments: netbox_url, state, data, netbox_token, validate_certs\n\nCreates or removes IP addresses from Netbox',
 'netbox_prefix': 'Creates or removes prefixes from Netbox\n\nArguments: first_available, state, netbox_url, netbox_token, validate_certs, data\n\nCreates or removes prefixes from Netbox',
 'netbox_site': 'Creates or removes sites from Netbox\n\nArguments: netbox_url, state, data, netbox_token, validate_certs\n\nCreates or removes sites from Netbox',
 'netconf_config': 'netconf device configuration\n\nArguments: backup_options, format, lock, source_datastore, validate, src, target, confirm, error_option, content, confirm_commit, default_operation, commit, save, backup, delete\n\nNetconf is a network management protocol developed and standardized by the IETF. It is documented in RFC 6241.\nThis module allows the user to send a configuration XML file to a netconf device, and detects if there was a configuration change.',
 'netconf_get': 'Fetch configuration/state data from NETCONF enabled network devices.\n\nArguments: filter, source, display, lock\n\nNETCONF is a network management protocol developed and standardized by the IETF. It is documented in RFC 6241.\nThis module allows the user to fetch configuration and state data from NETCONF enabled network devices.',
 'netconf_rpc': 'Execute operations on NETCONF enabled network devices.\n\nArguments: content, rpc, xmlns, display\n\nNETCONF is a network management protocol developed and standardized by the IETF. It is documented in RFC 6241.\nThis module allows the user to execute NETCONF RPC requests as defined by IETF RFC standards as well as proprietary requests.',
 'netcup_dns': 'manage Netcup DNS records\n\nArguments: solo, domain, api_key, api_password, value, priority, record, state, customer_id, type\n\nManages DNS records via the Netcup API, see the docs U(https://ccp.netcup.net/run/webservice/servers/endpoint.php)',
 'netscaler_cs_action': 'Manage content switching actions\n\nArguments: comment, targetvserver, name, targetvserverexpr, targetlbvserver\n\nManage content switching actions\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance',
 'netscaler_cs_policy': 'Manage content switching policy\n\nArguments: url, policyname, domain, action, rule\n\nManage content switching policy.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.',
 'netscaler_cs_vserver': 'Manage content switching vserver\n\nArguments: comment, oracleserverversion, precedence, domainname, backupvserver, rtspnat, backupip, disabled, mysqlprotocolversion, listenpolicy, ssl_certkey, icmpvsrresponse, ttl, redirecturl, ipmask, authnprofile, redirectportrewrite, port, clttimeout, authenticationhost, servicetype, insertvserveripport, sopersistence, mysqlservercapabilities, mysqlserverversion, mysqlcharacterset, authn401, vipheader, pushvserver, authentication, authnvsname, netprofile, pushmulticlients, td, mssqlserverversion, lbvserver, httpprofilename, rhistate, targettype, sothreshold, cookietimeout, appflowlog, sobackupaction, dbprofilename, cookiedomain, cacheable, l2conn, ipv46, name, ippattern, disableprimaryondown, tcpprofilename, downstateflush, sitedomainttl, pushlabel, sopersistencetimeout, casesensitive, range, somethod, push, stateupdate, dnsprofilename\n\nManage content switching vserver\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance',
 'netscaler_gslb_service': 'Manage gslb service entities in Netscaler.\n\nArguments: comment, cnameentry, appflowlog, servername, hashid, servicename, sitepersistence, monitor_bindings, maxbandwidth, publicport, port, clttimeout, servicetype, monthreshold, maxaaausers, maxclient, sitename, ipaddress, downstateflush, cipheader, siteprefix, publicip, cip, healthmonitor\n\nManage gslb service entities in Netscaler.',
 'netscaler_gslb_site': 'Manage gslb site entities in Netscaler.\n\nArguments: publicip, siteipaddress, metricexchange, nwmetricexchange, sitename, sitetype, sessionexchange, publicclip, naptrreplacementsuffix, parentsite, clip, triggermonitor\n\nManage gslb site entities in Netscaler.',
 'netscaler_gslb_vserver': 'Configure gslb vserver entities in Netscaler.\n\nArguments: comment, sothreshold, sopersistence, appflowlog, persistenceid, sobackupaction, domain_bindings, dnsrecordtype, disabled, considereffectivestate, netmask, v6netmasklen, servicetype, persistencetype, name, disableprimaryondown, backuplbmethod, dynamicweight, somethod, service_bindings, sopersistencetimeout, persistmask, timeout, v6persistmasklen, mir, tolerance, lbmethod\n\nConfigure gslb vserver entities in Netscaler.',
 'netscaler_lb_monitor': 'Manage load balancing monitors\n\nArguments: lasversion, secure, radnasip, Snmpoid, storefrontacctservice, radnasid, firmwarerevision, ipaddress, query, storedb, vendorid, authapplicationid, group, tos, maxforwards, send, sipreguri, rtsprequest, trofscode, successretries, iptunnel, monitorname, units1, units3, units2, units4, scriptargs, destport, resptimeout, downtime, password, transparent, retries, failureretries, snmpthreshold, radkey, type, database, snmpcommunity, validatecred, productname, username, metrictable, dispatcherport, acctapplicationid, oraclesid, radaccounttype, binddn, domain, vendorspecificacctapplicationids, resptimeoutthresh, hostipaddress, sipuri, attribute, vendorspecificvendorid, destip, scriptname, originrealm, dispatcherip, radmsisdn, secondarypassword, respcode, trofsstring, logonpointname, kcdaccount, radapn, hostname, radframedip, filename, application, state, netprofile, alertretries, radaccountsession, deviation, httprequest, supportedvendorids, inbandsecurityid, basedn, sitepath, storefrontcheckbackendservices, interval, sqlquery, evalrule, sipmethod, customheaders, mssqlprotocolversion, recv, querytype, tosid, reverse, storename, lrtm, originhost, filter, vendorspecificauthapplicationids, snmpversion, action\n\nManage load balancing monitors.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.',
 'netscaler_lb_vserver': 'Manage load balancing vserver configuration\n\nArguments: servicebindings, comment, rtspnat, disabled, macmoderetainvlan, dbslb, listenpolicy, disableprimaryondown, ipmask, insertvserveripport, redirectportrewrite, clttimeout, authenticationhost, servicetype, mysqlservercapabilities, vipheader, pushvserver, dataoffset, datalength, rhistate, td, httpprofilename, newservicerequestincrementinterval, appflowlog, dbprofilename, netmask, processlocal, minautoscalemembers, name, backuplbmethod, downstateflush, pushlabel, persistmask, timeout, v6persistmasklen, persistavpno, recursionavailable, dnsprofilename, maxautoscalemembers, oracleserverversion, m, bypassaaaa, somethod, mysqlprotocolversion, icmpvsrresponse, authnprofile, port, servicegroupbindings, ssl_certkey, persistencebackup, mysqlserverversion, mysqlcharacterset, authn401, authentication, authnvsname, healththreshold, netprofile, pushmulticlients, mssqlserverversion, lbmethod, hashlength, resrule, connfailover, sothreshold, sopersistence, dns64, sobackupaction, skippersistency, cacheable, l2conn, v6netmasklen, sessionless, ipv46, persistencetype, tosid, ippattern, tcpprofilename, backuppersistencetimeout, newservicerequestunit, redirurl, cookiename, listenpriority, sopersistencetimeout, range, newservicerequest, push\n\nManage load balancing vserver configuration\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance',
 'netscaler_nitro_request': 'Issue Nitro API requests to a Netscaler instance.\n\nArguments: instance_name, args, expected_nitro_errorcode, resource, operation, filter, instance_ip, name, nitro_protocol, instance_id, nsip, nitro_user, action, attributes, nitro_pass, validate_certs, nitro_auth_token\n\nIssue Nitro API requests to a Netscaler instance.\nThis is intended to be a short hand for using the uri Ansible module to issue the raw HTTP requests directly.\nIt provides consistent return values and has no other dependencies apart from the base Ansible runtime environment.\nThis module is intended to run either on the Ansible control node or a bastion (jumpserver) with access to the actual Netscaler instance',
 'netscaler_save_config': 'Save Netscaler configuration.\n\nArguments: nitro_protocol, nsip, nitro_user, nitro_pass, validate_certs, nitro_timeout\n\nThis module unconditionally saves the configuration on the target netscaler node.\nThis module does not support check mode.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.',
 'netscaler_server': 'Manage server configuration\n\nArguments: comment, delay, domain, name, ipv6address, domainresolveretry, translationmask, disabled, translationip, graceful, td, ipaddress\n\nManage server entities configuration.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.',
 'netscaler_service': 'Manage service configuration in Netscaler\n\nArguments: comment, tcpb, cachetype, ip, servername, disabled, maxreq, monitor_bindings, maxbandwidth, svrtimeout, port, clttimeout, servicetype, cacheable, cleartextport, maxclient, processlocal, graceful, usip, netprofile, customserverid, td, httpprofilename, pathmonitorindv, pathmonitor, appflowlog, rtspsessionidremap, monthreshold, hashid, serverid, ipaddress, accessdown, name, tcpprofilename, sp, downstateflush, cipheader, cip, healthmonitor, useproxyport, cka, cmp, dnsprofilename\n\nManage service configuration in Netscaler.\nThis module allows the creation, deletion and modification of Netscaler services.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.\nThis module supports check mode.',
 'netscaler_servicegroup': 'Manage service group configuration in Netscaler\n\nArguments: comment, tcpb, cachetype, disabled, maxreq, maxbandwidth, graceful, svrtimeout, clttimeout, servicetype, cacheable, autoscale, maxclient, monitorbindings, servicegroupname, usip, netprofile, rtspsessionidremap, httpprofilename, pathmonitorindv, pathmonitor, appflowlog, servicemembers, monthreshold, memberport, cka, tcpprofilename, sp, downstateflush, cipheader, cip, healthmonitor, useproxyport, cmp\n\nManage service group configuration in Netscaler.\nThis module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.',
 'netscaler_ssl_certkey': 'Manage ssl certificate keys.\n\nArguments: certkey, passplain, inform, cert, key, notificationperiod, expirymonitor, password\n\nManage ssl certificate keys.',
 'newrelic_deployment': 'Notify newrelic about app deployments\n\nArguments: application_id, description, changelog, appname, environment, token, user, revision, validate_certs, app_name\n\nNotify newrelic about app deployments (see https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/deployment-notifications#api)',
 'nexmo': 'Send a SMS via nexmo\n\nArguments: src, dest, api_secret, api_key, validate_certs, msg\n\nSend a SMS message via nexmo',
 'nginx_status_info': 'Retrieve information on nginx status.\n\nArguments: url, timeout\n\nGathers information from nginx from an URL having C(stub_status) enabled.',
 'nictagadm': 'Manage nic tags on SmartOS systems\n\nArguments: mac, force, name, state, etherstub, mtu\n\nCreate or delete nic tags on SmartOS systems.',
 'nios_a_record': 'Configure Infoblox NIOS A records\n\nArguments: comment, state, name, ttl, extattrs, ipv4addr, view\n\nAdds and/or removes instances of A record objects from Infoblox NIOS servers.  This module manages NIOS C(record:a) objects using the Infoblox WAPI interface over REST.',
 'nios_aaaa_record': 'Configure Infoblox NIOS AAAA records\n\nArguments: comment, state, name, ttl, ipv6addr, extattrs, view\n\nAdds and/or removes instances of AAAA record objects from Infoblox NIOS servers.  This module manages NIOS C(record:aaaa) objects using the Infoblox WAPI interface over REST.',
 'nios_cname_record': 'Configure Infoblox NIOS CNAME records\n\nArguments: comment, state, name, extattrs, ttl, canonical, view\n\nAdds and/or removes instances of CNAME record objects from Infoblox NIOS servers.  This module manages NIOS C(record:cname) objects using the Infoblox WAPI interface over REST.',
 'nios_dns_view': 'Configure Infoblox NIOS DNS views\n\nArguments: comment, state, name, network_view, extattrs\n\nAdds and/or removes instances of DNS view objects from Infoblox NIOS servers.  This module manages NIOS C(view) objects using the Infoblox WAPI interface over REST.\nUpdates instances of DNS view object from Infoblox NIOS servers.',
 'nios_fixed_address': 'Configure Infoblox NIOS DHCP Fixed Address\n\nArguments: comment, name, network_view, ipaddr, mac, state, extattrs, options, network\n\nA fixed address is a specific IP address that a DHCP server always assigns when a lease request comes from a particular MAC address of the client.\nSupports both IPV4 and IPV6 internet protocols',
 'nios_host_record': 'Configure Infoblox NIOS host records\n\nArguments: comment, name, ttl, ipv6addrs, configure_for_dns, state, ipv4addrs, extattrs, aliases, view\n\nAdds and/or removes instances of host record objects from Infoblox NIOS servers.  This module manages NIOS C(record:host) objects using the Infoblox WAPI interface over REST.\nUpdates instances of host record object from Infoblox NIOS servers.',
 'nios_member': 'Configure Infoblox NIOS members\n\nArguments: comment, router_id, syslog_servers, lan2_port_setting, extattrs, upgrade_group, create_token, node_info, use_syslog_proxy_setting, enable_ha, vip_setting, config_addr_type, external_syslog_server_enable, platform, state, host_name, ipv6_setting, mgmt_port_setting, pre_provisioning, lan2_enabled\n\nAdds and/or removes Infoblox NIOS servers.  This module manages NIOS C(member) objects using the Infoblox WAPI interface over REST.',
 'nios_mx_record': 'Configure Infoblox NIOS MX records\n\nArguments: comment, name, mail_exchanger, ttl, state, preference, extattrs, view\n\nAdds and/or removes instances of MX record objects from Infoblox NIOS servers.  This module manages NIOS C(record:mx) objects using the Infoblox WAPI interface over REST.',
 'nios_naptr_record': 'Configure Infoblox NIOS NAPTR records\n\nArguments: comment, name, ttl, state, flags, preference, extattrs, services, regexp, replacement, order, view\n\nAdds and/or removes instances of NAPTR record objects from Infoblox NIOS servers.  This module manages NIOS C(record:naptr) objects using the Infoblox WAPI interface over REST.',
 'nios_network': 'Configure Infoblox NIOS network object\n\nArguments: comment, state, container, network, network_view, extattrs, options\n\nAdds and/or removes instances of network objects from Infoblox NIOS servers.  This module manages NIOS C(network) objects using the Infoblox WAPI interface over REST.\nSupports both IPV4 and IPV6 internet protocols',
 'nios_network_view': 'Configure Infoblox NIOS network views\n\nArguments: comment, state, name, extattrs\n\nAdds and/or removes instances of network view objects from Infoblox NIOS servers.  This module manages NIOS C(networkview) objects using the Infoblox WAPI interface over REST.\nUpdates instances of network view object from Infoblox NIOS servers.',
 'nios_nsgroup': 'Configure InfoBlox DNS Nameserver Groups\n\nArguments: comment, use_external_primary, name, grid_primary, external_primaries, external_secondaries, grid_secondaries, is_grid_default, state, extattrs\n\nAdds and/or removes nameserver groups form Infoblox NIOS servers. This module manages NIOS C(nsgroup) objects using the Infoblox. WAPI interface over REST.',
 'nios_ptr_record': 'Configure Infoblox NIOS PTR records\n\nArguments: comment, ptrdname, name, ttl, ipv4addr, state, extattrs, ipv6addr, view\n\nAdds and/or removes instances of PTR record objects from Infoblox NIOS servers.  This module manages NIOS C(record:ptr) objects using the Infoblox WAPI interface over REST.',
 'nios_srv_record': 'Configure Infoblox NIOS SRV records\n\nArguments: comment, target, weight, ttl, name, priority, state, extattrs, port, view\n\nAdds and/or removes instances of SRV record objects from Infoblox NIOS servers.  This module manages NIOS C(record:srv) objects using the Infoblox WAPI interface over REST.',
 'nios_txt_record': 'Configure Infoblox NIOS txt records\n\nArguments: comment, state, name, extattrs, text, ttl, view\n\nAdds and/or removes instances of txt record objects from Infoblox NIOS servers.  This module manages NIOS C(record:txt) objects using the Infoblox WAPI interface over REST.',
 'nios_zone': 'Configure Infoblox NIOS DNS zones\n\nArguments: comment, grid_primary, restart_if_needed, zone_format, ns_group, fqdn, state, extattrs, grid_secondaries, view\n\nAdds and/or removes instances of DNS zone objects from Infoblox NIOS servers.  This module manages NIOS C(zone_auth) objects using the Infoblox WAPI interface over REST.',
 'nmcli': 'Manage Networking\n\nArguments: conn_name, ingress, ip_tunnel_local, slavepriority, vxlan_id, path_cost, vlandev, forwarddelay, primary, hairpin, egress, ageingtime, dns4, vxlan_remote, dns4_search, arp_ip_target, dhcp_client_id, maxage, vlanid, priority, gw4, state, gw6, master, stp, ifname, type, miimon, hellotime, ip_tunnel_remote, downdelay, mac, ip6, ip_tunnel_dev, ip4, vxlan_local, autoconnect, dns6_search, dns6, mtu, arp_interval, flags, mode, updelay\n\nManage the network devices. Create, modify and manage various connection and device type e.g., ethernet, teams, bonds, vlans etc.\nOn CentOS 8 and Fedora >=29 like systems, the requirements can be met by installing the following packages: NetworkManager-nmlib, libsemanage-python, policycoreutils-python.\nOn CentOS 7 and Fedora <=28 like systems, the requirements can be met by installing the following packages: NetworkManager-glib, libnm-qt-devel.x86_64, nm-connection-editor.x86_64, libsemanage-python, policycoreutils-python.\nOn Ubuntu and Debian like systems, the requirements can be met by installing the following packages: network-manager, python-dbus (or python3-dbus, depending on the Python version in use), libnm-dev.\nOn older Ubuntu and Debian like systems, the requirements can be met by installing the following packages: network-manager, python-dbus (or python3-dbus, depending on the Python version in use), libnm-glib-dev.\nOn openSUSE, the requirements can be met by installing the following packages: NetworkManager, python2-dbus-python (or python3-dbus-python), typelib-1_0-NMClient-1_0 and typelib-1_0-NetworkManager-1_0.',
 'nos_command': 'Run commands on remote devices running Extreme Networks NOS\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to a NOS device and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(nos_config) to configure NOS devices.',
 'nos_config': 'Manage Extreme Networks NOS configuration sections\n\nArguments: multiline_delimiter, src, backup_options, after, lines, intended_config, diff_against, parents, before, running_config, replace, backup, match, diff_ignore_lines\n\nExtreme NOS configurations use a simple block indent file syntax for segmenting configuration into sections. This module provides an implementation for working with NOS configuration sections in a deterministic way.',
 'nos_facts': 'Collect facts from devices running Extreme NOS\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running NOS. This module prepends all of the base network fact keys with C(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'nosh': 'Manage services with nosh\n\nArguments: state, preset, enabled, name, user\n\nControl running and enabled state for system-wide or user services.\nBSD and Linux systems are supported.',
 'npm': 'Manage node.js packages with npm\n\nArguments: executable, name, global, ci, ignore_scripts, state, production, unsafe_perm, registry, version, path\n\nManage node.js packages with Node Package Manager (npm)',
 'nso_action': 'Executes Cisco NSO actions and verifies output.\n\nArguments: path, output_required, validate_strict, input, output_invalid\n\nThis module provides support for executing Cisco NSO actions and then verifying that the output is as expected.',
 'nso_config': 'Manage Cisco NSO configuration and service synchronization.\n\nArguments: data\n\nThis module provides support for managing configuration in Cisco NSO and can also ensure services are in sync.',
 'nso_query': 'Query data from Cisco NSO.\n\nArguments: xpath, fields\n\nThis module provides support for querying data from Cisco NSO using XPath.',
 'nso_show': 'Displays data from Cisco NSO.\n\nArguments: path, operational\n\nThis module provides support for displaying data from Cisco NSO.',
 'nso_verify': 'Verifies Cisco NSO configuration.\n\nArguments: data\n\nThis module provides support for verifying Cisco NSO configuration is in compliance with specified values.',
 'nsupdate': 'Manage DNS records.\n\nArguments: key_algorithm, protocol, zone, key_name, value, server, record, state, ttl, type, port, key_secret\n\nCreate, update and remove DNS records using DDNS updates',
 'nuage_vspk': 'Manage Nuage VSP environments\n\nArguments: parent_type, auth, properties, match_filter, parent_id, state, command, id, type, children\n\nManage or find Nuage VSP entities, this includes create, update, delete, assign, unassign and find, with all supported properties.',
 'nxos_aaa_server': 'Manages AAA server global configuration.\n\nArguments: state, server_timeout, deadtime, directed_request, server_type, encrypt_type, global_key\n\nManages AAA server global configuration',
 'nxos_aaa_server_host': 'Manages AAA server host-specific configuration.\n\nArguments: server_type, encrypt_type, auth_port, tacacs_port, host_timeout, state, key, address, acct_port\n\nManages AAA server host-specific configuration.',
 'nxos_acl': 'Manages access list entries for ACLs.\n\nArguments: src_port_op, psh, seq, src, dest, syn, dscp, time_range, dest_port_op, rst, dest_port2, name, established, remark, urg, log, proto, ack, src_port1, precedence, state, action, dest_port1, fragments, fin, src_port2\n\nManages access list entries for ACLs.',
 'nxos_acl_interface': 'Manages applying ACLs to interfaces.\n\nArguments: interface, direction, name, state\n\nManages applying ACLs to interfaces.',
 'nxos_banner': 'Manage multiline banners on Cisco NXOS devices\n\nArguments: text, state, banner\n\nThis will configure both exec and motd banners on remote devices running Cisco NXOS. It allows playbooks to add or remote banner text from the active running configuration.',
 'nxos_bfd_global': 'Bidirectional Forwarding Detection (BFD) global-level configuration\n\nArguments: echo_rx_interval, ipv6_interval, interval, startup_timer, fabricpath_vlan, ipv4_slow_timer, fabricpath_interval, ipv4_interval, ipv6_echo_rx_interval, fabricpath_slow_timer, slow_timer, ipv4_echo_rx_interval, echo_interface, ipv6_slow_timer\n\nManages Bidirectional Forwarding Detection (BFD) global-level configuration.',
 'nxos_bfd_interfaces': 'Manages BFD attributes of nxos interfaces.\n\nArguments: state, config\n\nManages attributes of Bidirectional Forwarding Detection (BFD) on the interface.',
 'nxos_bgp': 'Manages BGP configuration.\n\nArguments: neighbor_down_fib_accelerate, confederation_peers, confederation_id, event_history_cli, bestpath_always_compare_med, cluster_id, shutdown, log_neighbor_changes, bestpath_aspath_multipath_relax, graceful_restart_timers_stalepath_time, maxas_limit, bestpath_med_confed, isolate, timer_bgp_keepalive, bestpath_cost_community_ignore, fast_external_fallover, state, disable_policy_batching, suppress_fib_pending, bestpath_med_missing_as_worst, router_id, timer_bestpath_limit, bestpath_compare_neighborid, local_as, event_history_periodic, disable_policy_batching_ipv4_prefix_list, vrf, graceful_restart_helper, timer_bgp_hold, event_history_events, asn, disable_policy_batching_ipv6_prefix_list, event_history_detail, graceful_restart, flush_routes, enforce_first_as, bestpath_med_non_deterministic, reconnect_interval, graceful_restart_timers_restart, bestpath_compare_routerid\n\nManages BGP configurations on NX-OS switches.',
 'nxos_bgp_af': 'Manages BGP Address-family configuration.\n\nArguments: dampening_max_suppress_time, additional_paths_send, additional_paths_install, dampening_state, additional_paths_receive, suppress_inactive, dampening_routemap, distance_ibgp, distance_local, advertise_l2vpn_evpn, afi, default_information_originate, networks, state, next_hop_route_map, table_map_filter, safi, default_metric, client_to_client, dampen_igp_metric, additional_paths_selection, maximum_paths_ibgp, vrf, distance_ebgp, asn, redistribute, dampening_reuse_time, maximum_paths, inject_map, dampening_suppress_time, table_map, dampening_half_time\n\nManages BGP Address-family configurations on NX-OS switches.',
 'nxos_bgp_neighbor': 'Manages BGP neighbors configurations.\n\nArguments: update_source, maximum_peers, description, local_as, pwd_type, timers_keepalive, dynamic_capability, vrf, shutdown, low_memory_exempt, log_neighbor_changes, remove_private_as, suppress_4_byte_as, connected_check, remote_as, ebgp_multihop, bfd, pwd, asn, state, transport_passive_only, timers_holdtime, neighbor, capability_negotiation\n\nManages BGP neighbors configurations on NX-OS switches.',
 'nxos_bgp_neighbor_af': "Manages BGP address-family's neighbors configuration.\n\nArguments: default_originate, route_reflector_client, additional_paths_send, soo, additional_paths_receive, suppress_inactive, unsuppress_map, prefix_list_out, as_override, filter_list_out, afi, allowas_in, max_prefix_warning, max_prefix_threshold, state, advertise_map_non_exist, default_originate_route_map, send_community, disable_peer_as_check, safi, filter_list_in, weight, vrf, max_prefix_limit, asn, route_map_in, soft_reconfiguration_in, max_prefix_interval, route_map_out, next_hop_self, prefix_list_in, neighbor, next_hop_third_party, advertise_map_exist, allowas_in_max\n\nManages BGP address-family's neighbors configurations on NX-OS switches.",
 'nxos_command': 'Run arbitrary command on Cisco NXOS devices\n\nArguments: retries, commands, wait_for, match, interval\n\nSends an arbitrary command to an NXOS node and returns the results read from the device.  This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'nxos_config': 'Manage Cisco NXOS configuration sections\n\nArguments: backup_options, after, diff_against, replace, running_config, diff_ignore_lines, src, replace_src, lines, intended_config, parents, defaults, before, save_when, backup, match\n\nCisco NXOS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with NXOS configuration sections in a deterministic way.  This module works with either CLI or NXAPI transports.',
 'nxos_evpn_global': 'Handles the EVPN control plane for VXLAN.\n\nArguments: nv_overlay_evpn\n\nHandles the EVPN control plane for VXLAN.',
 'nxos_evpn_vni': 'Manages Cisco EVPN VXLAN Network Identifier (VNI).\n\nArguments: state, route_distinguisher, route_target_import, route_target_export, route_target_both, vni\n\nManages Cisco Ethernet Virtual Private Network (EVPN) VXLAN Network Identifier (VNI) configurations of a Nexus device.',
 'nxos_facts': 'Gets facts about NX-OS switches\n\nArguments: gather_subset, gather_network_resources\n\nCollects facts from Cisco Nexus devices running the NX-OS operating system.  Fact collection is supported over both Cli and Nxapi transports.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'nxos_feature': 'Manage features in NX-OS switches.\n\nArguments: state, feature\n\nOffers ability to enable and disable features in NX-OS.',
 'nxos_file_copy': 'Copy a file to a remote NXOS device.\n\nArguments: file_pull_timeout, local_file, local_file_directory, remote_scp_server, connect_ssh_port, remote_scp_server_user, remote_scp_server_password, vrf, file_pull_compact, file_pull_kstack, remote_file, file_system, file_pull\n\nThis module supports two different workflows for copying a file to flash (or bootflash) on NXOS devices.  Files can either be (1) pushed from the Ansible controller to the device or (2) pulled from a remote SCP file server to the device.  File copies are initiated from the NXOS device to the remote SCP server.  This module only supports the use of connection C(network_cli) or C(Cli) transport with connection C(local).',
 'nxos_gir': 'Trigger a graceful removal or insertion (GIR) of the switch.\n\nArguments: system_mode_maintenance_on_reload_reset_reason, system_mode_maintenance, state, system_mode_maintenance_dont_generate_profile, system_mode_maintenance_shutdown, system_mode_maintenance_timeout\n\nTrigger a graceful removal or insertion (GIR) of the switch.',
 'nxos_gir_profile_management': 'Create a maintenance-mode or normal-mode profile for GIR.\n\nArguments: commands, mode, state\n\nManage a maintenance-mode or normal-mode profile with configuration commands that can be applied during graceful removal or graceful insertion.',
 'nxos_hsrp': 'Manages HSRP configuration on NX-OS switches.\n\nArguments: auth_type, group, preempt, auth_string, vip, priority, state, version, interface\n\nManages HSRP configuration on NX-OS switches.',
 'nxos_igmp': 'Manages IGMP global configuration.\n\nArguments: state, enforce_rtr_alert, restart, flush_routes\n\nManages IGMP global configuration configuration settings.',
 'nxos_igmp_interface': 'Manages IGMP interface configuration.\n\nArguments: startup_query_interval, group_timeout, robustness, oif_routemap, oif_prefix, interface, querier_timeout, last_member_query_count, restart, report_llg, last_member_qrt, oif_ps, startup_query_count, immediate_leave, state, version, oif_source, query_interval, query_mrt\n\nManages IGMP interface configuration settings.',
 'nxos_igmp_snooping': 'Manages IGMP snooping global configuration.\n\nArguments: link_local_grp_supp, report_supp, snooping, group_timeout, v3_report_supp, state\n\nManages IGMP snooping global configuration.',
 'nxos_install_os': 'Set boot options like boot, kickstart image and issu.\n\nArguments: issu, system_image_file, kickstart_image_file\n\nInstall an operating system by setting the boot options like boot image and kickstart image and optionally select to install using ISSU (In Server Software Upgrade).',
 'nxos_interface_ospf': 'Manages configuration of an OSPF interface instance.\n\nArguments: cost, hello_interval, bfd, message_digest_algorithm_type, message_digest_key_id, area, message_digest_encryption_type, state, dead_interval, passive_interface, message_digest_password, interface, ospf, message_digest, network\n\nManages configuration of an OSPF interface instance.',
 'nxos_interfaces': 'Manages interface attributes of NX-OS Interfaces\n\nArguments: state, config\n\nThis module manages the interface attributes of NX-OS interfaces.',
 'nxos_l2_interfaces': 'Manages Layer-2 Interfaces attributes of NX-OS Interfaces\n\nArguments: state, config\n\nThis module manages Layer-2 interfaces attributes of NX-OS Interfaces.',
 'nxos_l3_interfaces': 'Manages Layer-3 Interfaces attributes of NX-OS Interfaces\n\nArguments: state, config\n\nThis module manages Layer-3 interfaces attributes of NX-OS Interfaces.',
 'nxos_lacp': 'Manage Global Link Aggregation Control Protocol (LACP) on Cisco NX-OS devices.\n\nArguments: state, config\n\nThis module manages Global Link Aggregation Control Protocol (LACP) on NX-OS devices.',
 'nxos_lacp_interfaces': 'Manage Link Aggregation Control Protocol (LACP) attributes of interfaces on Cisco NX-OS devices.\n\nArguments: state, config\n\nThis module manages Link Aggregation Control Protocol (LACP) attributes of NX-OS Interfaces.',
 'nxos_lag_interfaces': 'Manages link aggregation groups of NX-OS Interfaces\n\nArguments: state, config\n\nThis module manages attributes of link aggregation groups of NX-OS Interfaces.',
 'nxos_lldp': 'Manage LLDP configuration on Cisco NXOS network devices.\n\nArguments: state\n\nThis module provides declarative management of LLDP service on Cisco NXOS network devices.',
 'nxos_lldp_global': 'Configure and manage Link Layer Discovery Protocol(LLDP) attributes on NX-OS platforms.\n\nArguments: state, config\n\nThis module configures and manages the Link Layer Discovery Protocol(LLDP) attributes on NX-OS platforms.',
 'nxos_logging': 'Manage logging on network devices\n\nArguments: facility_level, facility, dest, timestamp, interface_message, interface, facility_link_status, file_size, aggregate, event, name, remote_server, dest_level, purge, state, use_vrf\n\nThis module provides declarative management of logging on Cisco NX-OS devices.',
 'nxos_ntp': 'Manages core NTP configuration.\n\nArguments: source_addr, prefer, server, state, vrf_name, peer, key_id, source_int\n\nManages core NTP configuration.',
 'nxos_ntp_auth': 'Manages NTP authentication.\n\nArguments: auth_type, state, key_id, trusted_key, authentication, md5string\n\nManages NTP authentication.',
 'nxos_ntp_options': 'Manages NTP options.\n\nArguments: master, state, logging, stratum\n\nManages NTP options, e.g. authoritative server and logging.',
 'nxos_nxapi': 'Manage NXAPI configuration on an NXOS device.\n\nArguments: http_port, http, https_port, tlsv1_0, tlsv1_1, sandbox, ssl_strong_ciphers, state, https, tlsv1_2\n\nConfigures the NXAPI feature on devices running Cisco NXOS.  The NXAPI feature is absent from the configuration by default.  Since this module manages the NXAPI feature it only supports the use of the C(Cli) transport.',
 'nxos_ospf': 'Manages configuration of an ospf instance.\n\nArguments: state, ospf\n\nManages configuration of an ospf instance.',
 'nxos_ospf_vrf': 'Manages a VRF for an OSPF router.\n\nArguments: router_id, timer_throttle_lsa_max, timer_throttle_spf_max, auto_cost, timer_throttle_lsa_hold, bfd, default_metric, log_adjacency, timer_throttle_lsa_start, state, vrf, passive_interface, timer_throttle_spf_start, ospf, timer_throttle_spf_hold\n\nManages a VRF for an OSPF router.',
 'nxos_overlay_global': 'Configures anycast gateway MAC of the switch.\n\nArguments: anycast_gateway_mac\n\nConfigures anycast gateway MAC of the switch.',
 'nxos_pim': 'Manages configuration of a PIM instance.\n\nArguments: ssm_range, bfd\n\nManages configuration of a Protocol Independent Multicast (PIM) instance.',
 'nxos_pim_interface': 'Manages PIM interface configuration.\n\nArguments: hello_auth_key, dr_prio, hello_interval, jp_type_in, bfd, jp_policy_out, neighbor_type, state, neighbor_policy, sparse, interface, jp_policy_in, border, jp_type_out\n\nManages PIM interface configuration settings.',
 'nxos_pim_rp_address': 'Manages configuration of an PIM static RP address instance.\n\nArguments: bidir, state, route_map, prefix_list, rp_address, group_list\n\nManages configuration of an Protocol Independent Multicast (PIM) static rendezvous point (RP) address instance.',
 'nxos_ping': 'Tests reachability using ping from Nexus switch.\n\nArguments: dest, count, state, vrf, source\n\nTests reachability using ping from switch to a remote destination.\nFor a general purpose network module, see the M(net_ping) module.\nFor Windows targets, use the M(win_ping) module instead.\nFor targets running Python, use the M(ping) module instead.',
 'nxos_reboot': 'Reboot a network device.\n\nArguments: confirm\n\nReboot a network device.',
 'nxos_rollback': 'Set a checkpoint or rollback to a checkpoint.\n\nArguments: checkpoint_file, rollback_to\n\nThis module offers the ability to set a configuration checkpoint file or rollback to a configuration checkpoint file on Cisco NXOS switches.',
 'nxos_rpm': 'Install patch or feature rpms on Cisco NX-OS devices.\n\nArguments: aggregate, state, pkg, file_system\n\nInstall software maintenance upgrade (smu) RPMS and 3rd party RPMS on Cisco NX-OS devices.',
 'nxos_smu': 'Perform SMUs on Cisco NX-OS devices.\n\nArguments: pkg, file_system\n\nPerform software maintenance upgrades (SMUs) on Cisco NX-OS devices.',
 'nxos_snapshot': 'Manage snapshots of the running states of selected features.\n\nArguments: description, section, snapshot1, comparison_results_file, snapshot2, element_key1, element_key2, snapshot_name, save_snapshot_locally, action, path, row_id, show_command, compare_option\n\nCreate snapshots of the running states of selected features, add new show commands for snapshot creation, delete and compare existing snapshots.',
 'nxos_snmp_community': 'Manages SNMP community configs.\n\nArguments: access, state, group, community, acl\n\nManages SNMP community configuration.',
 'nxos_snmp_contact': 'Manages SNMP contact info.\n\nArguments: state, contact\n\nManages SNMP contact information.',
 'nxos_snmp_host': 'Manages SNMP host configuration.\n\nArguments: vrf_filter, udp, src_intf, snmp_host, community, state, version, v3, snmp_type, vrf\n\nManages SNMP host configuration parameters.',
 'nxos_snmp_location': 'Manages SNMP location information.\n\nArguments: state, location\n\nManages SNMP location configuration.',
 'nxos_snmp_traps': 'Manages SNMP traps.\n\nArguments: state, group\n\nManages SNMP traps configurations.',
 'nxos_snmp_user': 'Manages SNMP users for monitoring.\n\nArguments: authentication, state, encrypt, user, privacy, group, pwd\n\nManages SNMP user configuration.',
 'nxos_static_route': 'Manages static route configuration\n\nArguments: prefix, track, pref, route_name, state, tag, next_hop, aggregate, vrf\n\nManages static route configuration',
 'nxos_system': 'Manage the system attributes on Cisco NXOS devices\n\nArguments: domain_lookup, state, name_servers, domain_search, hostname, system_mtu, domain_name\n\nThis module provides declarative management of node system attributes on Cisco NXOS devices.  It provides an option to configure host system parameters or remove those parameters from the device active configuration.',
 'nxos_telemetry': 'Telemetry Monitoring Service (TMS) configuration\n\nArguments: state, config\n\nManages Telemetry Monitoring Service (TMS) configuration',
 'nxos_udld': 'Manages UDLD global configuration params.\n\nArguments: reset, msg_time, aggressive, state\n\nManages UDLD global configuration params.',
 'nxos_udld_interface': 'Manages UDLD interface configuration params.\n\nArguments: interface, state, mode\n\nManages UDLD interface configuration params.',
 'nxos_user': 'Manage the collection of local users on Nexus devices\n\nArguments: update_password, configured_password, name, purge, state, role, aggregate, sshkey\n\nThis module provides declarative management of the local usernames configured on Cisco Nexus devices.  It allows playbooks to manage either individual usernames or the collection of usernames in the current running config.  It also supports purging usernames from the configuration that are not explicitly defined.',
 'nxos_vlans': 'Create VLAN and manage VLAN configurations on NX-OS Interfaces\n\nArguments: state, config\n\nThis module creates and manages VLAN configurations on Cisco NX-OS Interfaces.',
 'nxos_vpc': 'Manages global VPC configuration\n\nArguments: domain, system_priority, role_priority, auto_recovery, pkl_vrf, delay_restore, delay_restore_interface_vlan, peer_gw, auto_recovery_reload_delay, state, pkl_dest, pkl_src, delay_restore_orphan_port\n\nManages global VPC configuration',
 'nxos_vpc_interface': 'Manages interface VPC configuration\n\nArguments: state, vpc, portchannel, peer_link\n\nManages interface VPC configuration',
 'nxos_vrf': 'Manages global VRF configuration.\n\nArguments: rd, name, interfaces, vni, purge, associated_interfaces, state, delay, admin_state, aggregate, description\n\nThis module provides declarative management of VRFs on CISCO NXOS network devices.',
 'nxos_vrf_af': 'Manages VRF AF.\n\nArguments: state, route_target_both_auto_evpn, vrf, afi\n\nManages VRF AF',
 'nxos_vrf_interface': 'Manages interface specific VRF configuration.\n\nArguments: interface, state, vrf\n\nManages interface specific VRF configuration.',
 'nxos_vrrp': 'Manages VRRP configuration on NX-OS switches.\n\nArguments: group, preempt, interval, vip, authentication, priority, state, admin_state, interface\n\nManages VRRP configuration on NX-OS switches.',
 'nxos_vtp_domain': 'Manages VTP domain configuration.\n\nArguments: domain\n\nManages VTP domain configuration.',
 'nxos_vtp_password': 'Manages VTP password configuration.\n\nArguments: vtp_password, state\n\nManages VTP password configuration.',
 'nxos_vtp_version': 'Manages VTP version configuration.\n\nArguments: version\n\nManages VTP version configuration.',
 'nxos_vxlan_vtep': 'Manages VXLAN Network Virtualization Endpoint (NVE).\n\nArguments: global_mcast_group_L2, global_mcast_group_L3, description, global_ingress_replication_bgp, global_suppress_arp, host_reachability, source_interface_hold_down_time, state, shutdown, source_interface, interface\n\nManages VXLAN Network Virtualization Endpoint (NVE) overlay interface that terminates VXLAN tunnels.',
 'nxos_vxlan_vtep_vni': 'Creates a Virtual Network Identifier member (VNI)\n\nArguments: assoc_vrf, peer_list, vni, multicast_group, state, suppress_arp_disable, interface, ingress_replication, suppress_arp\n\nCreates a Virtual Network Identifier member (VNI) for an NVE overlay interface.',
 'oci_vcn': 'Manage Virtual Cloud Networks(VCN) in OCI\n\nArguments: vcn_id, state, dns_label, display_name, compartment_id, cidr_block\n\nThis module allows the user to create, delete and update virtual cloud networks(VCNs) in OCI. The complete Oracle Cloud Infrastructure Ansible Modules can be downloaded from U(https://github.com/oracle/oci-ansible-modules/releases).',
 'office_365_connector_card': 'Use webhooks to create Connector Card messages within an Office 365 group\n\nArguments: sections, title, color, text, webhook, actions, summary\n\nCreates Connector Card messages through\nOffice 365 Connectors U(https://dev.outlook.com/Connectors)',
 'ohai': 'Returns inventory data from I(Ohai)\n\nArguments: \n\nSimilar to the M(facter) module, this runs the I(Ohai) discovery program (U(https://docs.chef.io/ohai.html)) on the remote host and returns JSON inventory data. I(Ohai) data is a bit more verbose and nested than I(facter).',
 'omapi_host': 'Setup OMAPI hosts.\n\nArguments: macaddr, statements, key_name, hostname, state, host, ddns, key, ip, port\n\nManage OMAPI hosts into compatible DHCPd servers',
 'ome_device_info': 'Retrieves the information about Device.\n\nArguments: username, system_query_options, password, fact_subset, hostname, port\n\nThis module retrieves the list of all devices information with the exhaustive inventory of each device.',
 'one_host': 'Manages OpenNebula Hosts\n\nArguments: vmm_mad_name, name, im_mad_name, labels, cluster_name, state, cluster_id, template\n\nManages OpenNebula Hosts',
 'one_image': 'Manages OpenNebula images\n\nArguments: new_name, api_url, api_password, enabled, state, api_username, id, name\n\nManages OpenNebula images',
 'one_image_info': 'Gather information on OpenNebula images\n\nArguments: api_username, api_password, ids, name, api_url\n\nGather information on OpenNebula images.\nThis module was called C(one_image_facts) before Ansible 2.9. The usage did not change.',
 'one_service': 'Deploy and manage OpenNebula services\n\nArguments: custom_attrs, force, template_name, api_username, api_password, wait_timeout, cardinality, wait, unique, api_url, state, role, mode, service_name, service_id, group_id, template_id, owner_id\n\nManage OpenNebula services',
 'one_vm': 'Creates or terminates OpenNebula instances\n\nArguments: hard, template_name, labels, api_password, instance_ids, count_labels, wait_timeout, networks, disk_saveas, wait, count, disk_size, api_url, vcpu, exact_count, template_id, api_username, state, count_attributes, mode, memory, attributes, group_id, cpu, vm_start_on_hold, owner_id\n\nManages OpenNebula instances',
 'oneandone_firewall_policy': 'Configure 1&1 firewall policy.\n\nArguments: add_rules, firewall_policy, name, rules, auth_token, remove_server_ips, wait_interval, state, wait_timeout, add_server_ips, api_url, wait, remove_rules, description\n\nCreate, remove, reconfigure, update firewall policies. This module has a dependency on 1and1 >= 1.0',
 'oneandone_load_balancer': 'Configure 1&1 load balancer.\n\nArguments: add_rules, load_balancer, description, health_check_parse, rules, auth_token, health_check_test, wait_timeout, add_server_ips, health_check_path, wait, datacenter, persistence_time, health_check_interval, api_url, wait_interval, remove_server_ips, name, state, remove_rules, method, persistence\n\nCreate, remove, update load balancers. This module has a dependency on 1and1 >= 1.0',
 'oneandone_monitoring_policy': 'Configure 1&1 monitoring policy.\n\nArguments: add_ports, name, thresholds, agent, email, wait_timeout, monitoring_policy, remove_servers, update_ports, description, processes, api_url, wait_interval, remove_processes, add_servers, state, update_processes, remove_ports, add_processes, wait, auth_token, ports\n\nCreate, remove, update monitoring policies (and add/remove ports, processes, and servers). This module has a dependency on 1and1 >= 1.0',
 'oneandone_private_network': 'Configure 1&1 private networking.\n\nArguments: datacenter, description, wait_interval, auth_token, network_address, name, subnet_mask, state, wait_timeout, add_members, private_network, wait, remove_members, api_url\n\nCreate, remove, reconfigure, update a private network. This module has a dependency on 1and1 >= 1.0',
 'oneandone_public_ip': 'Configure 1&1 public IPs.\n\nArguments: datacenter, api_url, wait_interval, auth_token, reverse_dns, state, wait_timeout, public_ip_id, type, wait\n\nCreate, update, and remove public IPs. This module has a dependency on 1and1 >= 1.0',
 'oneandone_server': "Create, destroy, start, stop, and reboot a 1&1 Host server.\n\nArguments: load_balancer, vcore, description, server_type, auto_increment, auth_token, ram, ssh_key, wait_timeout, private_network, monitoring_policy, wait, count, datacenter, firewall_policy, api_url, cores_per_processor, hdds, wait_interval, hostname, appliance, server, state, fixed_instance_size\n\nCreate, destroy, update, start, stop, and reboot a 1&1 Host server. When the server is created it can optionally wait for it to be 'running' before returning.",
 'onepassword_info': 'Gather items from 1Password\n\nArguments: cli_path, search_terms, auto_login\n\nM(onepassword_info) wraps the C(op) command line utility to fetch data about one or more 1Password items.\nA fatal error occurs if any of the items being searched for can not be found.\nRecommend using with the C(no_log) option to avoid logging the values of the secrets being retrieved.\nThis module was called C(onepassword_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(onepassword_info) module no longer returns C(ansible_facts)! You must now use the C(register) option to use the facts in other tasks.',
 'oneview_datacenter_info': 'Retrieve information about the OneView Data Centers\n\nArguments: name, options\n\nRetrieve information about the OneView Data Centers.\nThis module was called C(oneview_datacenter_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_datacenter_info) module no longer returns C(ansible_facts)!',
 'oneview_enclosure_info': 'Retrieve information about one or more Enclosures\n\nArguments: name, options\n\nRetrieve information about one or more of the Enclosures from OneView.\nThis module was called C(oneview_enclosure_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_enclosure_info) module no longer returns C(ansible_facts)!',
 'oneview_ethernet_network': 'Manage OneView Ethernet Network resources\n\nArguments: state, data\n\nProvides an interface to manage Ethernet Network resources. Can create, update, or delete.',
 'oneview_ethernet_network_info': 'Retrieve the information about one or more of the OneView Ethernet Networks\n\nArguments: name, options\n\nRetrieve the information about one or more of the Ethernet Networks from OneView.\nThis module was called C(oneview_ethernet_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_ethernet_network_info) module no longer returns C(ansible_facts)!',
 'oneview_fc_network': 'Manage OneView Fibre Channel Network resources.\n\nArguments: state, data\n\nProvides an interface to manage Fibre Channel Network resources. Can create, update, and delete.',
 'oneview_fc_network_info': 'Retrieve the information about one or more of the OneView Fibre Channel Networks\n\nArguments: name\n\nRetrieve the information about one or more of the Fibre Channel Networks from OneView.\nThis module was called C(oneview_fc_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_fc_network_info) module no longer returns C(ansible_facts)!',
 'oneview_fcoe_network': 'Manage OneView FCoE Network resources\n\nArguments: state, data\n\nProvides an interface to manage FCoE Network resources. Can create, update, or delete.',
 'oneview_fcoe_network_info': 'Retrieve the information about one or more of the OneView FCoE Networks\n\nArguments: name\n\nRetrieve the information about one or more of the FCoE Networks from OneView.\nThis module was called C(oneview_fcoe_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_fcoe_network_info) module no longer returns C(ansible_facts)!',
 'oneview_logical_interconnect_group': 'Manage OneView Logical Interconnect Group resources\n\nArguments: state, data\n\nProvides an interface to manage Logical Interconnect Group resources. Can create, update, or delete.',
 'oneview_logical_interconnect_group_info': 'Retrieve information about one or more of the OneView Logical Interconnect Groups\n\nArguments: name\n\nRetrieve information about one or more of the Logical Interconnect Groups from OneView\nThis module was called C(oneview_logical_interconnect_group_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_logical_interconnect_group_info) module no longer returns C(ansible_facts)!',
 'oneview_network_set': 'Manage HPE OneView Network Set resources\n\nArguments: state, data\n\nProvides an interface to manage Network Set resources. Can create, update, or delete.',
 'oneview_network_set_info': 'Retrieve information about the OneView Network Sets\n\nArguments: name, options\n\nRetrieve information about the Network Sets from OneView.\nThis module was called C(oneview_network_set_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_network_set_info) module no longer returns C(ansible_facts)!',
 'oneview_san_manager': 'Manage OneView SAN Manager resources\n\nArguments: state, data\n\nProvides an interface to manage SAN Manager resources. Can create, update, or delete.',
 'oneview_san_manager_info': 'Retrieve information about one or more of the OneView SAN Managers\n\nArguments: provider_display_name, params\n\nRetrieve information about one or more of the SAN Managers from OneView\nThis module was called C(oneview_san_manager_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(oneview_san_manager_info) module no longer returns C(ansible_facts)!',
 'online_server_info': 'Gather information about Online servers.\n\nArguments: \n\nGather information about the servers.\nU(https://www.online.net/en/dedicated-server)',
 'online_user_info': 'Gather information about Online user.\n\nArguments: \n\nGather information about the user.',
 'onyx_bgp': 'Configures BGP on Mellanox ONYX network devices\n\nArguments: router_id, as_number, neighbors, max_paths, fast_external_fallover, purge, state, vrf, ecmp_bestpath, evpn, networks\n\nThis module provides declarative management of BGP router and neighbors on Mellanox ONYX network devices.',
 'onyx_buffer_pool': 'Configures Buffer Pool\n\nArguments: pool_type, memory_percent, name, switch_priority\n\nThis module provides declarative management of Onyx Buffer Pool configuration on Mellanox ONYX network devices.',
 'onyx_command': 'Run commands on remote devices running Mellanox ONYX\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an Mellanox ONYX network device and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(onyx_config) to configure Mellanox ONYX devices.',
 'onyx_config': 'Manage Mellanox ONYX configuration sections\n\nArguments: src, backup_options, backup, after, lines, replace, parents, save, config, match, before\n\nMellanox ONYX configurations uses a simple block indent file syntax for segmenting configuration into sections. This module provides an implementation for working with ONYX configuration sections in a deterministic way.',
 'onyx_facts': 'Collect facts from Mellanox ONYX network devices\n\nArguments: gather_subset\n\nCollects a base set of device facts from a ONYX Mellanox network devices This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'onyx_igmp': 'Configures IGMP global parameters\n\nArguments: default_version, last_member_query_interval, unregistered_multicast, state, report_suppression_interval, proxy_reporting, mrouter_timeout, port_purge_timeout\n\nThis module provides declarative management of IGMP protocol params on Mellanox ONYX network devices.',
 'onyx_igmp_interface': 'Configures IGMP interface parameters\n\nArguments: state, name\n\nThis module provides declarative management of IGMP interface configuration on Mellanox ONYX network devices.',
 'onyx_igmp_vlan': 'Configures IGMP Vlan parameters\n\nArguments: state, version, querier, mrouter, static_groups, vlan_id\n\nThis module provides declarative management of IGMP vlan configuration on Mellanox ONYX network devices.',
 'onyx_interface': 'Manage Interfaces on Mellanox ONYX network devices\n\nArguments: rx_rate, name, duplex, enabled, mtu, delay, purge, state, aggregate, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on Mellanox ONYX network devices.',
 'onyx_l2_interface': 'Manage Layer-2 interface on Mellanox ONYX network devices\n\nArguments: access_vlan, state, trunk_allowed_vlans, name, aggregate, mode\n\nThis module provides declarative management of Layer-2 interface on Mellanox ONYX network devices.',
 'onyx_l3_interface': 'Manage L3 interfaces on Mellanox ONYX network devices\n\nArguments: purge, state, name, ipv6, aggregate, ipv4\n\nThis module provides declarative management of L3 interfaces on Mellanox ONYX network devices.',
 'onyx_linkagg': 'Manage link aggregation groups on Mellanox ONYX network devices\n\nArguments: purge, state, name, members, aggregate, mode\n\nThis module provides declarative management of link aggregation groups on Mellanox ONYX network devices.',
 'onyx_lldp': 'Manage LLDP configuration on Mellanox ONYX network devices\n\nArguments: state\n\nThis module provides declarative management of LLDP service configuration on Mellanox ONYX network devices.',
 'onyx_lldp_interface': 'Manage LLDP interfaces configuration on Mellanox ONYX network devices\n\nArguments: aggregate, purge, state, name\n\nThis module provides declarative management of LLDP interfaces configuration on Mellanox ONYX network devices.',
 'onyx_magp': 'Manage MAGP protocol on Mellanox ONYX network devices\n\nArguments: interface, router_mac, state, router_ip, magp_id\n\nThis module provides declarative management of MAGP protocol on vlan interface of Mellanox ONYX network devices.',
 'onyx_mlag_ipl': 'Manage IPL (inter-peer link) on Mellanox ONYX network devices\n\nArguments: vlan_interface, state, name, peer_address\n\nThis module provides declarative management of IPL (inter-peer link) management on Mellanox ONYX network devices.',
 'onyx_mlag_vip': 'Configures MLAG VIP on Mellanox ONYX network devices\n\nArguments: delay, state, group_name, ipaddress, mac_address\n\nThis module provides declarative management of MLAG virtual IPs on Mellanox ONYX network devices.',
 'onyx_ospf': 'Manage OSPF protocol on Mellanox ONYX network devices\n\nArguments: router_id, interfaces, ospf, state\n\nThis module provides declarative management and configuration of OSPF protocol on Mellanox ONYX network devices.',
 'onyx_pfc_interface': 'Manage priority flow control on ONYX network devices\n\nArguments: aggregate, purge, state, name\n\nThis module provides declarative management of priority flow control (PFC) on interfaces of Mellanox ONYX network devices.',
 'onyx_protocol': 'Enables/Disables protocols on Mellanox ONYX network devices\n\nArguments: spanning_tree, lldp, mlag, magp, ip_routing, lacp, nve, ip_l3, igmp_snooping, dcb_pfc, ospf, bgp\n\nThis module provides a mechanism for enabling and disabling protocols Mellanox on ONYX network devices.',
 'onyx_ptp_global': 'Configures PTP Global parameters\n\nArguments: primary_priority, domain, ptp_state, ntp_state, secondary_priority\n\nThis module provides declarative management of PTP Global configuration on Mellanox ONYX network devices.',
 'onyx_ptp_interface': 'Configures PTP on interface\n\nArguments: sync_interval, announce_interval, name, delay_request, state, announce_timeout\n\nThis module provides declarative management of PTP interfaces configuration on Mellanox ONYX network devices.',
 'onyx_qos': 'Configures QoS\n\nArguments: interfaces, trust, rewrite_dscp, rewrite_pcp\n\nThis module provides declarative management of Onyx QoS configuration on Mellanox ONYX network devices.',
 'onyx_traffic_class': 'Configures Traffic Class\n\nArguments: interfaces, state, dcb, congestion_control, tc\n\nThis module provides declarative management of Traffic Class configuration on Mellanox ONYX network devices.',
 'onyx_vlan': 'Manage VLANs on Mellanox ONYX network devices\n\nArguments: aggregate, purge, state, name, vlan_id\n\nThis module provides declarative management of VLANs on Mellanox ONYX network devices.',
 'onyx_vxlan': 'Configures Vxlan\n\nArguments: arp_suppression, bgp, loopback_id, vni_vlan_list, nve_id, mlag_tunnel_ip\n\nThis module provides declarative management of Vxlan configuration on Mellanox ONYX network devices.',
 'onyx_wjh': 'Configure what-just-happend module\n\nArguments: clear_group, group, export_group, enabled, auto_export\n\nThis module provides declarative management of wjh on Mellanox ONYX network devices.',
 'open_iscsi': 'Manage iSCSI targets with Open-iSCSI\n\nArguments: auto_node_startup, target, show_nodes, node_auth, node_pass, discover, portal, login, node_user, port\n\nDiscover targets on given portal, (dis)connect targets, mark targets to manually or auto start, return device nodes of connected targets.',
 'openbsd_pkg': 'Manage packages on OpenBSD\n\nArguments: state, ports_dir, clean, quick, name, build\n\nManage packages on OpenBSD using the pkg tools.',
 'opendj_backendprop': 'Will update the backend configuration of OpenDJ via the dsconfig set-backend-prop command.\n\nArguments: username, name, hostname, value, state, passwordfile, password, opendj_bindir, port, backend\n\nThis module will update settings for OpenDJ with the command set-backend-prop.\nIt will check first via de get-backend-prop if configuration needs to be applied.',
 'openssh_cert': 'Generate OpenSSH host or user certificates.\n\nArguments: public_key, valid_from, force, signing_key, options, state, valid_to, path, serial_number, identifier, type, principals, valid_at\n\nGenerate and regenerate OpenSSH host or user certificates.',
 'openssh_keypair': 'Generate OpenSSH private and public keys.\n\nArguments: comment, state, force, path, type, size\n\nThis module allows one to (re)generate OpenSSH private and public keys. It uses ssh-keygen to generate keys. One can generate C(rsa), C(dsa), C(rsa1), C(ed25519) or C(ecdsa) private keys.',
 'openssl_certificate': "Generate and/or check OpenSSL certificates\n\nArguments: privatekey_passphrase, subject_alt_name_strict, signature_algorithms, force, csr_path, acme_chain, ownca_privatekey_path, selfsigned_create_subject_key_identifier, ownca_privatekey_passphrase, key_usage, valid_in, path, entrust_api_key, not_before, issuer, ownca_version, subject_strict, selfsigned_version, has_expired, entrust_requester_phone, state, version, provider, selfsigned_digest, entrust_not_after, subject, ownca_create_authority_key_identifier, key_usage_strict, ownca_create_subject_key_identifier, subject_alt_name, extended_key_usage_strict, entrust_requester_name, selfsigned_not_after, acme_challenge_path, privatekey_path, entrust_requester_email, ownca_path, ownca_not_after, issuer_strict, ownca_not_before, invalid_at, entrust_cert_type, entrust_api_specification_path, acme_accountkey_path, ownca_digest, extended_key_usage, entrust_api_user, not_after, entrust_api_client_cert_key_path, selfsigned_not_before, entrust_api_client_cert_path, select_crypto_backend, backup, valid_at\n\nThis module allows one to (re)generate OpenSSL certificates.\nIt implements a notion of provider (ie. C(selfsigned), C(ownca), C(acme), C(assertonly), C(entrust)) for your certificate.\nThe C(assertonly) provider is intended for use cases where one is only interested in checking properties of a supplied certificate. Please note that this provider has been deprecated in Ansible 2.9 and will be removed in Ansible 2.13. See the examples on how to emulate C(assertonly) usage with M(openssl_certificate_info), M(openssl_csr_info), M(openssl_privatekey_info) and M(assert). This also allows more flexible checks than the ones offered by the C(assertonly) provider.\nThe C(ownca) provider is intended for generating OpenSSL certificate signed with your own CA (Certificate Authority) certificate (self-signed certificate).\nMany properties that can be specified in this module are for validation of an existing or newly generated certificate. The proper place to specify them, if you want to receive a certificate with these properties is a CSR (Certificate Signing Request).\nPlease note that the module regenerates existing certificate if it doesn't match the module's options, or if it seems to be corrupt. If you are concerned that this could overwrite your existing certificate, consider using the I(backup) option.\nIt uses the pyOpenSSL or cryptography python library to interact with OpenSSL.\nIf both the cryptography and PyOpenSSL libraries are available (and meet the minimum version requirements) cryptography will be preferred as a backend over PyOpenSSL (unless the backend is forced with C(select_crypto_backend)). Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13.",
 'openssl_certificate_info': 'Provide information of OpenSSL X.509 certificates\n\nArguments: select_crypto_backend, path, valid_at\n\nThis module allows one to query information on OpenSSL certificates.\nIt uses the pyOpenSSL or cryptography python library to interact with OpenSSL. If both the cryptography and PyOpenSSL libraries are available (and meet the minimum version requirements) cryptography will be preferred as a backend over PyOpenSSL (unless the backend is forced with C(select_crypto_backend)). Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13.',
 'openssl_csr': 'Generate OpenSSL Certificate Signing Request (CSR)\n\nArguments: privatekey_passphrase, force, authority_cert_issuer, create_subject_key_identifier, subject_alt_name_critical, ocsp_must_staple, key_usage, path, common_name, email_address, digest, subject, organizational_unit_name, locality_name, organization_name, state, version, country_name, state_or_province_name, extended_key_usage_critical, subject_alt_name, authority_key_identifier, basic_constraints, privatekey_path, authority_cert_serial_number, key_usage_critical, extended_key_usage, ocsp_must_staple_critical, subject_key_identifier, use_common_name_for_san, basic_constraints_critical, select_crypto_backend, backup\n\nThis module allows one to (re)generate OpenSSL certificate signing requests.\nIt uses the pyOpenSSL python library to interact with openssl. This module supports the subjectAltName, keyUsage, extendedKeyUsage, basicConstraints and OCSP Must Staple extensions.\nPlease note that the module regenerates existing CSR if it doesn\'t match the module\'s options, or if it seems to be corrupt. If you are concerned that this could overwrite your existing CSR, consider using the I(backup) option.\nThe module can use the cryptography Python library, or the pyOpenSSL Python library. By default, it tries to detect which one is available. This can be overridden with the I(select_crypto_backend) option. Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13."',
 'openssl_csr_info': 'Provide information of OpenSSL Certificate Signing Requests (CSR)\n\nArguments: select_crypto_backend, path\n\nThis module allows one to query information on OpenSSL Certificate Signing Requests (CSR).\nIn case the CSR signature cannot be validated, the module will fail. In this case, all return variables are still returned.\nIt uses the pyOpenSSL or cryptography python library to interact with OpenSSL. If both the cryptography and PyOpenSSL libraries are available (and meet the minimum version requirements) cryptography will be preferred as a backend over PyOpenSSL (unless the backend is forced with C(select_crypto_backend)). Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13.',
 'openssl_dhparam': "Generate OpenSSL Diffie-Hellman Parameters\n\nArguments: path, state, force, backup, size\n\nThis module allows one to (re)generate OpenSSL DH-params.\nThis module uses file common arguments to specify generated file permissions.\nPlease note that the module regenerates existing DH params if they don't match the module's options. If you are concerned that this could overwrite your existing DH params, consider using the I(backup) option.",
 'openssl_pkcs12': 'Generate OpenSSL PKCS#12 archive\n\nArguments: privatekey_passphrase, src, force, maciter_size, friendly_name, privatekey_path, state, certificate_path, passphrase, other_certificates, action, path, backup, iter_size\n\nThis module allows one to (re-)generate PKCS#12.',
 'openssl_privatekey': 'Generate OpenSSL private keys\n\nArguments: force, type, curve, state, cipher, passphrase, select_crypto_backend, path, backup, size\n\nThis module allows one to (re)generate OpenSSL private keys.\nOne can generate L(RSA,https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29), L(DSA,https://en.wikipedia.org/wiki/Digital_Signature_Algorithm), L(ECC,https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) or L(EdDSA,https://en.wikipedia.org/wiki/EdDSA) private keys.\nKeys are generated in PEM format.\nPlease note that the module regenerates private keys if they don\'t match the module\'s options. In particular, if you provide another passphrase (or specify none), change the keysize, etc., the private key will be regenerated. If you are concerned that this could **overwrite your private key**, consider using the I(backup) option.\nThe module can use the cryptography Python library, or the pyOpenSSL Python library. By default, it tries to detect which one is available. This can be overridden with the I(select_crypto_backend) option. Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13."',
 'openssl_privatekey_info': 'Provide information for OpenSSL private keys\n\nArguments: select_crypto_backend, path, return_private_key_data, passphrase\n\nThis module allows one to query information on OpenSSL private keys.\nIn case the key consistency checks fail, the module will fail as this indicates a faked private key. In this case, all return variables are still returned. Note that key consistency checks are not available all key types; if none is available, C(none) is returned for C(key_is_consistent).\nIt uses the pyOpenSSL or cryptography python library to interact with OpenSSL. If both the cryptography and PyOpenSSL libraries are available (and meet the minimum version requirements) cryptography will be preferred as a backend over PyOpenSSL (unless the backend is forced with C(select_crypto_backend)). Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13.',
 'openssl_publickey': 'Generate an OpenSSL public key from its private key.\n\nArguments: privatekey_passphrase, force, format, privatekey_path, state, select_crypto_backend, path, backup\n\nThis module allows one to (re)generate OpenSSL public keys from their private keys.\nKeys are generated in PEM or OpenSSH format.\nThe module can use the cryptography Python library, or the pyOpenSSL Python library. By default, it tries to detect which one is available. This can be overridden with the I(select_crypto_backend) option. When I(format) is C(OpenSSH), the C(cryptography) backend has to be used. Please note that the PyOpenSSL backend was deprecated in Ansible 2.9 and will be removed in Ansible 2.13."',
 'openvswitch_bridge': 'Manage Open vSwitch bridges\n\nArguments: bridge, fail_mode, parent, vlan, state, set, timeout, external_ids\n\nManage Open vSwitch bridges',
 'openvswitch_db': 'Configure open vswitch database.\n\nArguments: record, state, key, timeout, table, col, value\n\nSet column values in record in database table.',
 'openvswitch_port': 'Manage Open vSwitch ports\n\nArguments: bridge, state, set, timeout, external_ids, tag, port\n\nManage Open vSwitch ports',
 'openwrt_init': 'Manage services on OpenWrt.\n\nArguments: pattern, state, enabled, name\n\nControls OpenWrt services on remote hosts.',
 'opkg': 'Package manager for OpenWrt\n\nArguments: force, state, update_cache, name\n\nManages OpenWrt packages',
 'opx_cps': 'CPS operations on networking device running Openswitch (OPX)\n\nArguments: qualifier, operation, module_name, commit_event, db, attr_data, attr_type\n\nExecutes the given operation on the YANG object, using CPS API in the networking device running OpenSwitch (OPX). It uses the YANG models provided in https://github.com/open-switch/opx-base-model.',
 'ordnance_config': 'Manage Ordnance configuration sections\n\nArguments: multiline_delimiter, src, backup, after, lines, replace, parents, defaults, save, config, match, before\n\nOrdnance router configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with these configuration sections in a deterministic way.',
 'ordnance_facts': 'Collect facts from Ordnance Virtual Routers over SSH\n\nArguments: gather_subset\n\nCollects a base set of device facts from an Ordnance Virtual router over SSH. This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'os_auth': 'Retrieve an auth token\n\nArguments: availability_zone\n\nRetrieve an auth token from an OpenStack Cloud',
 'os_client_config': 'Get OpenStack Client config\n\nArguments: clouds\n\nGet I(openstack) client config data from clouds.yaml or environment',
 'os_coe_cluster': 'Add/Remove COE cluster from OpenStack Cloud\n\nArguments: cluster_template_id, docker_volume_size, availability_zone, labels, keypair, master_count, state, flavor_id, timeout, node_count, master_flavor_id, discovery_url, name\n\nAdd or Remove COE cluster from the OpenStack Container Infra service.',
 'os_coe_cluster_template': 'Add/Remove COE cluster template from OpenStack Cloud\n\nArguments: labels, docker_volume_size, availability_zone, external_network_id, http_proxy, network_driver, image_id, volume_driver, registry_enabled, floating_ip_enabled, fixed_subnet, master_flavor_id, docker_storage_driver, name, no_proxy, server_type, state, fixed_network, https_proxy, tls_disabled, coe, keypair_id, master_lb_enabled, public, dns_nameserver, flavor_id\n\nAdd or Remove COE cluster template from the OpenStack Container Infra service.',
 'os_flavor_info': 'Retrieve information about one or more flavors\n\nArguments: vcpus, limit, name, availability_zone, ram, ephemeral\n\nRetrieve information about available OpenStack instance flavors. By default, information about ALL flavors are retrieved. Filters can be applied to get information for only matching flavors. For example, you can filter on the amount of RAM available to the flavor, or the number of virtual CPUs available to the flavor, or both. When specifying multiple filters, *ALL* filters must match on a flavor before that flavor is returned as a fact.\nThis module was called C(os_flavor_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_flavor_info) module no longer returns C(ansible_facts)!',
 'os_floating_ip': 'Add/Remove floating IP from an instance\n\nArguments: fixed_address, network, availability_zone, reuse, nat_destination, purge, state, floating_ip_address, timeout, server, wait\n\nAdd or Remove a floating IP to an instance.\nReturns the floating IP when attaching only if I(wait=true).',
 'os_group': 'Manage OpenStack Identity Groups\n\nArguments: state, description, domain_id, name, availability_zone\n\nManage OpenStack Identity Groups. Groups can be created, deleted or updated. Only the I(description) value can be updated.',
 'os_group_info': 'Retrieve info about one or more OpenStack groups\n\nArguments: domain, name, filters, availability_zone\n\nRetrieve info about a one or more OpenStack groups.',
 'os_image': 'Add/Delete images from OpenStack Cloud\n\nArguments: ramdisk, kernel, availability_zone, container_format, min_ram, owner, min_disk, is_public, properties, name, checksum, id, disk_format, filename, state, protected\n\nAdd or Remove images from the OpenStack Image Repository',
 'os_image_info': 'Retrieve information about an image within OpenStack.\n\nArguments: image, properties, availability_zone\n\nRetrieve information about a image image from OpenStack.\nThis module was called C(os_image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_image_info) module no longer returns C(ansible_facts)!',
 'os_ironic': 'Create/Delete Bare Metal Resources from OpenStack\n\nArguments: uuid, driver_info, availability_zone, nics, driver, state, ironic_url, chassis_uuid, skip_update_of_driver_password, properties, name\n\nCreate or Remove Ironic nodes from OpenStack.',
 'os_ironic_inspect': "Explicitly triggers baremetal node introspection in ironic.\n\nArguments: ironic_url, uuid, timeout, availability_zone, mac, name\n\nRequests Ironic to set a node into inspect state in order to collect metadata regarding the node. This command may be out of band or in-band depending on the ironic driver configuration. This is only possible on nodes in 'manageable' and 'available' state.",
 'os_ironic_node': 'Activate/Deactivate Bare Metal Resources from OpenStack\n\nArguments: maintenance, uuid, power, deploy, availability_zone, state, maintenance_reason, ironic_url, timeout, config_drive, instance_info, wait\n\nDeploy to nodes controlled by Ironic.',
 'os_keypair': 'Add/Delete a keypair from OpenStack\n\nArguments: public_key, state, public_key_file, name, availability_zone\n\nAdd or Remove key pair from OpenStack',
 'os_keystone_domain': 'Manage OpenStack Identity Domains\n\nArguments: state, description, enabled, name, availability_zone\n\nCreate, update, or delete OpenStack Identity domains. If a domain with the supplied name already exists, it will be updated with the new description and enabled attributes.',
 'os_keystone_domain_info': 'Retrieve information about one or more OpenStack domains\n\nArguments: name, filters, availability_zone\n\nRetrieve information about a one or more OpenStack domains\nThis module was called C(os_keystone_domain_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_keystone_domain_info) module no longer returns C(ansible_facts)!',
 'os_keystone_endpoint': 'Manage OpenStack Identity service endpoints\n\nArguments: state, service, url, endpoint_interface, region, enabled\n\nCreate, update, or delete OpenStack Identity service endpoints. If a service with the same combination of I(service), I(interface) and I(region) exist, the I(url) and I(state) (C(present) or C(absent)) will be updated.',
 'os_keystone_role': 'Manage OpenStack Identity Roles\n\nArguments: state, name, availability_zone\n\nManage OpenStack Identity Roles.',
 'os_keystone_service': 'Manage OpenStack Identity services\n\nArguments: state, name, availability_zone, service_type, enabled, description\n\nCreate, update, or delete OpenStack Identity service. If a service with the supplied name already exists, it will be updated with the new description and enabled attributes.',
 'os_listener': 'Add/Delete a listener for a load balancer from OpenStack Cloud\n\nArguments: protocol, name, availability_zone, state, timeout, protocol_port, loadbalancer, wait\n\nAdd or Remove a listener for a load balancer from the OpenStack load-balancer service.',
 'os_loadbalancer': 'Add/Delete load balancer from OpenStack Cloud\n\nArguments: name, availability_zone, vip_port, public_ip_address, vip_address, delete_public_ip, auto_public_ip, state, vip_network, timeout, public_network, vip_subnet, listeners, wait\n\nAdd or Remove load balancer from the OpenStack load-balancer service(Octavia). Load balancer update is not supported for now.',
 'os_member': 'Add/Delete a member for a pool in load balancer from OpenStack Cloud\n\nArguments: name, availability_zone, subnet_id, state, timeout, address, protocol_port, pool, wait\n\nAdd or Remove a member for a pool from the OpenStack load-balancer service.',
 'os_network': 'Creates/removes networks from OpenStack\n\nArguments: name, provider_network_type, admin_state_up, availability_zone, dns_domain, provider_physical_network, project, state, provider_segmentation_id, external, shared, port_security_enabled, mtu\n\nAdd or remove network from OpenStack.',
 'os_networks_info': 'Retrieve information about one or more OpenStack networks.\n\nArguments: name, filters, availability_zone\n\nRetrieve information about one or more networks from OpenStack.\nThis module was called C(os_networks_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_networks_info) module no longer returns C(ansible_facts)!',
 'os_nova_flavor': 'Manage OpenStack compute flavors\n\nArguments: disk, name, availability_zone, ram, ephemeral, state, vcpus, extra_specs, swap, rxtx_factor, is_public, flavorid\n\nAdd or remove flavors from OpenStack.',
 'os_nova_host_aggregate': 'Manage OpenStack host aggregates\n\nArguments: state, metadata, hosts, name, availability_zone\n\nCreate, update, or delete OpenStack host aggregates. If a aggregate with the supplied name already exists, it will be updated with the new name, new availability zone, new metadata and new list of hosts.',
 'os_object': 'Create or Delete objects and containers from OpenStack\n\nArguments: state, container, name, availability_zone, container_access, filename\n\nCreate or Delete objects and containers from OpenStack',
 'os_pool': 'Add/Delete a pool in the load balancing service from OpenStack Cloud\n\nArguments: lb_algorithm, protocol, name, availability_zone, listener, state, timeout, loadbalancer, wait\n\nAdd or Remove a pool from the OpenStack load-balancer service.',
 'os_port': "Add/Update/Delete ports from an OpenStack cloud.\n\nArguments: network, allowed_address_pairs, admin_state_up, extra_dhcp_opts, availability_zone, device_owner, name, state, no_security_groups, mac_address, port_security_enabled, vnic_type, fixed_ips, security_groups, device_id\n\nAdd, Update or Remove ports from an OpenStack cloud. A I(state) of 'present' will ensure the port is created or updated if required.",
 'os_port_info': 'Retrieve information about ports within OpenStack.\n\nArguments: port, filters, availability_zone\n\nRetrieve information about ports from OpenStack.\nThis module was called C(os_port_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_port_info) module no longer returns C(ansible_facts)!',
 'os_project': 'Manage OpenStack Projects\n\nArguments: state, name, availability_zone, enabled, domain_id, description\n\nManage OpenStack Projects. Projects can be created, updated or deleted using this module. A project will be updated if I(name) matches an existing project and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the project.',
 'os_project_access': 'Manage OpenStack compute flavors access\n\nArguments: state, resource_name, target_project_id, resource_type, availability_zone\n\nAdd or remove flavor, volume_type or other resources access from OpenStack.',
 'os_project_info': 'Retrieve information about one or more OpenStack projects\n\nArguments: domain, name, filters, availability_zone\n\nRetrieve information about a one or more OpenStack projects\nThis module was called C(os_project_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_project_info) module no longer returns C(ansible_facts)!',
 'os_quota': 'Manage OpenStack Quotas\n\nArguments: snapshots_lvm, server_groups, availability_zone, ram, snapshots, instances, backups, fixed_ips, port, subnet, per_volume_gigabytes, network, floatingip, volumes_lvm, floating_ips, properties, security_group_rule, state, injected_files, gigabytes_lvm, injected_path_size, gigabytes, backup_gigabytes, subnetpool, key_pairs, injected_file_size, cores, rbac_policy, pool, name, server_group_members, volumes, security_group, router, loadbalancer\n\nManage OpenStack Quotas. Quotas can be created, updated or deleted using this module. A quota will be updated if matches an existing project and is present.',
 'os_recordset': 'Manage OpenStack DNS recordsets\n\nArguments: name, zone, availability_zone, records, state, ttl, recordset_type, description\n\nManage OpenStack DNS recordsets. Recordsets can be created, deleted or updated. Only the I(records), I(description), and I(ttl) values can be updated.',
 'os_router': 'Create or delete routers from OpenStack\n\nArguments: enable_snat, network, admin_state_up, interfaces, availability_zone, name, project, state, external_fixed_ips\n\nCreate or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name uniqueness to be more user friendly.',
 'os_security_group': 'Add/Delete security groups from an OpenStack cloud.\n\nArguments: project, state, description, name, availability_zone\n\nAdd or Remove security groups from an OpenStack cloud.',
 'os_security_group_rule': 'Add/Delete rule from an existing security group\n\nArguments: direction, protocol, availability_zone, remote_ip_prefix, port_range_max, project, state, port_range_min, ethertype, security_group, remote_group\n\nAdd or Remove rule from an existing security group',
 'os_server': 'Create/Delete Compute Instances from OpenStack\n\nArguments: volumes, name, availability_zone, key_name, image, image_exclude, boot_volume, flavor_include, meta, terminate_volume, flavor, delete_fip, security_groups, scheduler_hints, boot_from_volume, userdata, network, nics, floating_ips, flavor_ram, volume_size, state, auto_ip, config_drive, timeout, wait, reuse_ips, floating_ip_pools\n\nCreate or Remove compute instances from OpenStack.',
 'os_server_action': "Perform actions on Compute Instances from OpenStack\n\nArguments: timeout, availability_zone, action, image, wait, server\n\nPerform server actions on an existing compute instance from OpenStack. This module does not return any data other than changed true/false. When I(action) is 'rebuild', then I(image) parameter is required.",
 'os_server_group': 'Manage OpenStack server groups\n\nArguments: state, name, policies, availability_zone\n\nAdd or remove server groups from OpenStack.',
 'os_server_info': 'Retrieve information about one or more compute instances\n\nArguments: detailed, server, filters, all_projects, availability_zone\n\nRetrieve information about server instances from OpenStack.\nThis module was called C(os_server_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_server_info) module no longer returns C(ansible_facts)!',
 'os_server_metadata': 'Add/Update/Delete Metadata in Compute Instances from OpenStack\n\nArguments: state, meta, server, availability_zone\n\nAdd, Update or Remove metadata in compute instances from OpenStack.',
 'os_server_volume': "Attach/Detach Volumes from OpenStack VM's\n\nArguments: volume, device, state, server, availability_zone\n\nAttach or Detach volumes from OpenStack VM's",
 'os_stack': 'Add/Remove Heat Stack\n\nArguments: rollback, name, parameters, availability_zone, environment, state, tag, timeout, template\n\nAdd or Remove a Stack to an OpenStack Heat',
 'os_subnet': 'Add/Remove subnet to an OpenStack network\n\nArguments: no_gateway_ip, use_default_subnetpool, availability_zone, ipv6_ra_mode, extra_specs, ipv6_address_mode, cidr, network_name, allocation_pool_end, name, enable_dhcp, dns_nameservers, project, state, allocation_pool_start, gateway_ip, ip_version, host_routes\n\nAdd or Remove a subnet to an OpenStack network',
 'os_subnets_info': 'Retrieve information about one or more OpenStack subnets.\n\nArguments: name, filters, availability_zone\n\nRetrieve information about one or more subnets from OpenStack.\nThis module was called C(os_subnets_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_subnets_info) module no longer returns C(ansible_facts)!',
 'os_user': 'Manage OpenStack Identity Users\n\nArguments: update_password, description, availability_zone, enabled, default_project, state, domain, password, email, name\n\nManage OpenStack Identity users. Users can be created, updated or deleted using this module. A user will be updated if I(name) matches an existing user and I(state) is present. The value for I(name) cannot be updated without deleting and re-creating the user.',
 'os_user_group': 'Associate OpenStack Identity users and groups\n\nArguments: state, group, user, availability_zone\n\nAdd and remove users from groups',
 'os_user_info': 'Retrieve information about one or more OpenStack users\n\nArguments: domain, name, filters, availability_zone\n\nRetrieve information about a one or more OpenStack users\nThis module was called C(os_user_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(os_user_info) module no longer returns C(ansible_facts)!',
 'os_user_role': 'Associate OpenStack Identity users and roles\n\nArguments: project, domain, group, user, availability_zone, role, state\n\nGrant and revoke roles in either project or domain context for OpenStack Identity Users.',
 'os_volume': 'Create/Delete Cinder Volumes\n\nArguments: size, display_name, availability_zone, image, volume_type, volume, state, display_description, snapshot_id, scheduler_hints, metadata\n\nCreate or Remove cinder block storage volumes',
 'os_volume_snapshot': 'Create/Delete Cinder Volume Snapshots\n\nArguments: volume, state, force, availability_zone, display_name, display_description\n\nCreate or Delete cinder block storage volume snapshots',
 'os_zone': 'Manage OpenStack DNS zones\n\nArguments: masters, description, availability_zone, state, ttl, zone_type, email, name\n\nManage OpenStack DNS zones. Zones can be created, deleted or updated. Only the I(email), I(description), I(ttl) and I(masters) values can be updated.',
 'osx_defaults': 'Manage macOS user defaults\n\nArguments: domain, host, value, state, key, path, type, array_add\n\nosx_defaults allows users to read, write, and delete macOS user defaults from Ansible scripts.\nmacOS applications and other programs use the defaults system to record user preferences and other information that must be maintained when the applications are not running (such as default font for new documents, or the position of an Info panel).',
 'ovh_ip_failover': 'Manage OVH IP failover address\n\nArguments: endpoint, name, service, wait_task_completion, application_key, application_secret, timeout, consumer_key, wait_completion\n\nManage OVH (French European hosting provider) IP Failover Address. For now, this module can only be used to move an ip failover (or failover block) between services',
 'ovh_ip_loadbalancing_backend': 'Manage OVH IP LoadBalancing backends\n\nArguments: endpoint, name, weight, probe, application_key, state, application_secret, timeout, consumer_key, backend\n\nManage OVH (French European hosting provider) LoadBalancing IP backends',
 'ovirt': 'oVirt/RHEV platform management\n\nArguments: instance_mem, instance_cores, instance_cpus, image, instance_hostname, instance_disksize, instance_nic, user, instance_network, instance_type, password, sdomain, instance_os, instance_ip, zone, disk_alloc, url, region, instance_dns, instance_name, instance_netmask, state, instance_key, instance_domain, instance_rootpw, resource_type, disk_int\n\nThis module only supports oVirt/RHEV version 3. A newer module M(ovirt_vm) supports oVirt/RHV version 4.\nAllows you to create new instances, either from scratch or an image, in addition to deleting or stopping instances on the oVirt/RHEV platform.',
 'ovirt_affinity_group': 'Module to manage affinity groups in oVirt/RHV\n\nArguments: vm_enforcing, name, host_rule, cluster, state, hosts, vm_rule, host_enforcing, vms, description\n\nThis module manage affinity groups in oVirt/RHV. It can also manage assignments of those groups to VMs.',
 'ovirt_affinity_label': 'Module to manage affinity labels in oVirt/RHV\n\nArguments: cluster, state, hosts, name, vms\n\nThis module manage affinity labels in oVirt/RHV. It can also manage assignments of those labels to hosts and VMs.',
 'ovirt_affinity_label_info': 'Retrieve information about one or more oVirt/RHV affinity labels\n\nArguments: host, name, vm\n\nRetrieve information about one or more oVirt/RHV affinity labels.\nThis module was called C(ovirt_affinity_label_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_affinity_label_info) module no longer returns C(ansible_facts)!',
 'ovirt_api_info': 'Retrieve information about the oVirt/RHV API\n\nArguments: \n\nRetrieve information about the oVirt/RHV API.\nThis module was called C(ovirt_api_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_api_info) module no longer returns C(ansible_facts)!',
 'ovirt_auth': "Module to manage authentication to oVirt/RHV\n\nArguments: username, hostname, ca_file, url, insecure, kerberos, compress, state, headers, token, timeout, password\n\nThis module authenticates to oVirt/RHV engine and creates SSO token, which should be later used in all other oVirt/RHV modules, so all modules don't need to perform login and logout. This module returns an Ansible fact called I(ovirt_auth). Every module can use this fact as C(auth) parameter, to perform authentication.",
 'ovirt_cluster': 'Module to manage clusters in oVirt/RHV\n\nArguments: comment, ha_reservation, fence_skip_if_connectivity_broken, mac_pool, virt, threads_as_cores, gluster, vm_reason, migration_bandwidth_limit, switch_type, data_center, ksm_numa, id, description, cpu_arch, rng_sources, network, gluster_tuned_profile, scheduling_policy_properties, state, fence_skip_if_gluster_quorum_not_met, ksm, external_network_providers, migration_compressed, ballooning, migration_auto_converge, fence_enabled, migration_policy, firewall_type, fence_skip_if_gluster_bricks_up, resilience_policy, fence_connectivity_threshold, spice_proxy, memory_policy, migration_bandwidth, fence_skip_if_sd_active, scheduling_policy, compatibility_version, serial_policy_value, name, host_reason, cpu_type, serial_policy, trusted_service\n\nModule to manage clusters in oVirt/RHV',
 'ovirt_cluster_info': 'Retrieve information about one or more oVirt/RHV clusters\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV clusters.\nThis module was called C(ovirt_cluster_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_cluster_info) module no longer returns C(ansible_facts)!',
 'ovirt_datacenter': 'Module to manage data centers in oVirt/RHV\n\nArguments: comment, compatibility_version, force, description, mac_pool, local, state, quota_mode, id, name\n\nModule to manage data centers in oVirt/RHV',
 'ovirt_datacenter_info': 'Retrieve information about one or more oVirt/RHV datacenters\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV datacenters.\nThis module was called C(ovirt_datacenter_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_datacenter_info) module no longer returns C(ansible_facts)!',
 'ovirt_disk': 'Module to manage Virtual Machine and floating disks in oVirt/RHV\n\nArguments: profile, vm_name, storage_domains, activate, force, description, sparsify, wipe_after_delete, logical_unit, quota_id, host, download_image_path, content_type, interface, vm_id, id, size, storage_domain, openstack_volume_type, bootable, format, upload_image_path, name, state, shareable, sparse, image_provider\n\nModule to manage Virtual Machine and floating disks in oVirt/RHV.',
 'ovirt_disk_info': 'Retrieve information about one or more oVirt/RHV disks\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV disks.\nThis module was called C(ovirt_disk_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_disk_info) module no longer returns C(ansible_facts)!',
 'ovirt_event': 'Create or delete an event in oVirt/RHV\n\nArguments: origin, custom_id, storage_domain, description, state, vm, cluster, host, user, template, data_center, id, severity\n\nThis module can be used to create or delete an event in oVirt/RHV.',
 'ovirt_event_info': 'This module can be used to retrieve information about one or more oVirt/RHV events\n\nArguments: headers, search, query, max, from_, wait, case_sensitive\n\nRetrieve information about one or more oVirt/RHV events.\nThis module was called C(ovirt_event_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_event_info) module no longer returns C(ansible_facts)!',
 'ovirt_external_provider': 'Module to manage external providers in oVirt/RHV\n\nArguments: username, read_only, name, url, tenant_name, state, authentication_url, data_center, authentication_keys, password, type, network_type, description\n\nModule to manage external providers in oVirt/RHV',
 'ovirt_external_provider_info': 'Retrieve information about one or more oVirt/RHV external providers\n\nArguments: type, name\n\nRetrieve information about one or more oVirt/RHV external providers.\nThis module was called C(ovirt_external_provider_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_external_provider_info) module no longer returns C(ansible_facts)!',
 'ovirt_group': 'Module to manage groups in oVirt/RHV\n\nArguments: authz_name, state, namespace, name\n\nModule to manage groups in oVirt/RHV',
 'ovirt_group_info': 'Retrieve information about one or more oVirt/RHV groups\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV groups.\nThis module was called C(ovirt_group_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_group_info) module no longer returns C(ansible_facts)!',
 'ovirt_host': 'Module to manage hosts in oVirt/RHV\n\nArguments: comment, activate, force, public_key, address, power_management_enabled, cluster, hosted_engine, override_iptables, password, id, vgpu_placement, check_upgrade, reboot_after_upgrade, kdump_integration, name, spm_priority, iscsi, kernel_params, state, timeout, override_display\n\nModule to manage hosts in oVirt/RHV',
 'ovirt_host_info': 'Retrieve information about one or more oVirt/RHV hosts\n\nArguments: all_content, pattern, cluster_version\n\nRetrieve information about one or more oVirt/RHV hosts.\nThis module was called C(ovirt_host_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_host_info) module no longer returns C(ansible_facts)!',
 'ovirt_host_network': 'Module to manage host networks in oVirt/RHV\n\nArguments: name, labels, networks, state, interface, save, sync_networks, check, bond\n\nModule to manage host networks in oVirt/RHV.',
 'ovirt_host_pm': 'Module to manage power management of hosts in oVirt/RHV\n\nArguments: username, password, name, order, port, state, address, encrypt_options, type, options\n\nModule to manage power management of hosts in oVirt/RHV.',
 'ovirt_host_storage_info': 'Retrieve information about one or more oVirt/RHV HostStorages (applicable only for block storage)\n\nArguments: fcp, host, iscsi\n\nRetrieve information about one or more oVirt/RHV HostStorages (applicable only for block storage).\nThis module was called C(ovirt_host_storage_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_host_storage_info) module no longer returns C(ansible_facts)!',
 'ovirt_instance_type': 'Module to manage Instance Types in oVirt/RHV\n\nArguments: graphical_console, rng_device, memory_guaranteed, virtio_scsi, placement_policy, boot_devices, serial_console, usb_support, rng_period, host, io_threads, cpu_threads, watchdog, memory_max, id, cpu_sockets, high_availability, operating_system, soundcard_enabled, name, rng_bytes, high_availability_priority, nics, description, cpu_pinning, cpu_cores, ballooning_enabled, cpu_mode, state, smartcard_enabled, memory\n\nThis module manages whole lifecycle of the Instance Type in oVirt/RHV.',
 'ovirt_job': 'Module to manage jobs in oVirt/RHV\n\nArguments: state, steps, description\n\nThis module manage jobs in oVirt/RHV. It can also manage steps of the job.',
 'ovirt_mac_pool': 'Module to manage MAC pools in oVirt/RHV\n\nArguments: ranges, allow_duplicates, state, description, id, name\n\nThis module manage MAC pools in oVirt/RHV.',
 'ovirt_network': 'Module to manage logical networks in oVirt/RHV\n\nArguments: comment, external_provider, description, mtu, state, vm_network, data_center, clusters, vlan_tag, label, id, name\n\nModule to manage logical networks in oVirt/RHV',
 'ovirt_network_info': 'Retrieve information about one or more oVirt/RHV networks\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV networks.\nThis module was called C(ovirt_network_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_network_info) module no longer returns C(ansible_facts)!',
 'ovirt_nic': 'Module to manage network interfaces of Virtual Machines in oVirt/RHV\n\nArguments: profile, network, vm, id, state, template, mac_address, interface, linked, name\n\nModule to manage network interfaces of Virtual Machines in oVirt/RHV.',
 'ovirt_nic_info': 'Retrieve information about one or more oVirt/RHV virtual machine network interfaces\n\nArguments: vm, name\n\nRetrieve information about one or more oVirt/RHV virtual machine network interfaces.\nThis module was called C(ovirt_nic_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_nic_info) module no longer returns C(ansible_facts)!',
 'ovirt_permission': 'Module to manage permissions of users/groups in oVirt/RHV\n\nArguments: authz_name, object_type, namespace, state, object_id, group_name, object_name, role, quota_name, user_name\n\nModule to manage permissions of users/groups in oVirt/RHV.',
 'ovirt_permission_info': 'Retrieve information about one or more oVirt/RHV permissions\n\nArguments: namespace, group_name, authz_name, user_name\n\nRetrieve information about one or more oVirt/RHV permissions.\nThis module was called C(ovirt_permission_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_permission_info) module no longer returns C(ansible_facts)!',
 'ovirt_quota': 'Module to manage datacenter quotas in oVirt/RHV\n\nArguments: description, cluster_grace, cluster_threshold, state, storage_grace, storage_threshold, data_center, clusters, storages, id, name\n\nModule to manage datacenter quotas in oVirt/RHV',
 'ovirt_quota_info': 'Retrieve information about one or more oVirt/RHV quotas\n\nArguments: name, data_center\n\nRetrieve information about one or more oVirt/RHV quotas.\nThis module was called C(ovirt_quota_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_quota_info) module no longer returns C(ansible_facts)!',
 'ovirt_role': 'Module to manage roles in oVirt/RHV\n\nArguments: state, description, permits, administrative, id, name\n\nModule to manage roles in oVirt/RHV.',
 'ovirt_scheduling_policy_info': 'Retrieve information about one or more oVirt scheduling policies\n\nArguments: id, name\n\nRetrieve information about one or more oVirt scheduling policies.\nThis module was called C(ovirt_scheduling_policy_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_scheduling_policy_info) module no longer returns C(ansible_facts)!',
 'ovirt_snapshot': 'Module to manage Virtual Machine Snapshots in oVirt/RHV\n\nArguments: vm_name, description, use_memory, upload_image_path, disk_id, keep_days_old, state, download_image_path, snapshot_id, disk_name\n\nModule to manage Virtual Machine Snapshots in oVirt/RHV',
 'ovirt_snapshot_info': 'Retrieve information about one or more oVirt/RHV virtual machine snapshots\n\nArguments: description, vm, snapshot_id\n\nRetrieve information about one or more oVirt/RHV virtual machine snapshots.\nThis module was called C(ovirt_snapshot_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_snapshot_info) module no longer returns C(ansible_facts)!',
 'ovirt_storage_connection': 'Module to manage storage connections in oVirt\n\nArguments: username, force, mount_options, address, nfs_timeout, path, password, nfs_version, target, id, storage, nfs_retrans, port, state, vfs_type, type\n\nModule to manage storage connections in oVirt',
 'ovirt_storage_domain': 'Module to manage storage domains in oVirt/RHV\n\nArguments: comment, fcp, description, format, warning_low_space, glusterfs, localfs, discard_after_delete, managed_block_storage, data_center, id, domain_function, name, critical_space_action_blocker, iscsi, posixfs, host, state, nfs, wipe_after_delete, destroy, backup\n\nModule to manage storage domains in oVirt/RHV',
 'ovirt_storage_domain_info': 'Retrieve information about one or more oVirt/RHV storage domains\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV storage domains.\nThis module was called C(ovirt_storage_domain_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_storage_domain_info) module no longer returns C(ansible_facts)!',
 'ovirt_storage_template_info': 'Retrieve information about one or more oVirt/RHV templates relate to a storage domain.\n\nArguments: unregistered, storage_domain, max\n\nRetrieve information about one or more oVirt/RHV templates relate to a storage domain.\nThis module was called C(ovirt_storage_template_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_storage_template_info) module no longer returns C(ansible_facts)!',
 'ovirt_storage_vm_info': 'Retrieve information about one or more oVirt/RHV virtual machines relate to a storage domain.\n\nArguments: unregistered, storage_domain, max\n\nRetrieve information about one or more oVirt/RHV virtual machines relate to a storage domain.\nThis module was called C(ovirt_storage_vm_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_storage_vm_info) module no longer returns C(ansible_facts)!',
 'ovirt_tag': 'Module to manage tags in oVirt/RHV\n\nArguments: state, hosts, description, parent, name, id, vms\n\nThis module manage tags in oVirt/RHV. It can also manage assignments of those tags to entities.',
 'ovirt_tag_info': 'Retrieve information about one or more oVirt/RHV tags\n\nArguments: host, name, vm\n\nRetrieve information about one or more oVirt/RHV tags.\nThis module was called C(ovirt_tag_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_tag_info) module no longer returns C(ansible_facts)!',
 'ovirt_template': 'Module to manage virtual machine templates in oVirt/RHV\n\nArguments: exclusive, cpu_profile, cloud_init_nics, vm, cluster, io_threads, seal, timezone, memory_max, id, image_provider, storage_domain, domain_mappings, export_domain, nics, template_image_disk_name, sysprep, ballooning_enabled, state, version, clone_name, memory, clone_permissions, vnic_profile_mappings, image_disk, usb_support, sso, role_mappings, soundcard_enabled, description, operating_system, name, cloud_init, memory_guaranteed, smartcard_enabled, allow_partial_import, cluster_mappings\n\nModule to manage virtual machine templates in oVirt/RHV.',
 'ovirt_template_info': 'Retrieve information about one or more oVirt/RHV templates\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV templates.\nThis module was called C(ovirt_template_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_template_info) module no longer returns C(ansible_facts)!',
 'ovirt_user': 'Module to manage users in oVirt/RHV\n\nArguments: authz_name, state, namespace, name\n\nModule to manage users in oVirt/RHV.',
 'ovirt_user_info': 'Retrieve information about one or more oVirt/RHV users\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV users.\nThis module was called C(ovirt_user_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_user_info) module no longer returns C(ansible_facts)!',
 'ovirt_vm': 'Module to manage Virtual Machines in oVirt/RHV\n\nArguments: comment, exclusive, cloud_init_nics, boot_menu, xen, custom_compatibility_version, instance_type, graphical_console, snapshot_name, force_migrate, watchdog, memory_max, cpu_sockets, high_availability, storage_domain, domain_mappings, disk_format, cpu_cores, ballooning_enabled, memory_guaranteed, export_ova, memory, clone_permissions, type, initrd_path, lease, vnic_profile_mappings, lun_mappings, serial_console, reassign_bad_macs, sso, cpu_threads, quota_id, numa_nodes, ticket, use_latest_template_version, affinity_group_mappings, operating_system, serial_policy_value, name, cpu_pinning, cpu_shares, affinity_label_mappings, next_run, disks, force, placement_policy, migrate, usb_support, cluster, io_threads, kernel_params_persist, timezone, id, vmware, snapshot_vm, soundcard_enabled, high_availability_priority, export_domain, nics, custom_properties, sysprep, cpu_mode, state, template, cd_iso, cloud_init_persist, kernel_path, rng_device, description, boot_devices, clone, kvm, host, role_mappings, serial_policy, stateless, cloud_init, template_version, numa_tune_mode, kernel_params, host_devices, smartcard_enabled, allow_partial_import, cluster_mappings, delete_protected\n\nThis module manages whole lifecycle of the Virtual Machine(VM) in oVirt/RHV.\nSince VM can hold many states in oVirt/RHV, this see notes to see how the states of the VM are handled.',
 'ovirt_vm_info': 'Retrieve information about one or more oVirt/RHV virtual machines\n\nArguments: all_content, pattern, case_sensitive, next_run, max\n\nRetrieve information about one or more oVirt/RHV virtual machines.\nThis module was called C(ovirt_vm_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_vm_info) module no longer returns C(ansible_facts)!',
 'ovirt_vmpool': 'Module to manage VM pools in oVirt/RHV\n\nArguments: comment, description, vm, name, vm_per_user, cluster, state, prestarted, template, type, id, vm_count\n\nModule to manage VM pools in oVirt/RHV.',
 'ovirt_vmpool_info': 'Retrieve information about one or more oVirt/RHV vmpools\n\nArguments: pattern\n\nRetrieve information about one or more oVirt/RHV vmpools.\nThis module was called C(ovirt_vmpool_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(ovirt_vmpool_info) module no longer returns C(ansible_facts)!',
 'ovirt_vnic_profile': 'Module to manage vNIC profile of network in oVirt/RHV\n\nArguments: migratable, qos, pass_through, description, name, state, custom_properties, data_center, network_filter, port_mirroring, network\n\nModule to manage vNIC profile of network in oVirt/RHV',
 'pacemaker_cluster': 'Manage pacemaker clusters\n\nArguments: node, state, force, timeout\n\nThis module can manage a pacemaker cluster and nodes from Ansible using the pacemaker cli.',
 'package': 'Generic OS package manager\n\nArguments: state, use, name\n\nInstalls, upgrade and removes packages using the underlying OS package manager.\nFor Windows targets, use the M(win_package) module instead.',
 'package_facts': 'package information as facts\n\nArguments: manager, strategy\n\nReturn information about installed packages as facts',
 'packet_device': 'Manage a bare metal server in the Packet Host.\n\nArguments: features, facility, wait_for_public_IPv, auth_token, count_offset, user_data, always_pxe, hostnames, plan, ipxe_script_url, count, operating_system, locked, device_ids, state, wait_timeout, project_id\n\nManage a bare metal server in the Packet Host (a "device" in the API terms).\nWhen the machine is created it can optionally wait for public IP address, or for active state.\nThis module has a dependency on packet >= 1.0.\nAPI is documented at U(https://www.packet.net/developers/api/devices).',
 'packet_sshkey': 'Create/delete an SSH key in Packet host.\n\nArguments: state, key, fingerprint, id, auth_token, key_file, label\n\nCreate/delete an SSH key in Packet host.\nAPI is documented at U(https://www.packet.net/help/api/#page:ssh-keys,header:ssh-keys-ssh-keys-post).',
 'pacman': 'Manage packages with I(pacman)\n\nArguments: upgrade, force, name, recurse, extra_args, state, update_cache, update_cache_extra_args, upgrade_extra_args\n\nManage packages with the I(pacman) package manager, which is used by Arch Linux and its variants.',
 'pagerduty': 'Create PagerDuty maintenance windows\n\nArguments: name, service, state, minutes, window_id, hours, token, user, requester_id, validate_certs, desc\n\nThis module will let you create PagerDuty maintenance windows',
 'pagerduty_alert': 'Trigger, acknowledge or resolve PagerDuty incidents\n\nArguments: client_url, name, state, incident_key, client, integration_key, service_id, service_key, api_key, desc\n\nThis module will let you trigger, acknowledge or resolve a PagerDuty incident by sending events',
 'pam_limits': 'Modify Linux PAM limits\n\nArguments: comment, use_max, domain, dest, value, use_min, limit_item, limit_type, backup\n\nThe C(pam_limits) module modifies PAM limits. The default file is C(/etc/security/limits.conf). For the full documentation, see C(man 5 limits.conf).',
 'pamd': "Manage PAM Modules\n\nArguments: control, new_module_path, name, type, new_type, state, new_control, module_path, path, backup, module_arguments\n\nEdit PAM service's type, control, module path and module arguments.\nIn order for a PAM rule to be modified, the type, control and module_path must match an existing rule.  See man(5) pam.d for details.",
 'parted': 'Configure block device partitions\n\nArguments: part_start, part_end, name, align, number, label, state, part_type, flags, device, unit\n\nThis module allows configuring block device partition using the C(parted) command line tool. For a full description of the fields and the options check the GNU parted manual.',
 'patch': 'Apply patch files using the GNU patch tool\n\nArguments: src, remote_src, dest, basedir, binary, state, strip, backup\n\nApply patch files using the GNU patch tool.',
 'pause': 'Pause playbook execution\n\nArguments: seconds, minutes, prompt, echo\n\nPauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default behavior is to pause with a prompt.\nTo pause/wait/sleep per host, use the M(wait_for) module.\nYou can use C(ctrl+c) if you wish to advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early press C(ctrl+c) and then C(c). To abort a playbook press C(ctrl+c) and then C(a).\nThe pause module integrates into async/parallelized playbooks without any special considerations (see Rolling Updates). When using pauses with the C(serial) playbook parameter (as in rolling updates) you are only prompted once for the current group of hosts.\nThis module is also supported for Windows targets.',
 'pear': 'Manage pear/pecl packages\n\nArguments: state, executable, name\n\nManage PHP packages with the pear package manager.',
 'pids': 'Retrieves process IDs list if the process is running otherwise return empty list\n\nArguments: name\n\nRetrieves a list of PIDs of given process name in Ansible controller/controlled machines.Returns an empty list if no process in that name exists.',
 'ping': 'Try to connect to host, verify a usable python and return C(pong) on success\n\nArguments: data\n\nA trivial test module, this module always returns C(pong) on successful contact. It does not make sense in playbooks, but it is useful from C(/usr/bin/ansible) to verify the ability to login and that a usable Python is configured.\nThis is NOT ICMP ping, this is just a trivial test module that requires Python on the remote-node.\nFor Windows targets, use the M(win_ping) module instead.\nFor Network targets, use the M(net_ping) module instead.',
 'pingdom': 'Pause/unpause Pingdom alerts\n\nArguments: checkid, passwd, state, uid, key\n\nThis module will let you pause/unpause Pingdom alerts',
 'pip': 'Manages Python library dependencies\n\nArguments: virtualenv, virtualenv_site_packages, virtualenv_command, chdir, requirements, name, virtualenv_python, editable, umask, executable, extra_args, state, version\n\nManage Python library dependencies. To use this module, one of the following keys is required: C(name) or C(requirements).',
 'pip_package_info': 'pip package information\n\nArguments: clients\n\nReturn information about installed pip packages',
 'pkg5': 'Manages packages with the Solaris 11 Image Packaging System\n\nArguments: accept_licenses, state, be_name, name, refresh\n\nIPS packages are the native packages in Solaris 11 and higher.',
 'pkg5_publisher': 'Manages Solaris 11 Image Packaging System publishers\n\nArguments: origin, state, name, mirror, enabled, sticky\n\nIPS packages are the native packages in Solaris 11 and higher.\nThis modules will configure which publishers a client will download IPS packages from.',
 'pkgin': 'Package manager for SmartOS, NetBSD, et al.\n\nArguments: state, upgrade, force, name, full_upgrade, update_cache, clean\n\nThe standard package manager for SmartOS, but also usable on NetBSD or any OS that uses C(pkgsrc).  (Home: U(http://pkgin.net/))',
 'pkgng': "Package manager for FreeBSD >= 9.0\n\nArguments: chroot, name, cached, pkgsite, state, rootdir, autoremove, jail, annotation\n\nManage binary packages for FreeBSD using 'pkgng' which is available in versions after 9.0.",
 'pkgutil': 'Manage CSW-Packages on Solaris\n\nArguments: site, state, update_catalog, name\n\nManages CSW packages (SVR4 format) on Solaris 10 and 11.\nThese were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.\nPkgutil is an advanced packaging system, which resolves dependency on installation. It is designed for CSW packages.',
 'pn_access_list': 'CLI command to create/delete access-list\n\nArguments: state, pn_name, pn_cliswitch, pn_scope\n\nThis module can be used to create and delete an access list.',
 'pn_access_list_ip': 'CLI command to add/remove access-list-ip\n\nArguments: state, pn_name, pn_cliswitch, pn_ip\n\nThis modules can be used to add and remove IPs associated with access list.',
 'pn_admin_service': 'CLI command to modify admin-service\n\nArguments: pn_web_port, pn_web, pn_net_api, pn_web_ssl, pn__if, pn_icmp, state, pn_web_ssl_port, pn_nfs, pn_ssh, pn_web_log, pn_cliswitch, pn_snmp\n\nThis module is used to modify services on the server-switch.',
 'pn_admin_session_timeout': 'CLI command to modify admin-session-timeout\n\nArguments: state, pn_timeout, pn_cliswitch\n\nThis module can be used to modify admin session timeout.',
 'pn_admin_syslog': 'CLI command to create/modify/delete admin-syslog\n\nArguments: pn_name, pn_host, pn_scope, state, pn_message_format, pn_transport, pn_cliswitch, pn_port\n\nThis module can be used to create the scope and other parameters of syslog event collection.\nThis module can be used to modify parameters of syslog event collection.\nThis module can be used to delete the scope and other parameters of syslog event collection.',
 'pn_connection_stats_settings': 'CLI command to modify connection-stats-settings\n\nArguments: pn_connection_max_memory, pn_connection_backup_enable, pn_connection_backup_interval, pn_connection_stats_log_interval, pn_enable, pn_connection_stats_log_disk_space, pn_client_server_stats_log_enable, pn_client_server_stats_max_memory, pn_connection_stats_max_memory, pn_client_server_stats_log_interval, pn_fabric_connection_max_memory, state, pn_cliswitch, pn_service_stat_max_memory, pn_fabric_connection_backup_enable, pn_fabric_connection_backup_interval, pn_connection_stats_log_enable, pn_client_server_stats_log_disk_space\n\nThis module can be used to modify the settings for collecting statistical data about connections.',
 'pn_cpu_class': 'CLI command to create/modify/delete cpu-class\n\nArguments: pn_rate_limit, pn_name, pn_scope, pn_cliswitch, state, pn_hog_protect\n\nThis module can be used to create, modify and delete CPU class information.',
 'pn_cpu_mgmt_class': 'CLI command to modify cpu-mgmt-class\n\nArguments: state, pn_name, pn_cliswitch, pn_rate_limit, pn_burst_size\n\nThis module can we used to update mgmt port ingress policers.',
 'pn_dhcp_filter': 'CLI command to create/modify/delete dhcp-filter\n\nArguments: pn_trusted_ports, state, pn_name, pn_cliswitch\n\nThis module can be used to create, delete and modify a DHCP filter config.',
 'pn_dscp_map': 'CLI command to create/delete dscp-map\n\nArguments: state, pn_name, pn_cliswitch, pn_scope\n\nThis module can be used to create a DSCP priority mapping table.',
 'pn_dscp_map_pri_map': 'CLI command to modify dscp-map-pri-map\n\nArguments: pn_dsmap, pn_pri, pn_name, state, pn_cliswitch\n\nThis module can be used to update priority mappings in tables.',
 'pn_fabric_local': 'CLI command to modify fabric-local\n\nArguments: pn_fabric_advertisement_network, pn_fabric_network, state, pn_vlan, pn_control_network, pn_cliswitch\n\nThis module can be used to modify fabric local information.',
 'pn_igmp_snooping': 'CLI command to modify igmp-snooping\n\nArguments: pn_enable_vlans, pn_scope, pn_query_interval, pn_igmpv2_vlans, pn_query_max_response_time, pn_igmpv3_vlans, pn_enable, state, pn_no_snoop_linklocal_vlans, pn_vxlan, pn_cliswitch, pn_snoop_linklocal_vlans\n\nThis module can be used to modify Internet Group Management Protocol (IGMP) snooping.',
 'pn_ipv6security_raguard': 'CLI command to create/modify/delete ipv6security-raguard\n\nArguments: state, pn_name, pn_router_priority, pn_access_list, pn_prefix_list, pn_cliswitch, pn_device\n\nThis module can be used to add ipv6 RA Guard Policy, Update ipv6 RA guard Policy and Remove ipv6 RA Guard Policy.',
 'pn_ipv6security_raguard_port': 'CLI command to add/remove ipv6security-raguard-port\n\nArguments: pn_name, state, pn_ports, pn_cliswitch\n\nThis module can be used to add ports to RA Guard Policy and remove ports to RA Guard Policy.',
 'pn_ipv6security_raguard_vlan': 'CLI command to add/remove ipv6security-raguard-vlan\n\nArguments: state, pn_name, pn_cliswitch, pn_vlans\n\nThis module can be used to Add vlans to RA Guard Policy and Remove vlans to RA Guard Policy.',
 'pn_log_audit_exception': 'CLI command to create/delete an audit exception\n\nArguments: state, pn_access, pn_scope, pn_audit_type, pn_cliswitch, pn_pattern\n\nThis module can be used to create an audit exception and delete an audit exception.',
 'pn_port_config': 'CLI command to modify port-config\n\nArguments: pn_vxlan_termination, pn_allowed_tpid, pn_dscp_map, pn_loopback, pn_reflect, pn_egress_rate_limit, pn_enable, pn_port_mac_address, pn_autoneg, pn_crc_check_enable, pn_speed, pn_eth_mode, pn_description, pn_mirror_only, pn_intf, pn_send_port, pn_host_enable, pn_jumbo, pn_routing, pn_fabric_guard, pn_defer_bringup, pn_pause, pn_loop_vlans, state, pn_lacp_priority, pn_edge_switch, pn_port, pn_cliswitch, pn_local_switching\n\nThis module can be used to modify a port configuration.',
 'pn_port_cos_bw': 'CLI command to modify port-cos-bw\n\nArguments: pn_weight, state, pn_min_bw_guarantee, pn_cos, pn_max_bw_limit, pn_cliswitch, pn_port\n\nThis module can be used to update bw settings for CoS queues.',
 'pn_port_cos_rate_setting': 'CLI command to modify port-cos-rate-setting\n\nArguments: pn_cos0_rate, pn_cos3_rate, pn_cos7_rate, state, pn_cos2_rate, pn_cos4_rate, pn_cos1_rate, pn_cos6_rate, pn_cos5_rate, pn_cliswitch, pn_port\n\nThis modules can be used to update the port cos rate limit.',
 'pn_prefix_list': 'CLI command to create/delete prefix-list\n\nArguments: state, pn_name, pn_cliswitch, pn_scope\n\nThis module can be used to create or delete prefix list.',
 'pn_prefix_list_network': 'CLI command to add/remove prefix-list-network\n\nArguments: state, pn_name, pn_netmask, pn_cliswitch, pn_network\n\nThis module is used to add network associated with prefix list and remove networks associated with prefix list.',
 'pn_role': 'CLI command to create/delete/modify role\n\nArguments: pn_name, pn_access, pn_scope, pn_sudo, state, pn_shell, pn_delete_from_users, pn_cliswitch, pn_running_config\n\nThis module can be used to create, delete and modify user roles.',
 'pn_snmp_community': 'CLI command to create/modify/delete snmp-community\n\nArguments: state, pn_community_string, pn_cliswitch, pn_community_type\n\nThis module can be used to create SNMP communities for SNMPv1 or delete SNMP communities for SNMPv1 or modify SNMP communities for SNMPv1.',
 'pn_snmp_trap_sink': 'CLI command to create/delete snmp-trap-sink\n\nArguments: pn_dest_port, state, pn_community, pn_dest_host, pn_type, pn_cliswitch\n\nThis module can be used to create a SNMP trap sink and delete a SNMP trap sink.',
 'pn_snmp_vacm': 'CLI command to create/modify/delete snmp-vacm\n\nArguments: state, pn_auth, pn_user_type, pn_user_name, pn_cliswitch, pn_oid_restrict, pn_priv\n\nThis module can be used to create View Access Control Models (VACM), modify VACM and delete VACM.',
 'pn_stp': 'CLI command to modify stp\n\nArguments: pn_mst_max_hops, pn_bpdus_bridge_ports, pn_bridge_id, pn_root_guard_wait_time, pn_bridge_priority, pn_mst_config_name, pn_hello_time, pn_enable, state, pn_stp_mode, pn_forwarding_delay, pn_max_age, pn_cliswitch\n\nThis module can be used to modify Spanning Tree Protocol parameters.',
 'pn_stp_port': 'CLI command to modify stp-port.\n\nArguments: pn_bpdu_guard, pn_cost, pn_priority, state, pn_block, pn_edge, pn_filter, pn_cliswitch, pn_root_guard, pn_port\n\nThis module can be used modify Spanning Tree Protocol (STP) parameters on ports.',
 'pn_switch_setup': 'CLI command to modify switch-setup\n\nArguments: pn_ntp_secondary_server, pn_ntp_server, pn_dns_ip, pn_in_band_netmask_ip6, pn_eula_accepted, pn_in_band_ip6_assign, state, pn_in_band_ip6, pn_loopback_ip6, pn_banner, pn_timezone, pn_date, pn_mgmt_netmask_ip6, pn_mgmt_ip, pn_enable_host_ports, pn_mgmt_ip6_assignment, pn_switch_name, pn_loopback_ip, pn_motd, pn_force, pn_in_band_ip, pn_password, pn_domain_name, pn_gateway_ip6, pn_dns_secondary_ip, pn_analytics_store, pn_mgmt_netmask, pn_mgmt_ip_assignment, pn_in_band_netmask, pn_gateway_ip, pn_eula_timestamp, pn_mgmt_ip6, pn_cliswitch\n\nThis module can be used to modify switch setup.',
 'pn_user': 'CLI command to create/modify/delete user\n\nArguments: state, pn_name, pn_initial_role, pn_scope, pn_password, pn_cliswitch\n\nThis module can be used to create a user and apply a role, update a user and delete a user.',
 'pn_vflow_table_profile': 'CLI command to modify vflow-table-profile\n\nArguments: pn_hw_tbl, pn_enable, state, pn_profile, pn_cliswitch\n\nThis module can be used to modify a vFlow table profile.',
 'pn_vrouter_bgp': 'CLI command to add/modify/remove vrouter-bgp\n\nArguments: pn_neighbor_holdtime, pn_prefix_list_out, pn_vrouter_name, pn_bfd_multihop, pn_route_map_out, pn_soft_reconfig_inbound, pn_bfd, pn_max_prefix_warn_only, pn_no_route_map_out, pn_route_reflector_client, state, pn_default_originate, pn_ebgp_multihop, pn_neighbor_keepalive_interval, pn_send_community, pn_advertisement_interval, pn_max_prefix, pn_update_source, pn_interface, pn_override_capability, pn_prefix_list_in, pn_multi_protocol, pn_connect_retry_interval, pn_password, pn_no_route_map_in, pn_neighbor, pn_allowas_in, pn_weight, pn_remote_as, pn_route_map_in, pn_cliswitch, pn_next_hop_self\n\nThis module can be used to add Border Gateway Protocol neighbor to a vRouter modify Border Gateway Protocol neighbor to a vRouter and remove Border Gateway Protocol neighbor from a vRouter.',
 'pn_vrouter_bgp_network': 'CLI command to add/remove vrouter-bgp-network\n\nArguments: state, pn_network, pn_netmask, pn_cliswitch, pn_vrouter_name\n\nThis module can be used to add Border Gateway Protocol network to a vRouter and remove Border Gateway Protocol network from a vRouter.',
 'pn_vrouter_interface_ip': 'CLI command to add/remove vrouter-interface-ip\n\nArguments: pn_bd, pn_ip, pn_vrouter_name, pn_vnet, state, pn_netmask, pn_nic, pn_cliswitch\n\nThis module can be used to add an IP address on interface from a vRouter or remove an IP address on interface from a vRouter.',
 'pn_vrouter_loopback_interface': 'CLI command to add/remove vrouter-loopback-interface\n\nArguments: state, pn_index, pn_ip, pn_cliswitch, pn_vrouter_name\n\nThis module can be used to add loopback interface to a vRouter or remove loopback interface from a vRouter.',
 'pn_vrouter_ospf': 'CLI command to add/remove vrouter-ospf\n\nArguments: state, pn_netmask, pn_vrouter_name, pn_ospf_area, pn_network, pn_cliswitch\n\nThis module can be used to add OSPF protocol to vRouter and remove OSPF protocol from a vRouter',
 'pn_vrouter_ospf6': 'CLI command to add/remove vrouter-ospf6\n\nArguments: pn_vrouter_name, pn_ospf6_area, pn_nic, state, pn_cliswitch\n\nThis module can be used to add interface ip to OSPF6 protocol or remove interface ip from OSPF6 protocol on vRouter.',
 'pn_vrouter_packet_relay': 'CLI command to add/remove vrouter-packet-relay\n\nArguments: state, pn_nic, pn_vrouter_name, pn_forward_proto, pn_forward_ip, pn_cliswitch\n\nThis module can be used to add packet relay configuration for DHCP on vrouter and remove packet relay configuration for DHCP on vrouter.',
 'pn_vrouter_pim_config': 'CLI command to modify vrouter-pim-config\n\nArguments: pn_querier_timeout, pn_hello_interval, state, pn_vrouter_name, pn_query_interval, pn_cliswitch\n\nThis module can be used to modify pim parameters.',
 'pn_vtep': 'CLI command to create/delete vtep\n\nArguments: pn_switch_in_cluster, pn_name, pn_vrouter_name, pn_ip, pn_virtual_ip, state, pn_location, pn_cliswitch\n\nThis module can be used to create a vtep and delete a vtep.',
 'podman_image': 'Pull images for use by podman\n\nArguments: username, pull, executable, force, name, push_args, ca_cert_dir, state, tag, build, auth_file, push, path, password, validate_certs\n\nBuild, pull, or push images using Podman.',
 'podman_image_info': 'Gather info about images using podman\n\nArguments: executable, name\n\nGather info about images using C(podman)',
 'portage': 'Package manager for Gentoo\n\nArguments: nodeps, quietbuild, onlydeps, newuse, quietfail, oneshot, update, deep, sync, keepgoing, depclean, jobs, noreplace, loadavg, verbose, getbinpkg, package, quiet, state, changed_use, usepkgonly\n\nManages Gentoo packages',
 'portinstall': "Installing packages from FreeBSD's ports system\n\nArguments: state, use_packages, name\n\nManage packages for FreeBSD using 'portinstall'.",
 'postgresql_copy': 'Copy data between a file/program and a PostgreSQL table\n\nArguments: src, dst, session_role, db, copy_from, program, columns, options, copy_to\n\nCopy data between a file/program and a PostgreSQL table.',
 'postgresql_db': 'Add or remove PostgreSQL databases from a remote host.\n\nArguments: session_role, name, encoding, lc_collate, target_opts, lc_ctype, conn_limit, owner, state, tablespace, template, maintenance_db, port, target\n\nAdd or remove PostgreSQL databases from a remote host.',
 'postgresql_ext': 'Add or remove PostgreSQL extensions from a database\n\nArguments: ssl_mode, name, ca_cert, cascade, session_role, db, login_unix_socket, state, version, schema\n\nAdd or remove PostgreSQL extensions from a database.',
 'postgresql_idx': 'Create or drop indexes from a PostgreSQL database\n\nArguments: idxname, storage_params, concurrent, session_role, db, cascade, state, tablespace, table, cond, idxtype, columns, schema\n\nCreate or drop indexes from a PostgreSQL database.',
 'postgresql_info': 'Gather information about PostgreSQL servers\n\nArguments: filter, session_role, db\n\nGathers information about PostgreSQL servers.',
 'postgresql_lang': "Adds, removes or changes procedural languages with a PostgreSQL database\n\nArguments: lang, ssl_mode, force_trust, ca_cert, cascade, session_role, db, login_unix_socket, state, trust, fail_on_drop\n\nAdds, removes or changes procedural languages with a PostgreSQL database.\nThis module allows you to add a language, remote a language or change the trust relationship with a PostgreSQL database.\nThe module can be used on the machine where executed or on a remote host.\nWhen removing a language from a database, it is possible that dependencies prevent the database from being removed. In that case, you can specify I(cascade=yes) to automatically drop objects that depend on the language (such as functions in the language).\nIn case the language can't be deleted because it is required by the database system, you can specify I(fail_on_drop=no) to ignore the error.\nBe careful when marking a language as trusted since this could be a potential security breach. Untrusted languages allow only users with the PostgreSQL superuser privilege to use this language to create new functions.",
 'postgresql_membership': 'Add or remove PostgreSQL roles from groups\n\nArguments: state, fail_on_role, groups, session_role, db, target_roles\n\nAdds or removes PostgreSQL roles from groups (other roles).\nUsers are roles with login privilege.\nGroups are PostgreSQL roles usually without LOGIN privilege.\nCommon use case:\n1) add a new group (groups) by M(postgresql_user) module with I(role_attr_flags=NOLOGIN)\n2) grant them desired privileges by M(postgresql_privs) module\n3) add desired PostgreSQL users to the new group (groups) by this module',
 'postgresql_owner': 'Change an owner of PostgreSQL database object\n\nArguments: obj_type, reassign_owned_by, fail_on_role, obj_name, new_owner, db, session_role\n\nChange an owner of PostgreSQL database object.\nAlso allows to reassign the ownership of database objects owned by a database role to another role.',
 'postgresql_pg_hba': "Add, remove or modify a rule in a pg_hba file\n\nArguments: backup_file, users, dest, create, databases, netmask, order, method, state, contype, address, backup, options\n\nThe fundamental function of the module is to create, or delete lines in pg_hba files.\nThe lines in the file should be in a typical pg_hba form and lines should be unique per key (type, databases, users, source). If they are not unique and the SID is 'the one to change', only one for C(state=present) or none for C(state=absent) of the SID's will remain.",
 'postgresql_ping': 'Check remote PostgreSQL server availability\n\nArguments: db\n\nSimple module to check remote PostgreSQL server availability.',
 'postgresql_privs': "Grant or revoke privileges on PostgreSQL database objects\n\nArguments: objs, ssl_mode, ca_cert, database, host, password, port, grant_option, roles, privs, session_role, target_roles, unix_socket, state, login, fail_on_role, type, schema\n\nGrant or revoke privileges on PostgreSQL database objects.\nThis module is basically a wrapper around most of the functionality of PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE I(privs) ON I(type) I(objs) TO/FROM I(roles)).",
 'postgresql_publication': 'Add, update, or remove PostgreSQL publication\n\nArguments: tables, state, name, parameters, cascade, owner, db\n\nAdd, update, or remove PostgreSQL publication.',
 'postgresql_query': 'Run PostgreSQL queries\n\nArguments: autocommit, path_to_script, named_args, query, session_role, db, positional_args\n\nRuns arbitrary PostgreSQL queries.\nCan run queries from SQL script files.\nDoes not run against backup files. Use M(postgresql_db) with I(state=restore) to run queries on files made by pg_dump/pg_dumpall utilities.',
 'postgresql_schema': 'Add or remove PostgreSQL schema\n\nArguments: ssl_mode, name, ca_cert, database, session_role, state, cascade_drop, owner\n\nAdd or remove PostgreSQL schema.',
 'postgresql_sequence': 'Create, drop, or alter a PostgreSQL sequence\n\nArguments: cache, data_type, sequence, db, increment, owner, rename_to, cascade, session_role, maxvalue, minvalue, start, state, newschema, cycle, schema\n\nAllows to create, drop or change the definition of a sequence generator.',
 'postgresql_set': 'Change a PostgreSQL server configuration parameter\n\nArguments: reset, session_role, db, name, value\n\nAllows to change a PostgreSQL server configuration parameter.\nThe module uses ALTER SYSTEM command and applies changes by reload server configuration.\nALTER SYSTEM is used for changing server configuration parameters across the entire database cluster.\nIt can be more convenient and safe than the traditional method of manually editing the postgresql.conf file.\nALTER SYSTEM writes the given parameter setting to the $PGDATA/postgresql.auto.conf file, which is read in addition to postgresql.conf.\nThe module allows to reset parameter to boot_val (cluster initial value) by I(reset=yes) or remove parameter string from postgresql.auto.conf and reload I(value=default) (for settings with postmaster context restart is required).\nAfter change you can see in the ansible output the previous and the new parameter value and other information using returned values and M(debug) module.',
 'postgresql_slot': 'Add or remove replication slots from a PostgreSQL database\n\nArguments: state, name, output_plugin, immediately_reserve, session_role, db, slot_type\n\nAdd or remove physical or logical replication slots from a PostgreSQL database.',
 'postgresql_table': 'Create, drop, or modify a PostgreSQL table\n\nArguments: rename, like, truncate, unlogged, session_role, db, cascade, state, including, storage_params, owner, tablespace, table, columns\n\nAllows to create, drop, rename, truncate a table, or change some table attributes.',
 'postgresql_tablespace': 'Add or remove PostgreSQL tablespaces from remote hosts\n\nArguments: set, session_role, db, state, tablespace, location, owner, rename_to\n\nAdds or removes PostgreSQL tablespaces from remote hosts.',
 'postgresql_user': 'Add or remove a user (role) from a PostgreSQL server instance\n\nArguments: session_role, ssl_mode, name, no_password_changes, encrypted, expires, db, conn_limit, state, groups, ca_cert, password, role_attr_flags, fail_on_user, priv\n\nAdds or removes a user (role) from a PostgreSQL server instance ("cluster" in PostgreSQL terminology) and, optionally, grants the user access to an existing database or tables.\nA user is a role with login privilege.\nThe fundamental function of the module is to create, or delete, users from a PostgreSQL instances. Privilege assignment, or removal, is an optional step, which works on one database at a time. This allows for the module to be called several times in the same module to modify the permissions on different databases, or to grant permissions to already existing users.\nA user cannot be removed until all the privileges have been stripped from the user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the fail_on_user option signals the module to try to remove the user, but if not possible keep going; the module will report if changes happened and separately if the user was removed or not.',
 'profitbricks': "Create, destroy, start, stop, and reboot a ProfitBricks virtual machine.\n\nArguments: lan, image_password, bus, image, ram, instance_ids, subscription_password, wait_timeout, assign_public_ip, wait, count, datacenter, remove_boot_volume, ssh_keys, subscription_user, cpu_family, name, volume_size, state, location, auto_increment, cores\n\nCreate, destroy, update, start, stop, and reboot a ProfitBricks virtual machine. When the virtual machine is created it can optionally wait for it to be 'running' before returning. This module has a dependency on profitbricks >= 1.0.0",
 'profitbricks_datacenter': 'Create or destroy a ProfitBricks Virtual Datacenter.\n\nArguments: name, subscription_user, subscription_password, state, wait_timeout, location, wait, description\n\nThis is a simple module that supports creating or removing vDCs. A vDC is required before you can create servers. This module has a dependency on profitbricks >= 1.0.0',
 'profitbricks_nic': 'Create or Remove a NIC.\n\nArguments: datacenter, lan, name, subscription_user, server, subscription_password, state, wait_timeout, wait\n\nThis module allows you to create or restore a volume snapshot. This module has a dependency on profitbricks >= 1.0.0',
 'profitbricks_volume': 'Create or destroy a volume.\n\nArguments: image_password, licence_type, bus, image, instance_ids, subscription_password, wait_timeout, disk_type, wait, count, datacenter, name, subscription_user, state, auto_increment, size, ssh_keys\n\nAllows you to create or remove a volume from a ProfitBricks datacenter. This module has a dependency on profitbricks >= 1.0.0',
 'profitbricks_volume_attachments': 'Attach or detach a volume.\n\nArguments: datacenter, subscription_user, server, volume, state, wait_timeout, subscription_password, wait\n\nAllows you to attach or detach a volume from a ProfitBricks server. This module has a dependency on profitbricks >= 1.0.0',
 'proxmox': 'management of instances in Proxmox VE cluster\n\nArguments: node, force, cpuunits, vmid, api_password, cpus, ostemplate, unprivileged, disk, ip_address, pool, api_host, password, searchdomain, netif, api_user, validate_certs, hostname, storage, state, swap, timeout, memory, mounts, cores, nameserver, pubkey, onboot\n\nallows you to create/delete/stop instances in Proxmox VE cluster\nStarting in Ansible 2.1, it automatically detects containerization type (lxc for PVE 4, openvz for older)',
 'proxmox_kvm': 'Management of Qemu(KVM) Virtual Machines in Proxmox VE cluster.\n\nArguments: revert, boot, migrate_speed, vga, keyboard, watchdog, sockets, digest, tablet, bios, hostpci, autostart, memory, migrate_downtime, localtime, virtio, format, snapname, hotplug, name, target, vmid, bootdisk, vcpus, newid, timeout, skiplock, validate_certs, onboot, delete, force, lock, startup, agent, freeze, serial, startdate, balloon, cpuunits, storage, reboot, shares, machine, sata, state, template, net, acpi, node, full, description, scsihw, clone, args, api_password, tdf, update, kvm, ostype, protection, numa, parallel, pool, api_host, cpulimit, api_user, hugepages, smbios, cores, scsi, ide, cpu\n\nAllows you to create/delete/stop Qemu(KVM) Virtual Machines in Proxmox VE cluster.',
 'proxmox_template': 'management of OS templates in Proxmox VE cluster\n\nArguments: node, src, force, api_host, api_user, api_password, storage, state, content_type, timeout, validate_certs, template\n\nallows you to upload/delete templates in Proxmox VE cluster',
 'proxysql_backend_servers': 'Adds or removes mysql hosts from proxysql admin interface.\n\nArguments: status, comment, compression, weight, hostname, hostgroup_id, state, use_ssl, max_connections, port, max_latency_ms, max_replication_lag\n\nThe M(proxysql_backend_servers) module adds or removes mysql hosts using the proxysql admin interface.',
 'proxysql_global_variables': 'Gets or sets the proxysql global variables.\n\nArguments: variable, value\n\nThe M(proxysql_global_variables) module gets or sets the proxysql global variables.',
 'proxysql_manage_config': 'Writes the proxysql configuration settings between layers.\n\nArguments: action, config_layer, direction, config_settings\n\nThe M(proxysql_global_variables) module writes the proxysql configuration settings between layers. Currently this module will always report a changed state, so should typically be used with WHEN however this will change in a future version when the CHECKSUM table commands are available for all tables in proxysql.',
 'proxysql_mysql_users': 'Adds or removes mysql users from proxysql admin interface.\n\nArguments: username, default_hostgroup, frontend, default_schema, transaction_persistent, backend, state, fast_forward, active, use_ssl, password, max_connections\n\nThe M(proxysql_mysql_users) module adds or removes mysql users using the proxysql admin interface.',
 'proxysql_query_rules': 'Modifies query rules using the proxysql admin interface.\n\nArguments: comment, username, flagOUT, match_pattern, destination_hostgroup, proxy_port, active, mirror_flagOUT, apply, schemaname, replace_pattern, cache_ttl, digest, retries, match_digest, mirror_hostgroup, log, negate_match_pattern, flagIN, client_addr, error_msg, delay, state, proxy_addr, timeout, force_delete, rule_id\n\nThe M(proxysql_query_rules) module modifies query rules using the proxysql admin interface.',
 'proxysql_replication_hostgroups': 'Manages replication hostgroups using the proxysql admin interface.\n\nArguments: comment, state, reader_hostgroup, writer_hostgroup\n\nEach row in mysql_replication_hostgroups represent a pair of writer_hostgroup and reader_hostgroup. ProxySQL will monitor the value of read_only for all the servers in specified hostgroups, and based on the value of read_only will assign the server to the writer or reader hostgroups.',
 'proxysql_scheduler': 'Adds or removes schedules from proxysql admin interface.\n\nArguments: comment, arg1, arg2, arg3, arg4, arg5, filename, state, interval_ms, force_delete, active\n\nThe M(proxysql_scheduler) module adds or removes schedules using the proxysql admin interface.',
 'psexec': 'Runs commands on a remote Windows host based on the PsExec model\n\nArguments: stdin, show_ui_on_logon_screen, connection_password, load_profile, integrity_level, connection_username, working_directory, process_username, process_password, process_timeout, connection_timeout, port, executable, encrypt, interactive_session, hostname, priority, arguments, asynchronous, interactive\n\nRuns a remote command from a Linux host to a Windows host without WinRM being set up.\nCan be run on the Ansible controller to bootstrap Windows hosts to get them ready for WinRM.',
 'pubnub_blocks': 'PubNub blocks management module.\n\nArguments: account, name, keyset, changes, cache, application, state, password, validate_certs, email, event_handlers, description\n\nThis module allows Ansible to interface with the PubNub BLOCKS infrastructure by providing the following operations: create / remove, start / stop and rename for blocks and create / modify / remove for event handlers',
 'pulp_repo': 'Add or remove Pulp repos from a remote host.\n\nArguments: feed, repo_type, pulp_host, feed_client_key, relative_url, force_basic_auth, feed_ca_cert, proxy_password, proxy_port, serve_http, wait_for_completion, add_export_distributor, url_password, publish_distributor, name, proxy_host, generate_sqlite, feed_client_cert, state, serve_https, proxy_username, url_username, validate_certs, repoview\n\nAdd or remove Pulp repos from a remote host.',
 'puppet': 'Runs puppet\n\nArguments: facter_basename, verbose, tags, certname, facts, summarize, use_srv_records, modulepath, logdest, execute, puppetmaster, manifest, environment, noop, timeout, debug\n\nRuns I(puppet) agent or apply in a reliable manner.',
 'purefa_alert': 'Configure Pure Storage FlashArray alert email settings\n\nArguments: state, enabled, address\n\nConfigure alert email configuration for Pure Storage FlashArrays.\nAdd or delete an individual syslog server to the existing list of serves.',
 'purefa_arrayname': 'Configure Pure Storage FlashArray array name\n\nArguments: state, name\n\nConfigure name of array for Pure Storage FlashArrays.\nIdeal for Day 0 initial configuration.',
 'purefa_banner': 'Configure Pure Storage FlashArray GUI and SSH MOTD message\n\nArguments: state, banner\n\nConfigure MOTD for Pure Storage FlashArrays.\nThis will be shown during an SSH or GUI login to the array.\nMultiple line messages can be achieved using \\\\n.',
 'purefa_connect': 'Manage replication connections between two FlashArrays\n\nArguments: target_api, state, target_url, connection\n\nManage array connections to specified target array',
 'purefa_dns': 'Configure FlashArray DNS settings\n\nArguments: nameservers, state, domain\n\nSet or erase configuration for the DNS settings.\nNameservers provided will overwrite any existing nameservers.',
 'purefa_ds': 'Configure FlashArray Directory Service\n\nArguments: bind_user, group_base, enable, uri, aa_group, ro_group, state, bind_password, base_dn, sa_group\n\nSet or erase configuration for the directory service. There is no facility to SSL certificates at this time. Use the FlashArray GUI for this additional configuration work.\nTo modify an existing directory service configuration you must first delete an existing configuration and then recreate with new settings.',
 'purefa_dsrole': 'Configure FlashArray Directory Service Roles\n\nArguments: group_base, state, role, group\n\nSet or erase directory services role configurations.\nOnly available for FlashArray running Purity 5.2.0 or higher',
 'purefa_hg': 'Manage hostgroups on Pure Storage FlashArrays\n\nArguments: volume, state, host, hostgroup\n\nCreate, delete or modify hostgroups on Pure Storage FlashArrays.',
 'purefa_host': 'Manage hosts on Pure Storage FlashArrays\n\nArguments: preferred_array, protocol, host, volume, state, iqn, wwns, nqn, lun, personality\n\nCreate, delete or modify hosts on Pure Storage FlashArrays.',
 'purefa_info': 'Collect information from Pure Storage FlashArray\n\nArguments: gather_subset\n\nCollect information from a Pure Storage Flasharray running the Purity//FA operating system. By default, the module will collect basic information including hosts, host groups, protection groups and volume counts. Additional information can be collected based on the configured set of arguments.',
 'purefa_ntp': 'Configure Pure Storage FlashArray NTP settings\n\nArguments: ntp_servers, state\n\nSet or erase NTP configuration for Pure Storage FlashArrays.',
 'purefa_offload': 'Create, modify and delete NFS or S3 offload targets\n\nArguments: access_key, protocol, name, share, bucket, state, secret, address, initialize, options\n\nCreate, modify and delete NFS or S3 offload targets.\nOnly supported on Purity v5.2.0 or higher.\nYou must have a correctly configured offload network for offload to work.',
 'purefa_pg': 'Manage protection groups on Pure Storage FlashArrays\n\nArguments: target, enabled, state, hostgroup, volume, host, pgroup, eradicate\n\nCreate, delete or modify protection groups on Pure Storage FlashArrays.\nIf a protection group exists and you try to add non-valid types, eg. a host to a volume protection group the module will ignore the invalid types.\nProtection Groups on Offload targets are supported.',
 'purefa_pgsnap': 'Manage protection group snapshots on Pure Storage FlashArrays\n\nArguments: apply_retention, restore, remote, name, eradicate, state, target, now, overwrite, suffix\n\nCreate or delete protection group snapshots on Pure Storage FlashArray.\nRecovery of replicated snapshots on the replica target array is enabled.',
 'purefa_phonehome': 'Enable or Disable Pure Storage FlashArray Phonehome\n\nArguments: state\n\nEnable or Disable Phonehome for a Pure Storage FlashArray.',
 'purefa_ra': 'Enable or Disable Pure Storage FlashArray Remote Assist\n\nArguments: state\n\nEnable or Disable Remote Assist for a Pure Storage FlashArray.',
 'purefa_smtp': 'Configure FlashArray SMTP settings\n\nArguments: state, password, user, relay_host, sender_domain\n\nSet or erase configuration for the SMTP settings.\nIf username/password are set this will always force a change as there is no way to see if the password is different from the current SMTP configuration.\nPure Storage Ansible Team (@sdodsley) <pure-ansible-team@purestorage.com>',
 'purefa_snap': 'Manage volume snapshots on Pure Storage FlashArrays\n\nArguments: state, suffix, target, eradicate, overwrite, name\n\nCreate or delete volumes and volume snapshots on Pure Storage FlashArray.',
 'purefa_snmp': 'Configure FlashArray SNMP Managers\n\nArguments: name, notification, state, community, privacy_protocol, auth_protocol, host, version, user, privacy_passphrase, auth_passphrase\n\nManage SNMP managers on a Pure Storage FlashArray.\nChanging of a named SNMP managers version is not supported.\nThis module is not idempotent and will always modify an existing SNMP manager due to hidden parameters that cannot be compared to the play parameters.',
 'purefa_syslog': 'Configure Pure Storage FlashArray syslog settings\n\nArguments: state, protocol, port, address\n\nConfigure syslog configuration for Pure Storage FlashArrays.\nAdd or delete an individual syslog server to the existing list of serves.',
 'purefa_user': 'Create, modify or delete FlashArray local user account\n\nArguments: state, api, role, name, password, old_password\n\nCreate, modify or delete local users on a Pure Storage FlashArray.',
 'purefa_vg': 'Manage volume groups on Pure Storage FlashArrays\n\nArguments: vgroup, state, eradicate\n\nCreate, delete or modify volume groups on Pure Storage FlashArrays.',
 'purefa_volume': 'Manage volumes on Pure Storage FlashArrays\n\nArguments: size, state, qos, name, eradicate, overwrite, target\n\nCreate, delete or extend the capacity of a volume on Pure Storage FlashArray.',
 'purefb_bucket': 'Manage Object Store Buckets on a  Pure Storage FlashBlade.\n\nArguments: account, state, name, eradicate\n\nThis module managess object store (s3) buckets on Pure Storage FlashBlade.',
 'purefb_ds': 'Configure FlashBlade Directory Service\n\nArguments: bind_user, dstype, enable, join_ou, nis_domain, uri, state, bind_password, base_dn, nis_servers\n\nCreate or erase directory services configurations. There is no facility to SSL certificates at this time. Use the FlashBlade GUI for this additional configuration work.\nTo modify an existing directory service configuration you must first delete an existing configuration and then recreate with new settings.',
 'purefb_dsrole': 'Configure FlashBlade  Management Directory Service Roles\n\nArguments: group_base, state, role, group\n\nSet or erase directory services role configurations.',
 'purefb_fs': 'Manage filesystemon Pure Storage FlashBlade`\n\nArguments: snapshot, smb, nfs_rules, http, name, nfsv4, size, group_quota, state, nfs, fastremove, nfsv3, hard_limit, user_quota, eradicate\n\nThis module manages filesystems on Pure Storage FlashBlade.',
 'purefb_info': 'Collect information from Pure Storage FlashBlade\n\nArguments: gather_subset\n\nCollect information from a Pure Storage FlashBlade running the Purity//FB operating system. By default, the module will collect basic information including hosts, host groups, protection groups and volume counts. Additional information can be collected based on the configured set of arguments.',
 'purefb_network': 'Manage network interfaces in a Pure Storage FlashBlade\n\nArguments: services, state, itype, name, address\n\nThis module manages network interfaces on Pure Storage FlashBlade.\nWhen creating a network interface a subnet must already exist with a network prefix that covers the IP address of the interface being created.',
 'purefb_ra': 'Enable or Disable Pure Storage FlashBlade Remote Assist\n\nArguments: state\n\nEnable or Disable Remote Assist for a Pure Storage FlashBlade.',
 'purefb_s3acc': 'Create or delete FlashBlade Object Store accounts\n\nArguments: state, name\n\nCreate or delete object store accounts on a Pure Storage FlashBlade.',
 'purefb_s3user': 'Create or delete FlashBlade Object Store account users\n\nArguments: access_key, account, state, name\n\nCreate or delete object store account users on a Pure Storage FlashBlade.',
 'purefb_smtp': 'Configure SMTP for Pure Storage FlashBlade\n\nArguments: host, domain\n\nConfigure SMTP for a Pure Storage FlashBlade.\nWhilst there can be no relay host, a sender domain must be configured.',
 'purefb_snap': 'Manage filesystem snapshots on Pure Storage FlashBlades\n\nArguments: state, suffix, name, eradicate\n\nCreate or delete volumes and filesystem snapshots on Pure Storage FlashBlades.',
 'purefb_subnet': 'Manage network subnets in a Pure Storage FlashBlade\n\nArguments: state, gateway, name, vlan, prefix, mtu\n\nThis module manages network subnets on Pure Storage FlashBlade.',
 'pushbullet': 'Sends notifications to Pushbullet\n\nArguments: body, title, device, push_type, api_key, channel\n\nThis module sends push notifications via Pushbullet to channels or devices.',
 'pushover': 'Send notifications via U(https://pushover.net)\n\nArguments: msg, user_key, app_token, pri, title\n\nSend notifications via pushover, to subscriber list of devices, and email addresses. Requires pushover app on devices.',
 'python_requirements_info': 'Show python path and assert dependency versions\n\nArguments: dependencies\n\nGet info about available Python requirements on the target host, including listing required libraries and gathering versions.\nThis module was called C(python_requirements_facts) before Ansible 2.9. The usage did not change.',
 'rabbitmq_binding': 'Manage rabbitMQ bindings\n\nArguments: state, name, destination_type, destination, routing_key, arguments\n\nThis module uses rabbitMQ REST APIs to create / delete bindings.',
 'rabbitmq_exchange': 'Manage rabbitMQ exchanges\n\nArguments: state, internal, name, arguments, durable, auto_delete, exchange_type\n\nThis module uses rabbitMQ Rest API to create/delete exchanges',
 'rabbitmq_global_parameter': 'Manage RabbitMQ global parameters\n\nArguments: node, state, name, value\n\nManage dynamic, cluster-wide global parameters for RabbitMQ',
 'rabbitmq_parameter': 'Manage RabbitMQ parameters\n\nArguments: node, vhost, state, name, component, value\n\nManage dynamic, cluster-wide parameters for RabbitMQ',
 'rabbitmq_plugin': 'Manage RabbitMQ plugins\n\nArguments: state, new_only, prefix, names\n\nThis module can be used to enable or disable RabbitMQ plugins.',
 'rabbitmq_policy': 'Manage the state of policies in RabbitMQ\n\nArguments: node, name, tags, pattern, priority, vhost, state, apply_to\n\nManage the state of a policy in RabbitMQ.',
 'rabbitmq_publish': 'Publish a message to a RabbitMQ queue.\n\nArguments: username, body, exchange, auto_delete, vhost, host, content_type, password, port, src, proto, url, durable, routing_key, queue, headers, exclusive\n\nPublish a message on a RabbitMQ queue using a blocking connection.',
 'rabbitmq_queue': 'Manage rabbitMQ queues\n\nArguments: dead_letter_exchange, name, durable, state, max_length, arguments, message_ttl, auto_expires, dead_letter_routing_key, auto_delete, max_priority\n\nThis module uses rabbitMQ Rest API to create/delete queues',
 'rabbitmq_user': 'Manage RabbitMQ users\n\nArguments: node, update_password, force, tags, read_priv, write_priv, state, user, configure_priv, vhost, password, permissions\n\nAdd or remove users to RabbitMQ and assign permissions',
 'rabbitmq_vhost': 'Manage the state of a virtual host in RabbitMQ\n\nArguments: node, tracing, state, name\n\nManage the state of a virtual host in RabbitMQ',
 'rabbitmq_vhost_limits': 'Manage the state of virtual host limits in RabbitMQ\n\nArguments: node, vhost, state, max_queues, max_connections\n\nThis module sets/clears certain limits on a virtual host.\nThe configurable limits are I(max_connections) and I(max-queues).',
 'raw': 'Executes a low-down and dirty command\n\nArguments: free_form, executable\n\nExecutes a low-down and dirty SSH command, not going through the module subsystem.\nThis is useful and should only be done in a few cases. A common case is installing C(python) on a system without python installed by default. Another is speaking to any devices such as routers that do not have any Python installed. In any other case, using the M(shell) or M(command) module is much more appropriate.\nArguments given to C(raw) are run directly through the configured remote shell.\nStandard output, error output and return code are returned when available.\nThere is no change handler support for this module.\nThis module does not require python on the remote system, much like the M(script) module.\nThis module is also supported for Windows targets.',
 'rax': "create / delete an instance in Rackspace Public Cloud\n\nArguments: files, boot_volume_terminate, auto_increment, image, user_data, boot_volume, count_offset, meta, instance_ids, flavor, networks, wait, boot_from_volume, group, name, extra_client_args, exact_count, disk_config, count, state, wait_timeout, key_name, boot_volume_size, extra_create_args, config_drive\n\ncreates / deletes a Rackspace Public Cloud instance and optionally waits for it to be 'running'.",
 'rax_cbs': 'Manipulate Rackspace Cloud Block Storage Volumes\n\nArguments: size, description, image, volume_type, state, meta, snapshot_id, wait, wait_timeout, name\n\nManipulate Rackspace Cloud Block Storage Volumes',
 'rax_cbs_attachments': 'Manipulate Rackspace Cloud Block Storage Volume Attachments\n\nArguments: volume, state, wait_timeout, device, wait, server\n\nManipulate Rackspace Cloud Block Storage Volume Attachments',
 'rax_cdb': "create/delete or resize a Rackspace Cloud Databases instance\n\nArguments: cdb_type, name, cdb_version, volume, state, wait_timeout, flavor, wait\n\ncreates / deletes or resize a Rackspace Cloud Databases instance and optionally waits for it to be 'running'. The name option needs to be unique since it's used to identify the instance.",
 'rax_cdb_database': 'create / delete a database in the Cloud Databases\n\nArguments: cdb_id, state, character_set, collate, name\n\ncreate / delete a database in the Cloud Databases.',
 'rax_cdb_user': 'create / delete a Rackspace Cloud Database\n\nArguments: state, db_username, db_password, cdb_id, databases, host\n\ncreate / delete a database in the Cloud Databases.',
 'rax_clb': 'create / delete a load balancer in Rackspace Public Cloud\n\nArguments: protocol, name, algorithm, vip_id, state, wait_timeout, meta, timeout, type, port, wait\n\ncreates / deletes a Rackspace Public Cloud load balancer.',
 'rax_clb_nodes': 'add, modify and remove nodes from a Rackspace Cloud Load Balancer\n\nArguments: weight, load_balancer_id, state, wait_timeout, condition, address, type, port, node_id, wait\n\nAdds, modifies and removes nodes from a Rackspace Cloud Load Balancer',
 'rax_clb_ssl': 'Manage SSL termination for a Rackspace Cloud Load Balancer.\n\nArguments: private_key, certificate, enabled, https_redirect, state, wait_timeout, intermediate_certificate, secure_traffic_only, secure_port, loadbalancer, wait\n\nSet up, reconfigure, or remove SSL termination for an existing load balancer.',
 'rax_dns': 'Manage domains on Rackspace Cloud DNS\n\nArguments: comment, state, email, name, ttl\n\nManage domains on Rackspace Cloud DNS',
 'rax_dns_record': 'Manage DNS records on Rackspace Cloud DNS\n\nArguments: comment, domain, name, data, server, priority, state, loadbalancer, ttl, type, overwrite\n\nManage DNS records on Rackspace Cloud DNS',
 'rax_facts': 'Gather facts for Rackspace Cloud Servers\n\nArguments: address, id, name\n\nGather facts for Rackspace Cloud Servers.',
 'rax_files': 'Manipulate Rackspace Cloud Files Containers\n\nArguments: web_index, container, region, private, state, clear_meta, meta, ttl, web_error, type, public\n\nManipulate Rackspace Cloud Files Containers',
 'rax_files_objects': 'Upload, download, and delete objects in Rackspace Cloud Files\n\nArguments: src, container, dest, expires, state, clear_meta, meta, type, method, structure\n\nUpload, download, and delete objects in Rackspace Cloud Files',
 'rax_identity': 'Load Rackspace Cloud Identity\n\nArguments: state\n\nVerifies Rackspace Cloud credentials and returns identity information',
 'rax_keypair': 'Create a keypair for use with Rackspace Cloud Servers\n\nArguments: public_key, state, name\n\nCreate a keypair for use with Rackspace Cloud Servers',
 'rax_meta': 'Manipulate metadata for Rackspace Cloud Servers\n\nArguments: meta, id, address, name\n\nManipulate metadata for Rackspace Cloud Servers',
 'rax_mon_alarm': 'Create or delete a Rackspace Cloud Monitoring alarm.\n\nArguments: entity_id, notification_plan_id, check_id, label, disabled, state, criteria, metadata\n\nCreate or delete a Rackspace Cloud Monitoring alarm that associates an existing rax_mon_entity, rax_mon_check, and rax_mon_notification_plan with criteria that specify what conditions will trigger which levels of notifications. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> *rax_mon_alarm*',
 'rax_mon_check': 'Create or delete a Rackspace Cloud Monitoring check for an existing entity.\n\nArguments: entity_id, check_type, target_alias, state, label, disabled, target_hostname, period, details, timeout, monitoring_zones_poll, metadata\n\nCreate or delete a Rackspace Cloud Monitoring check associated with an existing rax_mon_entity. A check is a specific test or measurement that is performed, possibly from different monitoring zones, on the systems you monitor. Rackspace monitoring module flow | rax_mon_entity -> *rax_mon_check* -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm',
 'rax_mon_entity': 'Create or delete a Rackspace Cloud Monitoring entity\n\nArguments: state, label, agent_id, named_ip_addresses, metadata\n\nCreate or delete a Rackspace Cloud Monitoring entity, which represents a device to monitor. Entities associate checks and alarms with a target system and provide a convenient, centralized place to store IP addresses. Rackspace monitoring module flow | *rax_mon_entity* -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm',
 'rax_mon_notification': 'Create or delete a Rackspace Cloud Monitoring notification.\n\nArguments: notification_type, state, details, label\n\nCreate or delete a Rackspace Cloud Monitoring notification that specifies a channel that can be used to communicate alarms, such as email, webhooks, or PagerDuty. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> *rax_mon_notification* -> rax_mon_notification_plan -> rax_mon_alarm',
 'rax_mon_notification_plan': 'Create or delete a Rackspace Cloud Monitoring notification plan.\n\nArguments: ok_state, state, warning_state, critical_state, label\n\nCreate or delete a Rackspace Cloud Monitoring notification plan by associating existing rax_mon_notifications with severity levels. Rackspace monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> *rax_mon_notification_plan* -> rax_mon_alarm',
 'rax_network': 'create / delete an isolated network in Rackspace Public Cloud\n\nArguments: state, cidr, label\n\ncreates / deletes a Rackspace Public Cloud isolated network.',
 'rax_queue': 'create / delete a queue in Rackspace Public Cloud\n\nArguments: state, name\n\ncreates / deletes a Rackspace Public Cloud queue.',
 'rax_scaling_group': 'Manipulate Rackspace Cloud Autoscale Groups\n\nArguments: files, key_name, image, user_data, min_entities, cooldown, flavor, networks, wait, max_entities, name, server_name, loadbalancers, wait_timeout, disk_config, state, meta, config_drive\n\nManipulate Rackspace Cloud Autoscale Groups',
 'rax_scaling_policy': 'Manipulate Rackspace Cloud Autoscale Scaling Policy\n\nArguments: is_percent, name, scaling_group, cron, desired_capacity, state, cooldown, at, policy_type, change\n\nManipulate Rackspace Cloud Autoscale Scaling Policy',
 'rds': "create, delete, or modify Amazon rds instances, rds snapshots, and related facts\n\nArguments: db_engine, iops, backup_window, backup_retention, port, security_groups, size, aws_secret_key, subnet, vpc_security_groups, upgrade, zone, instance_type, source_instance, parameter_group, command, multi_zone, new_instance_name, username, tags, db_name, license_model, password, apply_immediately, wait, aws_access_key, character_set_name, region, option_group, engine_version, instance_name, force_failover, wait_timeout, snapshot, publicly_accessible, maint_window\n\nCreates, deletes, or modifies rds resources.\nWhen creating an instance it can be either a new instance or a read-only replica of an existing instance.\nThis module has a dependency on python-boto >= 2.5 and will soon be deprecated.\nThe 'promote' command requires boto >= 2.18.0. Certain features such as tags rely on boto.rds2 (boto >= 2.26.0).\nPlease use boto3 based M(rds_instance) instead.",
 'rds_instance': 'Manage RDS instances\n\nArguments: backup_retention_period, source_db_instance_identifier, availability_zone, s3_bucket_name, db_instance_class, storage_type, iops, db_security_groups, master_username, snapshot_identifier, db_instance_identifier, performance_insights_retention_period, state, timezone, tde_credential_password, read_replica, source_engine, preferred_backup_window, creation_source, max_allocated_storage, enable_iam_database_authentication, db_snapshot_identifier, engine, db_parameter_group_name, enable_cloudwatch_logs_exports, ca_certificate_identifier, db_name, copy_tags_to_snapshot, skip_final_snapshot, character_set_name, multi_az, source_engine_version, db_subnet_group_name, restore_time, auto_minor_version_upgrade, domain, force_update_password, s3_ingestion_role_arn, purge_tags, kms_key_id, publicly_accessible, domain_iam_role_name, use_latest_restorable_time, port, new_db_instance_identifier, enable_performance_insights, allocated_storage, final_db_snapshot_identifier, monitoring_role_arn, vpc_security_group_ids, promotion_tier, db_cluster_identifier, tags, allow_major_version_upgrade, license_model, storage_encrypted, purge_cloudwatch_logs_exports, performance_insights_kms_key_id, apply_immediately, wait, force_failover, master_user_password, engine_version, option_group_name, processor_features, source_region, s3_prefix, preferred_maintenance_window, monitoring_interval, tde_credential_arn\n\nCreate, modify, and delete RDS instances.',
 'rds_instance_info': 'obtain information about one or more RDS instances\n\nArguments: db_instance_identifier, filters\n\nobtain information about one or more RDS instances\nThis module was called C(rds_instance_facts) before Ansible 2.9. The usage did not change.',
 'rds_param_group': 'manage RDS parameter groups\n\nArguments: engine, name, tags, purge_tags, immediate, state, params, description\n\nCreates, modifies, and deletes RDS parameter groups. This module has a dependency on python-boto >= 2.5.',
 'rds_snapshot': 'manage Amazon RDS snapshots.\n\nArguments: db_instance_identifier, state, wait_timeout, tags, purge_tags, wait, db_snapshot_identifier\n\nCreates or deletes RDS snapshots.',
 'rds_snapshot_info': 'obtain information about one or more RDS snapshots\n\nArguments: db_instance_identifier, db_cluster_snapshot_identifier, db_cluster_identifier, snapshot_type, db_snapshot_identifier\n\nobtain information about one or more RDS snapshots. These can be for unclustered snapshots or snapshots of clustered DBs (Aurora)\nAurora snapshot information may be obtained if no identifier parameters are passed or if one of the cluster parameters are passed.\nThis module was called C(rds_snapshot_facts) before Ansible 2.9. The usage did not change.',
 'rds_subnet_group': 'manage RDS database subnet groups\n\nArguments: subnets, state, name, description\n\nCreates, modifies, and deletes RDS database subnet groups. This module has a dependency on python-boto >= 2.5.',
 'read_csv': 'Read a CSV file\n\nArguments: dialect, skipinitialspace, fieldnames, strict, delimiter, key, path, unique\n\nRead a CSV file and return a list or a dictionary, containing one dictionary per row.',
 'reboot': 'Reboot a machine\n\nArguments: pre_reboot_delay, post_reboot_delay, test_command, reboot_timeout, msg, search_paths, connect_timeout\n\nReboot a machine, wait for it to go down, come back up, and respond to commands.\nFor Windows targets, use the M(win_reboot) module instead.',
 'redfish_command': 'Manages Out-Of-Band controllers using Redfish APIs\n\nArguments: category, username, uefi_target, baseuri, roleid, new_password, new_username, boot_next, command, timeout, password, bootdevice, id\n\nBuilds Redfish URIs locally and sends them to remote OOB controllers to perform an action.\nManages OOB controller ex. reboot, log management.\nManages OOB controller users ex. add, remove, update.\nManages system power ex. on, off, graceful and forced reboot.',
 'redfish_config': 'Manages Out-Of-Band controllers using Redfish APIs\n\nArguments: category, username, bios_attribute_value, baseuri, command, timeout, bios_attribute_name, password\n\nBuilds Redfish URIs locally and sends them to remote OOB controllers to set or update a configuration attribute.\nManages BIOS configuration settings.\nManages OOB controller configuration settings.',
 'redfish_info': 'Manages Out-Of-Band controllers using Redfish APIs\n\nArguments: category, username, command, timeout, baseuri, password\n\nBuilds Redfish URIs locally and sends them to remote OOB controllers to get information back.\nInformation retrieved is placed in a location specified by the user.\nThis module was called C(redfish_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(redfish_info) module no longer returns C(ansible_facts)!',
 'redhat_subscription': 'Manage registration and subscriptions to RHSM using the C(subscription-manager) command\n\nArguments: server_hostname, rhsm_repo_ca_cert, pool_ids, consumer_id, auto_attach, server_insecure, activationkey, server_proxy_password, consumer_name, rhsm_baseurl, pool, server_proxy_port, username, password, consumer_type, org_id, server_proxy_hostname, environment, force_register, state, server_proxy_user, release, syspurpose\n\nManage registration and subscription to the Red Hat Subscription Management entitlement platform using the C(subscription-manager) command',
 'redis': 'Various redis commands, slave and flush\n\nArguments: login_port, name, flush_mode, master_host, login_host, master_port, db, value, command, login_password, slave_mode\n\nUnified utility to interact with redis instances.',
 'redshift': 'create, delete, or modify an Amazon Redshift instance\n\nArguments: cluster_parameter_group_name, username, new_cluster_identifier, number_of_nodes, availability_zone, encrypted, node_type, db_name, publicly_accessible, skip_final_cluster_snapshot, password, port, wait, allow_version_upgrade, cluster_type, elastic_ip, cluster_subnet_group_name, wait_timeout, command, cluster_security_groups, automated_snapshot_retention_period, identifier, cluster_version, final_cluster_snapshot_identifier, preferred_maintenance_window, vpc_security_group_ids\n\nCreates, deletes, or modifies amazon Redshift cluster instances.',
 'redshift_cross_region_snapshots': 'Manage Redshift Cross Region Snapshots\n\nArguments: cluster_name, state, destination_region, snapshot_retention_period, region, snapshot_copy_grant\n\nManage Redshift Cross Region Snapshots. Supports KMS-Encrypted Snapshots.\nFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html#cross-region-snapshot-copy',
 'redshift_info': 'Gather information about Redshift cluster(s)\n\nArguments: cluster_identifier, tags\n\nGather information about Redshift cluster(s)\nThis module was called C(redshift_facts) before Ansible 2.9. The usage did not change.',
 'redshift_subnet_group': 'manage Redshift cluster subnet groups\n\nArguments: group_name, state, group_description, group_subnets\n\nCreate, modifies, and deletes Redshift cluster subnet groups.',
 'replace': 'Replace all instances of a particular string in a file using a back-referenced regular expression\n\nArguments: encoding, after, replace, path, regexp, backup, others, before\n\nThis module will replace all instances of a pattern within a file.\nIt is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.',
 'restconf_config': 'Handles create, update, read and delete of configuration data on RESTCONF enabled devices.\n\nArguments: content, path, method, format\n\nRESTCONF is a standard mechanisms to allow web applications to configure and manage data. RESTCONF is a IETF standard and documented on RFC 8040.\nThis module allows the user to configure data on RESTCONF enabled devices.',
 'restconf_get': 'Fetch configuration/state data from RESTCONF enabled devices.\n\nArguments: content, path, output\n\nRESTCONF is a standard mechanisms to allow web applications to access the configuration data and state data developed and standardized by the IETF. It is documented in RFC 8040.\nThis module allows the user to fetch configuration and state data from RESTCONF enabled devices.',
 'rhevm': 'RHEV/oVirt automation\n\nArguments: vmhost, vmmem, cd_drive, image, cpu_share, insecure_api, cluster, user, password, port, vm_ha, disks, datacenter, name, ifaces, server, state, osver, mempol, timeout, del_prot, boot_order, type, vmcpu\n\nThis module only supports oVirt/RHEV version 3.\nA newer module M(ovirt_vm) supports oVirt/RHV version 4.\nAllows you to create/remove/update or powermanage virtual machines on a RHEV/oVirt platform.',
 'rhn_channel': 'Adds or removes Red Hat software channels\n\nArguments: sysname, state, name, url, password, user\n\nAdds or removes Red Hat software channels.',
 'rhn_register': 'Manage Red Hat Network registration using the C(rhnreg_ks) command\n\nArguments: username, systemorgid, ca_cert, enable_eus, server_url, channels, state, activationkey, profilename, password, nopackages\n\nManage registration to the Red Hat Network.',
 'rhsm_release': 'Set or Unset RHSM Release version\n\nArguments: release\n\nSets or unsets the release version used by RHSM repositories.',
 'rhsm_repository': 'Manage RHSM repositories using the subscription-manager command\n\nArguments: purge, state, name\n\nManage (Enable/Disable) RHSM repositories to the Red Hat Subscription Management entitlement platform using the C(subscription-manager) command.',
 'riak': 'This module handles some common Riak operations\n\nArguments: target_node, config_dir, wait_for_service, http_conn, wait_for_ring, wait_for_handoffs, command, validate_certs\n\nThis module can be used to join nodes to a cluster, check the status of the cluster.',
 'rocketchat': 'Send notifications to Rocket Chat\n\nArguments: username, domain, protocol, attachments, color, icon_url, token, icon_emoji, link_names, msg, validate_certs, channel\n\nThe C(rocketchat) module sends notifications to Rocket Chat via the Incoming WebHook integration',
 'rollbar_deployment': 'Notify Rollbar about app deployments\n\nArguments: comment, rollbar_user, url, environment, token, user, validate_certs, revision\n\nNotify Rollbar about app deployments (see https://rollbar.com/docs/deploys_other/)',
 'route53': 'add or delete entries in Amazons Route53 DNS service\n\nArguments: health_check, weight, hosted_zone_id, wait_timeout, ttl, overwrite, wait, alias_hosted_zone_id, zone, record, region, retry_interval, state, value, alias, private_zone, alias_evaluate_target_health, vpc_id, identifier, type, failover\n\nCreates and deletes DNS records in Amazons Route53 service',
 'route53_health_check': 'add or delete health-checks in Amazons Route53 DNS service\n\nArguments: request_interval, type, fqdn, port, state, resource_path, failure_threshold, ip_address, string_match\n\nCreates and deletes DNS Health checks in Amazons Route53 service\nOnly the port, resource_path, string_match and request_interval are considered when updating existing health-checks.',
 'route53_info': 'Retrieves route53 details using AWS methods\n\nArguments: start_record_name, resource_id, hosted_zone_method, dns_name, health_check_method, delegation_set_id, max_items, hosted_zone_id, health_check_id, change_id, query, next_marker, type\n\nGets various details related to Route53 zone, record set or health check details.\nThis module was called C(route53_facts) before Ansible 2.9. The usage did not change.',
 'route53_zone': 'add or delete Route53 zones\n\nArguments: comment, hosted_zone_id, state, vpc_region, zone, vpc_id, delegation_set_id\n\nCreates and deletes Route53 private and public zones',
 'routeros_command': 'Run commands on remote devices running MikroTik RouterOS\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an RouterOS node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.',
 'routeros_facts': 'Collect facts from remote devices running MikroTik RouterOS\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running RotuerOS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'rpm_key': 'Adds or removes a gpg key from the rpm db\n\nArguments: state, validate_certs, key, fingerprint\n\nAdds or removes (rpm --import) a gpg key to your rpm database.',
 'rundeck_acl_policy': 'Manage Rundeck ACL policies.\n\nArguments: project, policy, state, name, url, token, api_version\n\nCreate, update and remove Rundeck ACL policies through HTTP API.',
 'rundeck_project': 'Manage Rundeck projects.\n\nArguments: url, token, state, api_version, name\n\nCreate and remove Rundeck projects through HTTP API.',
 'runit': 'Manage runit services\n\nArguments: state, enabled, name, service_dir, service_src\n\nControls runit services on remote hosts using the sv utility.',
 's3_bucket': 'Manage S3 buckets in AWS, DigitalOcean, Ceph, Walrus and FakeS3\n\nArguments: force, name, tags, purge_tags, ceph, state, encryption_key_id, encryption, policy, s3_url, requester_pays, versioning\n\nManage S3 buckets in AWS, DigitalOcean, Ceph, Walrus and FakeS3',
 's3_bucket_notification': 'Creates, updates or deletes S3 Bucket notification for lambda\n\nArguments: lambda_alias, suffix, event_name, lambda_function_arn, state, lambda_version, prefix, bucket_name, events\n\nThis module allows the management of AWS Lambda function bucket event mappings via the Ansible framework. Use module M(lambda) to manage the lambda function itself, M(lambda_alias) to manage function aliases and M(lambda_policy) to modify lambda permissions.',
 's3_lifecycle': 'Manage s3 bucket lifecycle rules in AWS\n\nArguments: status, purge_transitions, state, noncurrent_version_transition_days, prefix, expiration_days, noncurrent_version_expiration_days, transitions, transition_days, name, expiration_date, noncurrent_version_storage_class, noncurrent_version_transitions, storage_class, rule_id, transition_date\n\nManage s3 bucket lifecycle rules in AWS',
 's3_logging': 'Manage logging facility of an s3 bucket in AWS\n\nArguments: target_bucket, state, name, target_prefix\n\nManage logging facility of an s3 bucket in AWS',
 's3_sync': 'Efficiently upload multiple files to S3\n\nArguments: file_change_strategy, file_root, permission, bucket, mime_map, mode, exclude, include, cache_control, key_prefix, delete\n\nThe S3 module is great, but it is very slow for a large volume of files- even a dozen will be noticeable. In addition to speed, it handles globbing, inclusions/exclusions, mime types, expiration mapping, recursion, cache control and smart directory mapping.',
 's3_website': 'Configure an s3 bucket as a website\n\nArguments: redirect_all_requests, state, suffix, name, region, error_key\n\nConfigure an s3 bucket as a website',
 'say': 'Makes a computer to speak.\n\nArguments: msg, voice\n\nmakes a computer speak! Amuse your friends, annoy your coworkers!',
 'scaleway_compute': 'Scaleway compute management module\n\nArguments: name, tags, enable_ipv6, wait_sleep_time, public_ip, state, wait_timeout, security_group, organization, commercial_type, region, image, wait\n\nThis module manages compute instances on Scaleway.',
 'scaleway_image_info': 'Gather information about the Scaleway images available.\n\nArguments: region\n\nGather information about the Scaleway images available.',
 'scaleway_ip': 'Scaleway IP management module\n\nArguments: state, reverse, organization, region, id, server\n\nThis module manages IP on Scaleway account U(https://developer.scaleway.com)',
 'scaleway_ip_info': 'Gather information about the Scaleway ips available.\n\nArguments: region\n\nGather information about the Scaleway ips available.',
 'scaleway_lb': 'Scaleway load-balancer management module\n\nArguments: name, tags, region, description, organization_id, state, wait_timeout, wait_sleep_time, wait\n\nThis module manages load-balancers on Scaleway.',
 'scaleway_organization_info': 'Gather information about the Scaleway organizations available.\n\nArguments: api_url\n\nGather information about the Scaleway organizations available.',
 'scaleway_security_group': 'Scaleway Security Group management module\n\nArguments: outbound_default_policy, description, region, stateful, state, inbound_default_policy, organization, organization_default, name\n\nThis module manages Security Group on Scaleway account U(https://developer.scaleway.com).',
 'scaleway_security_group_info': 'Gather information about the Scaleway security groups available.\n\nArguments: region\n\nGather information about the Scaleway security groups available.',
 'scaleway_security_group_rule': 'Scaleway Security Group Rule management module\n\nArguments: direction, protocol, region, action, state, ip_range, security_group, port\n\nThis module manages Security Group Rule on Scaleway account U(https://developer.scaleway.com)',
 'scaleway_server_info': 'Gather information about the Scaleway servers available.\n\nArguments: region\n\nGather information about the Scaleway servers available.',
 'scaleway_snapshot_info': 'Gather information about the Scaleway snapshots available.\n\nArguments: region\n\nGather information about the Scaleway snapshot available.',
 'scaleway_sshkey': 'Scaleway SSH keys management module\n\nArguments: state, ssh_pub_key, api_url\n\nThis module manages SSH keys on Scaleway account U(https://developer.scaleway.com)',
 'scaleway_user_data': 'Scaleway user_data management module\n\nArguments: region, server_id, user_data\n\nThis module manages user_data on compute instances on Scaleway.\nIt can be used to configure cloud-init for instance',
 'scaleway_volume': 'Scaleway volumes management module\n\nArguments: state, name, organization, region, volume_type, size\n\nThis module manages volumes on Scaleway account U(https://developer.scaleway.com)',
 'scaleway_volume_info': 'Gather information about the Scaleway volumes available.\n\nArguments: region\n\nGather information about the Scaleway volumes available.',
 'script': 'Runs a local script on a remote node after transferring it\n\nArguments: creates, executable, chdir, cmd, removes, free_form\n\nThe C(script) module takes the script name followed by a list of space-delimited arguments.\nEither a free form command or C(cmd) parameter is required, see the examples.\nThe local script at path will be transferred to the remote node and then executed.\nThe given script will be processed through the shell environment on the remote node.\nThis module does not require python on the remote system, much like the M(raw) module.\nThis module is also supported for Windows targets.',
 'seboolean': 'Toggles SELinux booleans\n\nArguments: state, persistent, name, ignore_selinux_state\n\nToggles SELinux booleans.',
 'sefcontext': 'Manages SELinux file context mapping definitions\n\nArguments: target, selevel, seuser, state, ignore_selinux_state, reload, setype, ftype\n\nManages SELinux file context mapping definitions.\nSimilar to the C(semanage fcontext) command.',
 'selinux': 'Change policy and state of SELinux\n\nArguments: policy, state, configfile\n\nConfigures the SELinux mode and policy.\nA reboot may be required after usage.\nAnsible will not issue this reboot but will let you know when it is required.',
 'selinux_permissive': 'Change permissive domain in SELinux policy\n\nArguments: domain, no_reload, store, permissive\n\nAdd and remove a domain from the list of permissive domains.',
 'selogin': 'Manages linux user to SELinux user mapping\n\nArguments: reload, state, selevel, login, seuser, ignore_selinux_state\n\nManages linux user to SELinux user mapping',
 'sendgrid': 'Sends an email with the SendGrid API\n\nArguments: username, from_name, from_address, cc, subject, bcc, headers, to_addresses, html_body, api_key, password, attachments\n\nSends an email with a SendGrid account through their API, not through the SMTP service.',
 'sensu_check': 'Manage Sensu checks\n\nArguments: interval, handle, subscribers, metric, subdue_begin, dependencies, occurrences, low_flap_threshold, ttl, aggregate, path, name, standalone, backup, handlers, publish, custom, source, state, command, high_flap_threshold, timeout, subdue_end, refresh\n\nManage the checks that should be run on a machine by I(Sensu).\nMost options do not have a default and will not be added to the check definition unless specified.\nAll defaults except I(path), I(state), I(backup) and I(metric) are not managed by this module,\nthey are simply specified for your convenience.',
 'sensu_client': 'Manages Sensu client configuration\n\nArguments: subscriptions, address, chef, redact, socket, puppet, ec2, safe_mode, registration, deregistration, keepalive, deregister, name, state, keepalives, servicenow\n\nManages Sensu client configuration.\nFor more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/clients.html)',
 'sensu_handler': 'Manages Sensu handler configuration\n\nArguments: filter, name, handlers, filters, severities, pipe, mutator, state, command, timeout, handle_flapping, handle_silenced, type, socket\n\nManages Sensu handler configuration\nFor more information, refer to the Sensu documentation: U(https://sensuapp.org/docs/latest/reference/handlers.html)',
 'sensu_silence': 'Manage Sensu silence entries\n\nArguments: expire_on_resolve, url, creator, state, reason, expire, check, subscription\n\nCreate and clear (delete) a silence entries via the Sensu API for subscriptions and checks.',
 'sensu_subscription': 'Manage Sensu subscriptions\n\nArguments: path, state, backup, name\n\nManage which I(sensu channels) a machine should subscribe to',
 'seport': 'Manages SELinux network port type definitions\n\nArguments: ports, reload, state, proto, setype, ignore_selinux_state\n\nManages SELinux network port type definitions.',
 'serverless': 'Manages a Serverless Framework project\n\nArguments: functions, force, verbose, deploy, region, state, serverless_bin_path, service_path, stage\n\nProvides support for managing Serverless Framework (https://serverless.com/) project deployments and stacks.',
 'service': 'Manage services\n\nArguments: use, name, pattern, enabled, state, sleep, arguments, runlevel\n\nControls services on remote hosts. Supported init systems include BSD init, OpenRC, SysV, Solaris SMF, systemd, upstart.\nFor Windows targets, use the M(win_service) module instead.',
 'service_facts': 'Return service state information as fact data\n\nArguments: \n\nReturn service state information as fact data for various service management utilities',
 'set_fact': 'Set host facts from a task\n\nArguments: key_value, cacheable\n\nThis module allows setting new variables.\nVariables are set on a host-by-host basis just like facts discovered by the setup module.\nThese variables will be available to subsequent plays during an ansible-playbook run.\nSet C(cacheable) to C(yes) to save variables across executions using a fact cache. Variables created with set_fact have different precedence depending on whether they are or are not cached.\nPer the standard Ansible variable precedence rules, many other types of variables have a higher priority, so this value may be overridden.\nThis module is also supported for Windows targets.',
 'set_stats': 'Set stats for the current ansible run\n\nArguments: aggregate, data, per_host\n\nThis module allows setting/accumulating stats on the current ansible run, either per host or for all hosts in the run.\nThis module is also supported for Windows targets.',
 'setup': 'Gathers facts about remote hosts\n\nArguments: filter, gather_subset, fact_path, gather_timeout\n\nThis module is automatically called by playbooks to gather useful variables about remote hosts that can be used in playbooks. It can also be executed directly by C(/usr/bin/ansible) to check what variables are available to a host. Ansible provides many I(facts) about the system, automatically.\nThis module is also supported for Windows targets.',
 'shell': 'Execute shell commands on targets\n\nArguments: creates, executable, chdir, cmd, removes, warn, free_form, stdin_add_newline, stdin\n\nThe C(shell) module takes the command name followed by a list of space-delimited arguments.\nEither a free form command or C(cmd) parameter is required, see the examples.\nIt is almost exactly like the M(command) module but runs the command through a shell (C(/bin/sh)) on the remote node.\nFor Windows targets, use the M(win_shell) module instead.',
 'skydive_capture': 'Module which manages flow capture on interfaces\n\nArguments: capture_name, description, layer_key_mode, state, extra_tcp_metric, ip_defrag, query, reassemble_tcp, interface_name, type\n\nThis module manages flow capture on interfaces. The Gremlin expression is continuously evaluated which means that it is possible to define a capture on nodes that do not exist yet.\nIt is useful when you want to start a capture on all OpenvSwitch whatever the number of Skydive agents you will start.\nWhile starting the capture, user can specify the capture name, capture description and capture type optionally.',
 'skydive_edge': 'Module to add edges to Skydive topology\n\nArguments: state, child_node, parent_node, host, relation_type, metadata\n\nThis module handles setting up edges between two nodes based on the relationship type to the Skydive topology.',
 'skydive_node': 'Module which add nodes to Skydive topology\n\nArguments: state, seed, name, host, node_type, metadata\n\nThis module handles adding node to the Skydive topology.',
 'sl_vm': "create or cancel a virtual instance in SoftLayer\n\nArguments: domain, disks, tags, instance_id, dedicated, private, cpus, image_id, nic_speed, private_vlan, datacenter, public_vlan, wait, hourly, ssh_keys, hostname, os_code, wait_time, local_disk, state, post_uri, memory\n\nCreates or cancels SoftLayer instances.\nWhen created, optionally waits for it to be 'running'.",
 'slack': 'Send Slack notifications\n\nArguments: username, domain, attachments, color, icon_url, parse, thread_id, token, icon_emoji, link_names, msg, validate_certs, channel\n\nThe C(slack) module sends notifications to U(http://slack.com) via the Incoming WebHook integration',
 'slackpkg': "Package manager for Slackware >= 12.2\n\nArguments: state, update_cache, name\n\nManage binary packages for Slackware using 'slackpkg' which is available in versions after 12.2.",
 'slurp': 'Slurps a file from remote nodes\n\nArguments: src\n\nThis module works like M(fetch). It is used for fetching a base64- encoded blob containing the data in a remote file.\nThis module is also supported for Windows targets.',
 'slxos_command': 'Run commands on remote devices running Extreme Networks SLX-OS\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an SLX node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(slxos_config) to configure SLX-OS devices.',
 'slxos_config': 'Manage Extreme Networks SLX-OS configuration sections\n\nArguments: multiline_delimiter, backup_options, after, diff_against, replace, running_config, diff_ignore_lines, src, lines, intended_config, parents, defaults, before, save_when, backup, match\n\nExtreme SLX-OS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with SLX-OS configuration sections in a deterministic way.',
 'slxos_facts': 'Collect facts from devices running Extreme SLX-OS\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running SLX-OS.  This module prepends all of the base network fact keys with C(ansible_net_<fact>).  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'slxos_interface': 'Manage Interfaces on Extreme SLX-OS network devices\n\nArguments: neighbors, rx_rate, name, enabled, mtu, delay, state, aggregate, speed, tx_rate, description\n\nThis module provides declarative management of Interfaces on Extreme SLX-OS network devices.',
 'slxos_l2_interface': 'Manage Layer-2 interface on Extreme Networks SLX-OS devices.\n\nArguments: native_vlan, access_vlan, name, trunk_vlans, state, trunk_allowed_vlans, mode, aggregate\n\nThis module provides declarative management of Layer-2 interface on Extreme slxos devices.',
 'slxos_l3_interface': 'Manage L3 interfaces on Extreme Networks SLX-OS network devices.\n\nArguments: aggregate, state, ipv4, name, ipv6\n\nThis module provides declarative management of L3 interfaces on slxos network devices.',
 'slxos_linkagg': 'Manage link aggregation groups on Extreme Networks SLX-OS network devices\n\nArguments: purge, state, group, mode, members, aggregate\n\nThis module provides declarative management of link aggregation groups on Extreme Networks SLX-OS network devices.',
 'slxos_lldp': 'Manage LLDP configuration on Extreme Networks SLX-OS network devices.\n\nArguments: state\n\nThis module provides declarative management of LLDP service on Extreme SLX-OS network devices.',
 'slxos_vlan': 'Manage VLANs on Extreme Networks SLX-OS network devices\n\nArguments: purge, delay, state, name, aggregate, interfaces, vlan_id\n\nThis module provides declarative management of VLANs on Extreme SLX-OS network devices.',
 'smartos_image_info': 'Get SmartOS image details.\n\nArguments: filters\n\nRetrieve information about all installed images on SmartOS.\nThis module was called C(smartos_image_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(smartos_image_info) module no longer returns C(ansible_facts)!',
 'snap': 'Manages snaps\n\nArguments: state, name, channel, classic\n\nManages snaps packages.',
 'snmp_facts': 'Retrieve facts for a device using SNMP\n\nArguments: username, level, privacy, community, authkey, host, version, integrity, privkey\n\nRetrieve facts for a device using SNMP, the facts will be inserted to the ansible_facts key.',
 'snow_record': 'Manage records in ServiceNow\n\nArguments: state, attachment, table, lookup_field, data, number\n\nCreates, deletes and updates a single record in ServiceNow.',
 'snow_record_find': 'Search for multiple records from ServiceNow\n\nArguments: table, max_records, return_fields, order_by, query\n\nGets multiple records from a specified table from ServiceNow based on a query dictionary.',
 'sns': 'Send Amazon Simple Notification Service messages\n\nArguments: http, sqs, sms, subject, topic, application, https, msg, message_attributes, email_json, email, message_structure, lambda\n\nSends a notification to a topic on your Amazon SNS account.',
 'sns_topic': 'Manages AWS SNS topics and subscriptions\n\nArguments: state, display_name, name, subscriptions, policy, purge_subscriptions, delivery_policy\n\nThe C(sns_topic) module allows you to create, delete, and manage subscriptions for AWS SNS topics. As of 2.6, this module can be use to subscribe and unsubscribe to topics outside of your AWS account.',
 'solaris_zone': 'Manage Solaris zones\n\nArguments: install_options, name, sparse, create_options, state, root_password, timeout, path, config, attach_options\n\nCreate, start, stop and delete Solaris zones.\nThis module does not currently allow changing of options for a zone that is already been created.',
 'sorcery': 'Package manager for Source Mage GNU/Linux\n\nArguments: depends, update_cache, name, state, update, cache_valid_time\n\nManages "spells" on Source Mage GNU/Linux using I(sorcery) toolchain',
 'spectrum_device': 'Creates/deletes devices in CA Spectrum.\n\nArguments: url_password, use_proxy, url, community, agentport, state, url_username, device, validate_certs, landscape\n\nThis module allows you to create and delete devices in CA Spectrum U(https://www.ca.com/us/products/ca-spectrum.html).\nTested on CA Spectrum 9.4.2, 10.1.1 and 10.2.1',
 'spotinst_aws_elastigroup': 'Create, update or delete Spotinst AWS Elastigroups\n\nArguments: ebs_volume_pool, opsworks, ebs_optimized, roll_config, shutdown_script, elastic_ips, account_id, chef, iam_role_name, spin_up_time, id, unit, risk, availability_zones, monitoring, kubernetes, right_scale, health_check_grace_period, draining_timeout, target_group_arns, iam_role_arn, name, signals, state, health_check_type, key_pair, down_scaling_policies, health_check_unhealthy_duration_before_replacement, rancher, on_demand_count, fallback_to_od, on_demand_instance_type, ignore_changes, product, scheduled_tasks, target_tracking_policies, tags, mesosphere, min_size, image_id, wait_timeout, ecs, terminate_at_end_of_billing_hour, load_balancers, security_group_ids, max_size, block_device_mappings, uniqueness_by, credentials_path, up_scaling_policies, availability_vs_cost, network_interfaces, lifetime_period, tenancy, user_data, persistence, utilize_reserved_instances, target, wait_for_instances, spot_instance_types\n\nCan create, update, or delete Spotinst AWS Elastigroups Launch configuration is part of the elastigroup configuration, so no additional modules are necessary for handling the launch configuration. You will have to have a credentials file in this location - <home>/.spotinst/credentials The credentials file must contain a row that looks like this token = <YOUR TOKEN> Full documentation available at https://help.spotinst.com/hc/en-us/articles/115003530285-Ansible-',
 'sqs_queue': 'Creates or deletes AWS SQS queues.\n\nArguments: message_retention_period, name, delivery_delay, default_visibility_timeout, state, maximum_message_size, policy, redrive_policy, receive_message_wait_time\n\nCreate or delete AWS SQS queues.\nUpdate attributes on existing queues.',
 'sros_command': 'Run commands on remote devices running Nokia SR OS\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an SR OS node and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(sros_config) to configure SR OS devices.',
 'sros_config': 'Manage Nokia SR OS device configuration\n\nArguments: src, backup_options, force, backup, after, lines, replace, parents, defaults, save, config, match, before\n\nNokia SR OS configurations use a simple block indent file syntax for segmenting configuration into sections.  This module provides an implementation for working with SR OS configuration sections in a deterministic way.',
 'sros_rollback': 'Configure Nokia SR OS rollback\n\nArguments: state, local_max_checkpoints, rescue_location, rollback_location, remote_max_checkpoints\n\nConfigure the rollback feature on remote Nokia devices running the SR OS operating system.  this module provides a stateful implementation for managing the configuration of the rollback feature',
 'ss_3par_cpg': 'Manage HPE StoreServ 3PAR CPG\n\nArguments: domain, secure, cpg_name, raid_type, growth_increment, state, set_size, growth_warning, disk_type, growth_limit, high_availability\n\nCreate and delete CPG on HPE 3PAR.',
 'stackdriver': 'Send code deploy and annotation events to stackdriver\n\nArguments: repository, level, annotated_by, deployed_to, deployed_by, instance_id, key, msg, event_epoch, revision_id, event\n\nSend code deploy and annotation events to Stackdriver',
 'stacki_host': 'Add or remove host to stacki front-end\n\nArguments: prim_intf_ip, name, stacki_user, stacki_endpoint, prim_intf, stacki_password, force_install, prim_intf_mac\n\nUse this module to add or remove hosts to a stacki front-end via API.\nU(https://github.com/StackIQ/stacki)',
 'stat': "Retrieve file or file system status\n\nArguments: get_checksum, follow, checksum_algorithm, path, get_mime, get_attributes\n\nRetrieves facts for a file similar to the Linux/Unix 'stat' command.\nFor Windows targets, use the M(win_stat) module instead.",
 'statusio_maintenance': 'Create maintenance windows for your status.io dashboard\n\nArguments: maintenance_notify_72_hr, maintenance_notify_now, start_time, api_id, automation, maintenance_notify_24_hr, all_infrastructure_affected, maintenance_id, desc, maintenance_notify_1_hr, title, url, state, components, statuspage, api_key, minutes, start_date, containers\n\nCreates a maintenance window for status.io\nDeletes a maintenance window for status.io',
 'sts_assume_role': 'Assume a role using AWS Security Token Service and obtain temporary credentials\n\nArguments: role_session_name, mfa_token, role_arn, duration_seconds, policy, mfa_serial_number, external_id\n\nAssume a role using AWS Security Token Service and obtain temporary credentials',
 'sts_session_token': 'Obtain a session token from the AWS Security Token Service\n\nArguments: mfa_token, mfa_serial_number, duration_seconds\n\nObtain a session token from the AWS Security Token Service',
 'subversion': 'Deploys a subversion repository\n\nArguments: username, executable, force, dest, update, repo, switch, export, in_place, password, checkout, revision\n\nDeploy given repository URL / revision to dest. If dest exists, update to the specified revision, otherwise perform a checkout.',
 'supervisorctl': 'Manage the state of a program or group of programs running via supervisord\n\nArguments: username, supervisorctl_path, name, signal, server_url, state, password, config\n\nManage the state of a program or group of programs running via supervisord',
 'svc': 'Manage daemontools services\n\nArguments: service_dir, name, downed, enabled, state, service_src\n\nControls daemontools services on remote hosts using the svc utility.',
 'svr4pkg': 'Manage Solaris SVR4 packages\n\nArguments: category, src, state, name, zone, response_file, proxy\n\nManages SVR4 packages on Solaris 10 and 11.\nThese were the native packages on Solaris <= 10 and are available as a legacy feature in Solaris 11.\nNote that this is a very basic packaging system. It will not enforce dependencies on install or remove.',
 'swdepot': 'Manage packages with swdepot package manager (HP-UX)\n\nArguments: state, depot, name\n\nWill install, upgrade and remove packages with swdepot package manager (HP-UX)',
 'swupd': 'Manages updates and bundles in ClearLinux systems.\n\nArguments: contenturl, name, format, url, verify, update, manifest, state, versionurl\n\nManages updates and bundles with the swupd bundle manager, which is used by the Clear Linux Project for Intel Architecture.',
 'synchronize': 'A wrapper around rsync to make common tasks in your playbooks quick and easy\n\nArguments: dirs, private_key, partial, links, copy_links, perms, compress, rsync_timeout, rsync_opts, owner, existing_only, set_remote_user, times, rsync_path, dest_port, src, group, link_dest, recursive, archive, dest, mode, checksum, verify_host, use_ssh_args, delete\n\nC(synchronize) is a wrapper around rsync to make common tasks in your playbooks quick and easy.\nIt is run and originates on the local host where Ansible is being run.\nOf course, you could just use the C(command) action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts.\nThis module is not intended to provide access to the full power of rsync, but does make the most common invocations easier to implement. You `still` may need to call rsync directly via C(command) or C(shell) depending on your use case.',
 'sysctl': 'Manage entries in sysctl.conf.\n\nArguments: reload, state, name, sysctl_set, ignoreerrors, sysctl_file, value\n\nThis module manipulates sysctl entries and optionally performs a C(/sbin/sysctl -p) after changing them.',
 'syslogger': 'Log messages in the syslog\n\nArguments: msg, priority, facility, log_pid\n\nUses syslog to add log entries to the host.\nCan specify facility and priority.',
 'syspatch': 'Manage OpenBSD system patches\n\nArguments: apply, revert\n\nManage OpenBSD system patches using syspatch',
 'systemd': 'Manage services\n\nArguments: no_block, force, name, daemon_reexec, enabled, daemon_reload, state, masked, scope, user\n\nControls systemd services on remote hosts.',
 'sysvinit': 'Manage SysV services.\n\nArguments: name, runlevels, pattern, enabled, state, daemonize, sleep, arguments\n\nControls services on target hosts that use the SysV init system.',
 'taiga_issue': 'Creates/deletes an issue in a Taiga Project Management Platform\n\nArguments: status, project, severity, tags, priority, taiga_host, state, attachment, issue_type, subject, attachment_description, description\n\nCreates/deletes an issue in a Taiga Project Management Platform (U(https://taiga.io)).\nAn issue is identified by the combination of project, issue subject and issue type.\nThis module implements the creation or deletion of issues (not the update).',
 'telegram': 'module for sending notifications via telegram\n\nArguments: msg, msg_format, token, chat_id\n\nSend notifications via telegram bot, to a verified group or user',
 'telnet': 'Executes a low-down and dirty telnet command\n\nArguments: pause, password_prompt, host, prompts, command, user, timeout, login_prompt, password, port, send_newline\n\nExecutes a low-down and dirty telnet command, not going through the module subsystem.\nThis is mostly to be used for enabling ssh on devices that only have telnet enabled by default.',
 'tempfile': 'Creates temporary files and directories\n\nArguments: path, state, prefix, suffix\n\nThe C(tempfile) module creates temporary files and directories. C(mktemp) command takes different parameters on various systems, this module helps to avoid troubles related to that. Files/directories created by module are accessible only by creator. In case you need to make them world-accessible you need to use M(file) module.\nFor Windows targets, use the M(win_tempfile) module instead.',
 'template': 'Template a file out to a remote server\n\nArguments: follow\n\nTemplate a file out to a remote server',
 'terraform': 'Manages a Terraform deployment (and plans)\n\nArguments: variables_file, backend_config, lock_timeout, lock, variables, project_path, state, plan_file, purge_workspace, state_file, workspace, force_init, binary_path, targets\n\nProvides support for deploying resources with Terraform and pulling resource information back into Ansible.',
 'timezone': 'Configure timezone setting\n\nArguments: hwclock, name\n\nThis module configures the timezone setting, both of the system clock and of the hardware clock. If you want to set up the NTP, use M(service) module.\nIt is recommended to restart C(crond) after changing the timezone, otherwise the jobs may run at the wrong time.\nSeveral different tools are used depending on the OS/Distribution involved. For Linux it can use C(timedatectl) or edit C(/etc/sysconfig/clock) or C(/etc/timezone) and C(hwclock). On SmartOS, C(sm-set-timezone), for macOS, C(systemsetup), for BSD, C(/etc/localtime) is modified. On AIX, C(chtz) is used.\nAs of Ansible 2.3 support was added for SmartOS and BSDs.\nAs of Ansible 2.4 support was added for macOS.\nAs of Ansible 2.9 support was added for AIX 6.1+\nWindows and HPUX are not supported, please let us know if you find any other OS/distro in which this fails.',
 'tower_credential': 'create, update, or destroy Ansible Tower credential.\n\nArguments: authorize, username, domain, description, vault_password, team, host, vault_id, user, become_password, become_username, password, tenant, subscription, kind, become_method, name, security_token, secret, project, state, client, ssh_key_data, ssh_key_unlock, organization, authorize_password\n\nCreate, update, or destroy Ansible Tower credentials. See U(https://www.ansible.com/tower) for an overview.',
 'tower_credential_type': 'Create, update, or destroy custom Ansible Tower credential type.\n\nArguments: inputs, kind, name, injectors, validate_certs, state, description\n\nCreate, update, or destroy Ansible Tower credential type. See U(https://www.ansible.com/tower) for an overview.',
 'tower_group': 'create, update, or destroy Ansible Tower group.\n\nArguments: credential, source_vars, source_script, update_on_launch, overwrite_vars, source_regions, variables, description, instance_filters, source, state, group_by, inventory, overwrite, name\n\nCreate, update, or destroy Ansible Tower groups. See U(https://www.ansible.com/tower) for an overview.',
 'tower_host': 'create, update, or destroy Ansible Tower host.\n\nArguments: state, name, variables, description, enabled, inventory\n\nCreate, update, or destroy Ansible Tower hosts. See U(https://www.ansible.com/tower) for an overview.',
 'tower_inventory': 'create, update, or destroy Ansible Tower inventory.\n\nArguments: host_filter, kind, name, organization, variables, state, description\n\nCreate, update, or destroy Ansible Tower inventories. See U(https://www.ansible.com/tower) for an overview.',
 'tower_inventory_source': 'create, update, or destroy Ansible Tower inventory source.\n\nArguments: credential, description, overwrite_vars, source_regions, overwrite, name, source_vars, source_script, update_on_launch, source, update_cache_timeout, source_project, source_path, instance_filters, update_on_project_update, state, group_by, inventory, timeout, validate_certs\n\nCreate, update, or destroy Ansible Tower inventories source. See U(https://www.ansible.com/tower) for an overview.',
 'tower_job_cancel': 'Cancel an Ansible Tower Job.\n\nArguments: job_id, fail_if_not_running\n\nCancel Ansible Tower jobs. See U(https://www.ansible.com/tower) for an overview.',
 'tower_job_launch': 'Launch an Ansible Job.\n\nArguments: credential, use_job_endpoint, job_template, tags, extra_vars, job_explanation, job_type, limit, inventory\n\nLaunch an Ansible Tower jobs. See U(https://www.ansible.com/tower) for an overview.',
 'tower_job_list': 'List Ansible Tower jobs.\n\nArguments: status, query, page, all_pages\n\nList Ansible Tower jobs. See U(https://www.ansible.com/tower) for an overview.',
 'tower_job_template': 'create, update, or destroy Ansible Tower job template.\n\nArguments: ask_diff_mode, ask_limit, job_type, ask_job_type, skip_tags, playbook, survey_enabled, job_tags, force_handlers_enabled, state, inventory, limit, forks, concurrent_jobs_enabled, vault_credential, diff_mode_enabled, become_enabled, credential, ask_verbosity, description, fact_caching_enabled, ask_skip_tags, start_at_task, ask_inventory, host_config_key, survey_spec, ask_credential, name, verbosity, project, ask_extra_vars, extra_vars_path, ask_tags\n\nCreate, update, or destroy Ansible Tower job templates. See U(https://www.ansible.com/tower) for an overview.',
 'tower_job_wait': 'Wait for Ansible Tower job to finish.\n\nArguments: min_interval, max_interval, job_id, timeout\n\nWait for Ansible Tower job to finish and report success or failure. See U(https://www.ansible.com/tower) for an overview.',
 'tower_label': 'create, update, or destroy Ansible Tower label.\n\nArguments: organization, state, name\n\nCreate, update, or destroy Ansible Tower labels. See U(https://www.ansible.com/tower) for an overview.',
 'tower_notification': 'create, update, or destroy Ansible Tower notification.\n\nArguments: message_from, color, channels, from_number, rooms, use_ssl, notification_type, service_key, account_sid, notification_configuration, port, api_url, client_name, targets, use_tls, state, subdomain, username, description, recipients, host, to_numbers, password, nickname, sender, name, url, account_token, server, headers, token, organization, notify\n\nCreate, update, or destroy Ansible Tower notifications. See U(https://www.ansible.com/tower) for an overview.',
 'tower_organization': 'create, update, or destroy Ansible Tower organizations\n\nArguments: state, name, description\n\nCreate, update, or destroy Ansible Tower organizations. See U(https://www.ansible.com/tower) for an overview.',
 'tower_project': 'create, update, or destroy Ansible Tower projects\n\nArguments: scm_branch, name, scm_update_cache_timeout, scm_credential, scm_clean, scm_url, scm_delete_on_update, state, local_path, scm_type, custom_virtualenv, organization, scm_update_on_launch, job_timeout, description\n\nCreate, update, or destroy Ansible Tower projects. See U(https://www.ansible.com/tower) for an overview.',
 'tower_receive': 'Receive assets from Ansible Tower.\n\nArguments: credential, all, job_template, workflow, inventory_script, project, credential_type, user, team, organization, notification_template, inventory\n\nReceive assets from Ansible Tower. See U(https://www.ansible.com/tower) for an overview.',
 'tower_role': 'create, update, or destroy Ansible Tower role.\n\nArguments: credential, job_template, project, state, role, inventory, team, organization, target_team, user\n\nCreate, update, or destroy Ansible Tower roles. See U(https://www.ansible.com/tower) for an overview.',
 'tower_send': 'Send assets to Ansible Tower.\n\nArguments: files, prevent, assets, password_management\n\nSend assets to Ansible Tower. See U(https://www.ansible.com/tower) for an overview.',
 'tower_settings': 'Modify Ansible Tower settings.\n\nArguments: name, value\n\nModify Ansible Tower settings. See U(https://www.ansible.com/tower) for an overview.',
 'tower_team': 'create, update, or destroy Ansible Tower team.\n\nArguments: organization, state, name\n\nCreate, update, or destroy Ansible Tower teams. See U(https://www.ansible.com/tower) for an overview.',
 'tower_user': 'create, update, or destroy Ansible Tower user.\n\nArguments: username, superuser, first_name, last_name, state, auditor, password, email\n\nCreate, update, or destroy Ansible Tower users. See U(https://www.ansible.com/tower) for an overview.',
 'tower_workflow_launch': 'Run a workflow in Ansible Tower\n\nArguments: workflow_template, extra_vars, timeout, wait\n\nLaunch an Ansible Tower workflows. See U(https://www.ansible.com/tower) for an overview.',
 'tower_workflow_template': 'create, update, or destroy Ansible Tower workflow template.\n\nArguments: description, allow_simultaneous, extra_vars, name, state, ask_extra_vars, survey, inventory, ask_inventory, organization, survey_enabled, schema\n\nCreate, update, or destroy Ansible Tower workflows. See U(https://www.ansible.com/tower) for an overview.',
 'twilio': 'Sends a text message to a mobile phone through Twilio.\n\nArguments: from_number, to_numbers, msg, auth_token, media_url, account_sid\n\nSends a text message to a phone number through the Twilio messaging API.',
 'typetalk': 'Send a message to typetalk\n\nArguments: topic, client_secret, client_id, msg\n\nSend a message to typetalk using typetalk API',
 'ucs_disk_group_policy': 'Configures disk group policies on Cisco UCS Manager\n\nArguments: configuration_mode, name, description, use_remaining_disks, raid_level, org_dn, virtual_drive, state, num_ded_hot_spares, drive_type, num_drives, min_drive_size, num_glob_hot_spares, manual_disks\n\nConfigures disk group policies on Cisco UCS Manager.\nExamples can be used with the L(UCS Platform Emulator,https://communities.cisco.com/ucspe).',
 'ucs_dns_server': 'Configure DNS servers on Cisco UCS Manager\n\nArguments: delegate_to, state, dns_server, description\n\nConfigure DNS servers on Cisco UCS Manager.\nExamples can be used with the L(UCS Platform Emulator,https://communities.cisco.com/ucspe).',
 'ucs_ip_pool': 'Configures IP address pools on Cisco UCS Manager\n\nArguments: ipv6_primary_dns, description, default_gw, org_dn, subnet_mask, ipv6_first_addr, ipv6_secondary_dns, secondary_dns, name, last_addr, primary_dns, state, first_addr, order, ipv6_last_addr, ipv6_prefix, ipv6_default_gw\n\nConfigures IP address pools and blocks of IP addresses on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_lan_connectivity': 'Configures LAN Connectivity Policies on Cisco UCS Manager\n\nArguments: state, name, iscsi_vnic_list, org_dn, vnic_list, description\n\nConfigures LAN Connectivity Policies on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_mac_pool': 'Configures MAC address pools on Cisco UCS Manager\n\nArguments: state, name, last_addr, description, org_dn, first_addr, order\n\nConfigures MAC address pools and MAC address blocks on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_managed_objects': 'Configures Managed Objects on Cisco UCS Manager\n\nArguments: state, objects\n\nConfigures Managed Objects on Cisco UCS Manager.\nThe Python SDK module, Python class within the module (UCSM Class), and all properties must be directly specified.\nMore information on the UCSM Python SDK and how to directly configure Managed Objects is available at L(UCSM Python SDK,http://ucsmsdk.readthedocs.io/).\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_ntp_server': 'Configures NTP server on Cisco UCS Manager\n\nArguments: state, ntp_server, description\n\nConfigures NTP server on Cisco UCS Manager.\nExamples can be used with the L(UCS Platform Emulator,https://communities.cisco.com/ucspe).',
 'ucs_org': 'Manages UCS Organizations for UCS Manager\n\nArguments: org_name, delegate_to, state, parent_org_path, description\n\nManages UCS Organizations for UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://cs.co/ucspe).',
 'ucs_san_connectivity': 'Configures SAN Connectivity Policies on Cisco UCS Manager\n\nArguments: vhba_list, state, name, wwnn_pool, org_dn, description\n\nConfigures SAN Connectivity Policies on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_service_profile_template': 'Configures Service Profile Templates on Cisco UCS Manager\n\nArguments: mgmt_interface_mode, server_pool_qualification, description, storage_profile, san_connectivity_policy, mgmt_vnet_name, org_dn, lan_connectivity_policy, template_type, iqn_pool, state, maintenance_policy, bios_policy, power_state, user_label, server_pool, mgmt_inband_pool_name, ipmi_access_profile, local_disk_policy, power_control_policy, power_sync_policy, kvm_mgmt_policy, sol_policy, name, scrub_policy, threshold_policy, mgmt_ip_pool, boot_policy, host_firmware_package, uuid_pool, graphics_card_policy, vmedia_policy\n\nConfigures Service Profile Templates on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_storage_profile': 'Configures storage profiles on Cisco UCS Manager\n\nArguments: local_luns, description, state, name, org_dn\n\nConfigures storage profiles on Cisco UCS Manager.\nExamples can be used with the L(UCS Platform Emulator,https://communities.cisco.com/ucspe).',
 'ucs_timezone': 'Configures timezone on Cisco UCS Manager\n\nArguments: timezone, state, admin_state, description\n\nConfigures timezone on Cisco UCS Manager.\nExamples can be used with the L(UCS Platform Emulator,https://communities.cisco.com/ucspe).',
 'ucs_uuid_pool': 'Configures server UUID pools on Cisco UCS Manager\n\nArguments: name, last_uuid, org_dn, prefix, state, first_uuid, order, description\n\nConfigures server UUID pools and UUID blocks on Cisco UCS Manager.\nExamples can be used with the L(UCS Platform Emulator,https://communities.cisco.com/ucspe).',
 'ucs_vhba_template': 'Configures vHBA templates on Cisco UCS Manager\n\nArguments: redundancy_type, fabric, stats_policy, org_dn, name, template_type, max_data, state, wwpn_pool, pin_group, qos_policy, vsan, description\n\nConfigures vHBA templates on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_vlan_find': 'Find VLANs on Cisco UCS Manager\n\nArguments: pattern, fabric, vlanid\n\nFind VLANs on Cisco UCS Manager based on different criteria.',
 'ucs_vlans': 'Configures VLANs on Cisco UCS Manager\n\nArguments: state, sharing, fabric, name, multicast_policy, id, native\n\nConfigures VLANs on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_vnic_template': 'Configures vNIC templates on Cisco UCS Manager\n\nArguments: redundancy_type, cdn_name, stats_policy, network_control_policy, cdn_source, description, fabric, vlans_list, name, org_dn, mtu, template_type, state, mac_pool, target, pin_group, qos_policy, peer_redundancy_template\n\nConfigures vNIC templates on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_vsans': 'Configures VSANs on Cisco UCS Manager\n\nArguments: state, fabric, vlan_id, vsan_id, fc_zoning, name\n\nConfigures VSANs on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'ucs_wwn_pool': 'Configures WWNN or WWPN pools on Cisco UCS Manager\n\nArguments: description, last_addr, org_dn, first_addr, state, purpose, order, name\n\nConfigures WWNNs or WWPN pools on Cisco UCS Manager.\nExamples can be used with the UCS Platform Emulator U(https://communities.cisco.com/ucspe).',
 'udm_dns_record': 'Manage dns entries on a univention corporate server\n\nArguments: type, state, data, name, zone\n\nThis module allows to manage dns records on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.',
 'udm_dns_zone': 'Manage dns zones on a univention corporate server\n\nArguments: retry, zone, interfaces, refresh, state, contact, expire, ttl, nameserver, type, mx\n\nThis module allows to manage dns zones on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.',
 'udm_group': 'Manage of the posix group\n\nArguments: state, name, position, ou, subpath, description\n\nThis module allows to manage user groups on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.',
 'udm_share': 'Manage samba shares on a univention corporate server\n\nArguments: samba_name, samba_hide_files, samba_blocking_locks, samba_directory_mode, samba_dos_filemode, samba_postexec, owner, samba_fake_oplocks, samba_strict_locking, samba_public, samba_force_directory_security_mode, group, samba_writeable, samba_nt_acl_support, samba_write_list, samba_preexec, samba_browseable, samba_inherit_acls, samba_msdfs_root, state, samba_valid_users, samba_force_create_mode, root_squash, samba_directory_security_mode, samba_force_group, samba_vfs_objects, samba_force_directory_mode, writeable, samba_locking, samba_security_mode, samba_inherit_owner, samba_csc_policy, sync, nfs_hosts, path, nfs_custom_settings, samba_force_user, name, samba_invalid_users, samba_create_mode, samba_force_security_mode, samba_level_2_oplocks, samba_custom_settings, samba_hide_unreadable, host, samba_block_size, samba_oplocks, samba_hosts_allow, samba_inherit_permissions, subtree_checking, directorymode, ou, samba_hosts_deny\n\nThis module allows to manage samba shares on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.',
 'udm_user': 'Manage posix users on a univention corporate server\n\nArguments: update_password, samba_user_workstations, homedrive, room_number, primary_group, postcode, scriptpath, home_share, override_pw_history, city, display_name, pager_telephonenumber, employee_number, serviceprovider, organisation, subpath, state, home_share_path, userexpiry, unixhome, mail_home_server, email, sambahome, username, home_telephone_number, shell, description, firstname, lastname, mail_alternative_address, phone, birthday, groups, profilepath, employee_type, password, pwd_change_next_login, mail_primary_address, country, title, override_pw_length, street, gecos, mobile_telephone_number, position, ou, department_number, samba_privileges, secretary\n\nThis module allows to manage posix users on a univention corporate server (UCS). It uses the python API of the UCS to create a new object or edit it.',
 'ufw': 'Manage firewall with UFW\n\nArguments: comment, direction, from_port, to_ip, to_port, from_ip, interface, name, insert, logging, log, proto, default, route, rule, insert_relative_to, state, delete\n\nManage firewall with UFW.',
 'unarchive': 'Unpacks an archive after (optionally) copying it from the local machine.\n\nArguments: src, remote_src, dest, list_files, keep_newer, creates, exclude, extra_opts, copy, validate_certs\n\nThe C(unarchive) module unpacks an archive. It will not unpack a compressed file that does not contain an archive.\nBy default, it will copy the source file from the local system to the target before unpacking.\nSet C(remote_src=yes) to unpack an archive which already exists on the target.\nIf checksum validation is desired, use M(get_url) or M(uri) instead to fetch the file and set C(remote_src=yes).\nFor Windows targets, use the M(win_unzip) module instead.',
 'uptimerobot': 'Pause and start Uptime Robot monitoring\n\nArguments: monitorid, state, apikey\n\nThis module will let you start and pause Uptime Robot Monitoring',
 'uri': 'Interacts with webservices\n\nArguments: body, force, timeout, remote_src, dest, follow_redirects, force_basic_auth, removes, http_agent, body_format, client_key, src, use_proxy, headers, url, method, creates, unix_socket, url_password, url_username, status_code, return_content, validate_certs, client_cert\n\nInteracts with HTTP and HTTPS web services and supports Digest, Basic and WSSE HTTP authentication mechanisms.\nFor Windows targets, use the M(win_uri) module instead.',
 'urpmi': 'Urpmi manager\n\nArguments: no-recommends, force, name, update_cache, root, state\n\nManages packages with I(urpmi) (such as for Mageia or Mandriva)',
 'user': 'Manage user accounts\n\nArguments: comment, ssh_key_bits, update_password, non_unique, force, skeleton, create_home, password_lock, ssh_key_passphrase, home, append, uid, ssh_key_comment, group, system, state, role, hidden, ssh_key_type, authorization, profile, shell, expires, ssh_key_file, groups, move_home, password, name, local, seuser, remove, login_class, generate_ssh_key\n\nManage user accounts and user attributes.\nFor Windows targets, use the M(win_user) module instead.',
 'utm_aaa_group': 'Create, update or destroy an aaa group object in Sophos UTM.\n\nArguments: comment, ipsec_dn, ldap_attribute, name, adirectory_groups, dynamic, edirectory_groups, adirectory_groups_sids, ldap_attribute_value, members, tacacs_groups, backend_match, radius_groups, network\n\nCreate, update or destroy an aaa group object in Sophos UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_aaa_group_info': 'get info for reverse_proxy frontend entry in Sophos UTM\n\nArguments: name\n\nget info for a reverse_proxy frontend entry in SOPHOS UTM.',
 'utm_ca_host_key_cert': 'create, update or destroy ca host_key_cert entry in Sophos UTM\n\nArguments: comment, key, meta, name, certificate, encrypted, ca\n\nCreate, update or destroy a ca host_key_cert entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_ca_host_key_cert_info': 'Get info for a ca host_key_cert entry in Sophos UTM\n\nArguments: name\n\nGet info for a ca host_key_cert entry in SOPHOS UTM.',
 'utm_dns_host': 'create, update or destroy dns entry in Sophos UTM\n\nArguments: comment, resolved, name, resolved6, hostname, address6, timeout, address, interface\n\nCreate, update or destroy a dns entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_network_interface_address': 'Create, update or destroy network/interface_address object\n\nArguments: comment, resolved, name, resolved6, address, address6\n\nCreate, update or destroy a network/interface_address object in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_network_interface_address_info': 'Get info for a network/interface_address object\n\nArguments: name\n\nGet info for a network/interface_address object in SOPHOS UTM.',
 'utm_proxy_auth_profile': 'create, update or destroy reverse_proxy auth_profile entry in Sophos UTM\n\nArguments: comment, frontend_session_allow_persistency, frontend_session_timeout_scope, frontend_form, logout_mode, backend_user_prefix, frontend_session_lifetime_scope, frontend_session_timeout, frontend_session_lifetime_limited, backend_mode, backend_strip_basic_auth, logout_delegation_urls, frontend_mode, frontend_cookie, frontend_logout, aaa, name, frontend_realm, frontend_session_timeout_enabled, frontend_login, basic_prompt, frontend_session_lifetime, backend_user_suffix, frontend_form_template, redirect_to_requested_url, frontend_cookie_secret\n\nCreate, update or destroy a reverse_proxy auth_profile entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_proxy_exception': 'Create, update or destroy reverse_proxy exception entry in Sophos UTM\n\nArguments: status, skipav, skipbadclients, name, skipform, skipcookie, skipurl, skiptft, skipform_missingtoken, source, skiphtmlrewrite, skip_threats_filter_categories, skip_custom_threats_filters, path, op\n\nCreate, update or destroy a reverse_proxy exception entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_proxy_frontend': 'create, update or destroy reverse_proxy frontend entry in Sophos UTM\n\nArguments: comment, profile, domain, allowed_networks, implicitredirect, locations, disable_compression, preservehost, address, port, htmlrewrite, name, certificate, xheaders, status, add_content_type_header, htmlrewrite_cookies, exceptions, type, lbmethod\n\nCreate, update or destroy a reverse_proxy frontend entry in Sophos UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_proxy_frontend_info': 'create, update or destroy reverse_proxy frontend entry in Sophos UTM\n\nArguments: name\n\nCreate, update or destroy a reverse_proxy frontend entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_proxy_location': 'create, update or destroy reverse_proxy location entry in Sophos UTM\n\nArguments: comment, hot_standby, name, denied_networks, stickysession_id, auth_profile, websocket_passthrough, status, stickysession_status, access_control, path, be_path, allowed_networks, backend\n\nCreate, update or destroy a reverse_proxy location entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'utm_proxy_location_info': 'create, update or destroy reverse_proxy location entry in Sophos UTM\n\nArguments: name\n\nCreate, update or destroy a reverse_proxy location entry in SOPHOS UTM.\nThis module needs to have the REST Ability of the UTM to be activated.',
 'vca_fw': 'add remove firewall rules in a gateway  in a vca\n\nArguments: fw_rules\n\nAdds or removes firewall rules from a gateway in a vca environment',
 'vca_nat': 'add remove nat rules in a gateway  in a vca\n\nArguments: nat_rules, purge_rules\n\nAdds or removes nat rules from a gateway in a vca environment',
 'vca_vapp': 'Manages vCloud Air vApp instances.\n\nArguments: vm_name, username, vm_memory, template_name, network_mode, vapp_name, org, operation, password, vm_cpus, vdc_name, network_name, host, instance_id, state, service_type, api_version\n\nThis module will actively managed vCloud Air vApp instances.  Instances can be created and deleted as well as both deployed and undeployed.',
 'vcenter_extension': 'Register/deregister vCenter Extensions\n\nArguments: extension_key, name, server_type, url, company, email, visible, state, version, client_type, ssl_thumbprint, description\n\nThis module can be used to register/deregister vCenter Extensions.',
 'vcenter_extension_info': 'Gather info vCenter extensions\n\nArguments: \n\nThis module can be used to gather information about vCenter extension.',
 'vcenter_folder': 'Manage folders on given datacenter\n\nArguments: folder_type, datacenter, parent_folder, folder_name, state\n\nThis module can be used to create, delete, move and rename folder on then given datacenter.\nThis module is only supported for vCenter.',
 'vcenter_license': 'Manage VMware vCenter license keys\n\nArguments: cluster_name, datacenter, state, esxi_hostname, license, labels\n\nAdd and delete vCenter, ESXi server license keys.',
 'vdirect_commit': 'Commits pending configuration changes on Radware devices\n\nArguments: vdirect_user, vdirect_wait, vdirect_https_port, vdirect_timeout, vdirect_http_port, vdirect_ip, devices, sync, apply, vdirect_secondary_ip, save, validate_certs, vdirect_use_ssl, vdirect_password\n\nCommits pending configuration changes on one or more Radware devices via vDirect server.\nFor Alteon ADC device, apply, sync and save actions will be performed by default. Skipping of an action is possible by explicit parameter specifying.\nFor Alteon VX Container device, no sync operation will be performed since sync action is only relevant for Alteon ADC devices.\nFor DefensePro and AppWall devices, a bulk commit action will be performed. Explicit apply, sync and save actions specifying is not relevant.',
 'vdirect_file': 'Uploads a new or updates an existing runnable file into Radware vDirect server\n\nArguments: vdirect_user, vdirect_wait, vdirect_https_port, file_name, vdirect_timeout, vdirect_http_port, vdirect_ip, vdirect_secondary_ip, validate_certs, vdirect_use_ssl, vdirect_password\n\nUploads a new or updates an existing configuration template or workflow template into the Radware vDirect server. All parameters may be set as environment variables.',
 'vdirect_runnable': 'Runs templates and workflow actions in Radware vDirect server\n\nArguments: vdirect_user, vdirect_wait, runnable_name, parameters, vdirect_https_port, vdirect_timeout, vdirect_http_port, vdirect_ip, action_name, runnable_type, vdirect_secondary_ip, validate_certs, vdirect_use_ssl, vdirect_password\n\nRuns configuration templates, creates workflows and runs workflow actions in Radware vDirect server.',
 'vdo': 'Module to control VDO\n\nArguments: readcachesize, ackthreads, biothreads, activated, running, emulate512, indexmem, device, logicalthreads, blockmapcachesize, name, writepolicy, compression, deduplication, physicalthreads, state, readcache, logicalsize, growphysical, indexmode, slabsize, cputhreads\n\nThis module controls the VDO dedupe and compression device.\nVDO, or Virtual Data Optimizer, is a device-mapper target that provides inline block-level deduplication, compression, and thin provisioning capabilities to primary storage.',
 'vertica_configuration': 'Updates Vertica configuration parameters.\n\nArguments: cluster, name, login_password, login_user, db, port, value\n\nUpdates Vertica configuration parameters.',
 'vertica_info': 'Gathers Vertica database facts.\n\nArguments: login_user, cluster, db, port, login_password\n\nGathers Vertica database information.\nThis module was called C(vertica_facts) before Ansible 2.9, returning C(ansible_facts). Note that the M(vertica_info) module no longer returns C(ansible_facts)!',
 'vertica_role': 'Adds or removes Vertica database roles and assigns roles to them.\n\nArguments: assigned_roles, name, login_user, db, cluster, state, login_password, port\n\nAdds or removes Vertica database role and, optionally, assign other roles.',
 'vertica_schema': 'Adds or removes Vertica database schema and roles.\n\nArguments: create_roles, name, login_user, db, usage_roles, cluster, state, login_password, owner, port\n\nAdds or removes Vertica database schema and, optionally, roles with schema access privileges.\nA schema will not be removed until all the objects have been dropped.\nIn such a situation, if the module tries to remove the schema it will fail and only remove roles created for the schema if they have no dependencies.',
 'vertica_user': 'Adds or removes Vertica database users and assigns roles.\n\nArguments: profile, resource_pool, name, roles, login_user, ldap, db, cluster, state, login_password, password, expired, port\n\nAdds or removes Vertica database user and, optionally, assigns roles.\nA user will not be removed until all the dependencies have been dropped.\nIn such a situation, if the module tries to remove the user it will fail and only remove roles granted to the user.',
 'vexata_eg': 'Manage export groups on Vexata VX100 storage arrays\n\nArguments: state, vg, pg, ig, name\n\nCreate or delete export groups on a Vexata VX100 array.\nAn export group is a tuple of a volume group, initiator group and port group that allows a set of volumes to be exposed to one or more hosts through specific array ports.',
 'vexata_volume': 'Manage volumes on Vexata VX100 storage arrays\n\nArguments: state, name, size\n\nCreate, deletes or extend volumes on a Vexata VX100 array.',
 'virt': 'Manages virtual machines supported by libvirt\n\nArguments: xml, state, command, name, autostart, uri\n\nManages virtual machines supported by I(libvirt).',
 'virt_net': 'Manage libvirt network configuration\n\nArguments: xml, state, command, name, autostart, uri\n\nManage I(libvirt) networks.',
 'virt_pool': 'Manage libvirt storage pools\n\nArguments: xml, state, command, name, autostart, uri, mode\n\nManage I(libvirt) storage pools.',
 'vmadm': 'Manage SmartOS virtual machines and zones.\n\nArguments: customer_metadata, disk_driver, force, zfs_root_compression, virtio_txtimer, spice_password, zfs_io_priority, ram, dns_domain, max_physical_memory, nic_driver, zfs_data_compression, image_uuid, fs_allowed, indestructible_delegated, qemu_opts, delegate_dataset, firewall_enabled, mdata_exec_timeout, archive_on_delete, nics, hostname, boot, vga, zfs_snapshot_limit, state, limit_priv, cpu_cap, maintain_resolvers, indestructible_zoneroot, vnc_password, vcpus, disks, max_swap, zfs_root_recsize, brand, zfs_filesystem_limit, quota, filesystems, autoboot, tmpfs, qemu_extra_opts, resolvers, max_lwps, nowait, name, kernel_version, max_locked_memory, vnc_port, uuid, internal_metadata_namespace, virtio_txburst, spice_opts, zfs_data_recsize, internal_metadata, cpu_type, routes, zpool, docker, cpu_shares\n\nManage SmartOS virtual machines through vmadm(1M).',
 'vmware_about_info': 'Provides information about VMware server to which user is connecting to\n\nArguments: \n\nThis module can be used to gather information about VMware server to which user is trying to connect.',
 'vmware_category': 'Manage VMware categories\n\nArguments: new_category_name, category_cardinality, state, category_name, category_description\n\nThis module can be used to create / delete / update VMware categories.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 'vmware_category_info': 'Gather info about VMware tag categories\n\nArguments: \n\nThis module can be used to gather information about VMware tag categories.\nTag feature is introduced in vSphere 6 version, so this module is not supported in earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 'vmware_cfg_backup': 'Backup / Restore / Reset ESXi host configuration\n\nArguments: dest, src, state, esxi_hostname\n\nThis module can be used to perform various operations related to backup, restore and reset of ESXi host configuration.',
 'vmware_cluster': 'Manage VMware vSphere clusters\n\nArguments: ha_restart_priority, ha_vm_max_failures, ha_host_monitoring, vsan_auto_claim_storage, enable_drs, ha_failover_level, ignore_drs, drs_vmotion_rate, enable_ha, datacenter, enable_vsan, ha_vm_failure_interval, ha_vm_monitoring, state, cluster_name, drs_enable_vm_behavior_overrides, ha_admission_control_enabled, ignore_ha, ignore_vsan, drs_default_vm_behavior, ha_vm_max_failure_window, ha_vm_min_up_time\n\nAdds or removes VMware vSphere clusters.\nAlthough this module can manage DRS, HA and VSAN related configurations, this functionality is deprecated and will be removed in 2.12.\nTo manage DRS, HA and VSAN related configurations, use the new modules vmware_cluster_drs, vmware_cluster_ha and vmware_cluster_vsan.\nAll values and VMware object names are case sensitive.',
 'vmware_cluster_drs': 'Manage Distributed Resource Scheduler (DRS) on VMware vSphere clusters\n\nArguments: cluster_name, datacenter, drs_enable_vm_behavior_overrides, enable_drs, drs_vmotion_rate, drs_default_vm_behavior\n\nManages DRS on VMware vSphere clusters.\nAll values and VMware object names are case sensitive.',
 'vmware_cluster_ha': 'Manage High Availability (HA) on VMware vSphere clusters\n\nArguments: enable_ha, datacenter, ha_restart_priority, failover_host_admission_control, ha_host_monitoring, ha_vm_failure_interval, slot_based_admission_control, ha_vm_monitoring, cluster_name, reservation_based_admission_control, host_isolation_response, ha_vm_max_failures, ha_vm_max_failure_window, ha_vm_min_up_time\n\nManages HA configuration on VMware vSphere clusters.\nAll values and VMware object names are case sensitive.',
 'vmware_cluster_info': 'Gather info about clusters available in given vCenter\n\nArguments: cluster_name, datacenter, show_tag\n\nThis module can be used to gather information about clusters in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_cluster_facts) before Ansible 2.9. The usage did not change.',
 'vmware_cluster_vsan': 'Manages virtual storage area network (vSAN) configuration on VMware vSphere clusters\n\nArguments: cluster_name, datacenter, enable_vsan, vsan_auto_claim_storage\n\nManages vSAN on VMware vSphere clusters.\nAll values and VMware object names are case sensitive.',
 'vmware_content_deploy_template': 'Deploy Virtual Machine from template stored in content library.\n\nArguments: resource_pool, datacenter, name, host, cluster, state, template, datastore, folder\n\nModule to deploy virtual machine from template in content library.\nContent Library feature is introduced in vSphere 6.0 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 'vmware_content_library_info': 'Gather information about VMware Content Library\n\nArguments: library_id\n\nModule to list the content libraries.\nModule to get information about specific content library.\nContent Library feature is introduced in vSphere 6.0 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 'vmware_content_library_manager': 'Create, update and delete VMware content library\n\nArguments: library_type, library_name, state, datastore_name, library_description\n\nModule to manage VMware content Library\nContent Library feature is introduced in vSphere 6.0 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 'vmware_datacenter': 'Manage VMware vSphere Datacenters\n\nArguments: state, datacenter_name\n\nThis module can be used to manage (create, delete) VMware vSphere Datacenters.',
 'vmware_datastore_cluster': 'Manage VMware vSphere datastore clusters\n\nArguments: datastore_cluster_name, state, datacenter_name, folder\n\nThis module can be used to add and delete datastore cluster in given VMware environment.\nAll parameters and VMware object values are case sensitive.',
 'vmware_datastore_info': 'Gather info about datastores available in given vCenter\n\nArguments: cluster, gather_nfs_mount_info, gather_vmfs_mount_info, name, datacenter\n\nThis module can be used to gather information about datastores in VMWare infrastructure.\nAll values and VMware object names are case sensitive.\nThis module was called C(vmware_datastore_facts) before Ansible 2.9. The usage did not change.',
 'vmware_datastore_maintenancemode': 'Place a datastore into maintenance mode\n\nArguments: cluster_name, datastore, datastore_cluster, state\n\nThis module can be used to manage maintenance mode of a datastore.',
 'vmware_deploy_ovf': 'Deploys a VMware virtual machine from an OVF or OVA file\n\nArguments: resource_pool, power_on, cluster, deployment_option, disk_provisioning, datastore, properties, wait_for_ip_address, fail_on_spec_warnings, datacenter, name, inject_ovf_env, networks, allow_duplicates, ovf, folder, wait\n\nThis module can be used to deploy a VMware VM from an OVF or OVA file',
 'vmware_dns_config': 'Manage VMware ESXi DNS Configuration\n\nArguments: change_hostname_to, dns_servers, domainname\n\nManage VMware ESXi DNS Configuration',
 'vmware_drs_group': 'Creates vm/host group in a given cluster.\n\nArguments: cluster_name, datacenter, state, hosts, vms, group_name\n\nThis module can be used to create VM/Host groups in a given cluster. Creates a vm group if C(vms) is set. Creates a host group if C(hosts) is set.',
 'vmware_drs_group_info': 'Gathers info about DRS VM/Host groups on the given cluster\n\nArguments: cluster_name, datacenter\n\nThis module can be used to gather information about DRS VM/HOST groups from the given cluster.',
 'vmware_drs_rule_info': 'Gathers info about DRS rule on the given cluster\n\nArguments: cluster_name, datacenter\n\nThis module can be used to gather information about DRS VM-VM and VM-HOST rules from the given cluster.',
 'vmware_dvs_host': 'Add or remove a host from distributed virtual switch\n\nArguments: vmnics, state, vendor_specific_config, switch_name, esxi_hostname\n\nManage a host system from distributed virtual switch.',
 'vmware_dvs_portgroup': 'Create or remove a Distributed vSwitch portgroup.\n\nArguments: portgroup_name, teaming_policy, port_policy, network_policy, state, num_ports, vlan_id, portgroup_type, switch_name, vlan_trunk\n\nCreate or remove a Distributed vSwitch portgroup.',
 'vmware_dvs_portgroup_find': 'Find portgroup(s) in a VMware environment\n\nArguments: dvswitch, show_uplink, vlanid, name\n\nFind portgroup(s) based on different criteria such as distributed vSwitch, VLAN id or a string in the name.',
 'vmware_dvs_portgroup_info': 'Gathers info DVS portgroup configurations\n\nArguments: datacenter, show_vlan_info, show_teaming_policy, show_port_policy, dvswitch, show_network_policy\n\nThis module can be used to gather information about DVS portgroup configurations.',
 'vmware_dvswitch': 'Create or remove a Distributed Switch\n\nArguments: health_check, datacenter_name, multicast_filtering_mode, discovery_proto, mtu, state, contact, uplink_prefix, switch_version, folder, discovery_operation, switch_name, uplink_quantity, description\n\nThis module can be used to create, remove a Distributed Switch.',
 'vmware_dvswitch_lacp': 'Manage LACP configuration on a Distributed Switch\n\nArguments: switch, support_mode, link_aggregation_groups\n\nThis module can be used to configure Link Aggregation Control Protocol (LACP) support mode and Link Aggregation Groups (LAGs).',
 'vmware_dvswitch_nioc': 'Manage distributed switch Network IO Control\n\nArguments: switch, version, state, resources\n\nThis module can be used to manage distributed switch Network IO Control configurations.',
 'vmware_dvswitch_pvlans': 'Manage Private VLAN configuration of a Distributed Switch\n\nArguments: switch, primary_pvlans, secondary_pvlans\n\nThis module can be used to configure Private VLANs (PVLANs) on a Distributed Switch.',
 'vmware_dvswitch_uplink_pg': 'Manage uplink portproup configuration of a Distributed Switch\n\nArguments: vlan_trunk_range, name, netflow_enabled, lacp, switch, block_all_ports, advanced, description\n\nThis module can be used to configure the uplink portgroup of a Distributed Switch.',
 'vmware_evc_mode': 'Enable/Disable EVC mode on vCenter\n\nArguments: cluster_name, state, datacenter_name, evc_mode\n\nThis module can be used to enable/disable EVC mode on vCenter.',
 'vmware_export_ovf': 'Exports a VMware virtual machine to an OVF file, device files and a manifest file\n\nArguments: export_with_images, datacenter, export_dir, name, download_timeout, moid, folder, uuid\n\nThis module can be used to export a VMware virtual machine to OVF template from vCenter server or ESXi host.\n',
 'vmware_folder_info': 'Provides information about folders in a datacenter\n\nArguments: datacenter\n\nThe module can be used to gather a hierarchical view of the folders that exist within a datacenter',
 'vmware_guest': 'Manages virtual machines in vCenter\n\nArguments: resource_pool, snapshot_src, force, esxi_hostname, name, datacenter, customization_spec, hardware, cluster, wait_for_customization, name_match, customization, cdrom, state_change_timeout, datastore, disk, networks, wait_for_ip_address, guest_id, convert, uuid, is_template, customvalues, state, annotation, vapp_properties, use_instance_uuid, template, linked_clone, folder\n\nThis module can be used to create new virtual machines from templates or other virtual machines, manage power state of virtual machine such as power on, power off, suspend, shutdown, reboot, restart etc., modify various virtual machine components like network, disk, customization etc., rename a virtual machine and remove a virtual machine with associated components.\n',
 'vmware_guest_boot_info': 'Gather info about boot options for the given virtual machine\n\nArguments: use_instance_uuid, uuid, moid, name, name_match\n\nGather information about boot options for the given virtual machine.',
 'vmware_guest_boot_manager': 'Manage boot options for the given virtual machine\n\nArguments: secure_boot_enabled, name, boot_order, boot_retry_delay, boot_delay, use_instance_uuid, enter_bios_setup, moid, name_match, boot_retry_enabled, boot_firmware, uuid\n\nThis module can be used to manage boot options for the given virtual machine.',
 'vmware_guest_custom_attribute_defs': 'Manage custom attributes definitions for virtual machine from VMware\n\nArguments: attribute_key, state\n\nThis module can be used to add and remove custom attributes definitions for the given virtual machine from VMware.',
 'vmware_guest_custom_attributes': 'Manage custom attributes from VMware for the given virtual machine\n\nArguments: datacenter, name, use_instance_uuid, state, moid, attributes, folder, uuid\n\nThis module can be used to add, remove and update custom attributes for the given virtual machine.',
 'vmware_guest_customization_info': 'Gather info about VM customization specifications\n\nArguments: spec_name\n\nThis module can be used to gather information about customization specifications.\nAll parameters and VMware object names are case sensitive.',
 'vmware_guest_disk': 'Manage disks related to virtual machine in given vCenter infrastructure\n\nArguments: use_instance_uuid, datacenter, moid, name, folder, disk, uuid\n\nThis module can be used to add, remove and update disks belonging to given virtual machine.\nAll parameters and VMware object names are case sensitive.\nThis module is destructive in nature, please read documentation carefully before proceeding.\nBe careful while removing disk specified as this may lead to data loss.',
 'vmware_guest_disk_info': 'Gather info about disks of given virtual machine\n\nArguments: use_instance_uuid, datacenter, moid, name, folder, uuid\n\nThis module can be used to gather information about disks belonging to given virtual machine.\nAll parameters and VMware object names are case sensitive.',
 'vmware_guest_file_operation': 'Files operation in a VMware guest operating system without network\n\nArguments: datacenter, vm_password, vm_username, cluster, vm_id_type, directory, folder, copy, vm_id, fetch\n\nModule to copy a file to a VM, fetch a file from a VM and create or delete a directory in the guest OS.',
 'vmware_guest_find': 'Find the folder path(s) for a virtual machine by name or UUID\n\nArguments: use_instance_uuid, datacenter, name, uuid\n\nFind the folder path(s) for a virtual machine by name or UUID',
 'vmware_guest_info': 'Gather info about a single VM\n\nArguments: datacenter, uuid, tags, name, use_instance_uuid, moid, name_match, folder, properties, schema\n\nGather information about a single VM on a VMware ESX cluster.\nThis module was called C(vmware_guest_facts) before Ansible 2.9. The usage did not change.',
 'vmware_guest_move': 'Moves virtual machines in vCenter\n\nArguments: dest_folder, datacenter, moid, name, use_instance_uuid, uuid, name_match\n\nThis module can be used to move virtual machines between folders.',
 'vmware_guest_network': 'Manage network adapters of specified virtual machine in given vCenter infrastructure\n\nArguments: datacenter, name, gather_network_info, cluster, moid, esxi_hostname, folder, networks, uuid\n\nThis module is used to add, reconfigure, remove network adapter of given virtual machine.\nAll parameters and VMware object names are case sensitive.',
 'vmware_guest_powerstate': 'Manages power states of virtual machines in vCenter\n\nArguments: state_change_timeout, force, uuid, name, schedule_task_description, schedule_task_name, use_instance_uuid, state, moid, name_match, folder, schedule_task_enabled, scheduled_at\n\nPower on / Power off / Restart a virtual machine.',
 'vmware_guest_screenshot': 'Create a screenshot of the Virtual Machine console.\n\nArguments: datacenter, name, moid, cluster, local_path, esxi_hostname, folder, uuid\n\nThis module is used to take screenshot of the given virtual machine when virtual machine is powered on.\nAll parameters and VMware object names are case sensitive.',
 'vmware_guest_sendkey': "Send USB HID codes to the Virtual Machine's keyboard.\n\nArguments: datacenter, name, string_send, cluster, moid, esxi_hostname, keys_send, folder, uuid\n\nThis module is used to send keystrokes to given virtual machine.\nAll parameters and VMware object names are case sensitive.",
 'vmware_guest_snapshot': 'Manages virtual machines snapshots in vCenter\n\nArguments: datacenter, new_snapshot_name, uuid, state, quiesce, memory_dump, name, use_instance_uuid, new_description, moid, name_match, snapshot_name, remove_children, folder, description\n\nThis module can be used to create, delete and update snapshot(s) of the given virtual machine.\nAll parameters and VMware object names are case sensitive.',
 'vmware_guest_snapshot_info': "Gather info about virtual machine's snapshots in vCenter\n\nArguments: use_instance_uuid, datacenter, moid, name, folder, uuid\n\nThis module can be used to gather information about virtual machine's snapshots.\nThis module was called C(vmware_guest_snapshot_facts) before Ansible 2.9. The usage did not change.",
 'vmware_guest_tools_upgrade': 'Module to upgrade VMTools\n\nArguments: datacenter, moid, uuid, name, folder, name_match\n\nThis module upgrades the VMware Tools on Windows and Linux guests.',
 'vmware_guest_tools_wait': 'Wait for VMware tools to become available\n\nArguments: use_instance_uuid, moid, uuid, name, folder, name_match\n\nThis module can be used to wait for VMware tools to become available on the given VM and return facts.',
 'vmware_guest_video': 'Modify video card configurations of specified virtual machine in given vCenter infrastructure\n\nArguments: datacenter, enable_3D, name, use_auto_detect, uuid, renderer_3D, video_memory_mb, moid, display_number, folder, gather_video_facts, memory_3D_mb\n\nThis module is used to reconfigure video card settings of given virtual machine.\nAll parameters and VMware object names are case sensitive.',
 'vmware_guest_vnc': 'Manages VNC remote display on virtual machines in vCenter\n\nArguments: datacenter, uuid, moid, vnc_port, state, vnc_ip, name_match, folder, vnc_password, name\n\nThis module can be used to enable and disable VNC remote display on virtual machine.',
 'vmware_host': 'Add, remove, or move an ESXi host to, from, or within vCenter\n\nArguments: datacenter_name, esxi_hostname, force_connection, esxi_username, esxi_ssl_thumbprint, cluster_name, state, add_connected, esxi_password, folder, fetch_ssl_thumbprint, reconnect_disconnected\n\nThis module can be used to add, reconnect, or remove an ESXi host to or from vCenter.\nThis module can also be used to move an ESXi host to a cluster or folder, or vice versa, within the same datacenter.',
 'vmware_host_acceptance': 'Manage the host acceptance level of an ESXi host\n\nArguments: cluster_name, state, esxi_hostname, acceptance_level\n\nThis module can be used to manage the host acceptance level of an ESXi host.\nThe host acceptance level controls the acceptance level of each VIB on a ESXi host.',
 'vmware_host_active_directory': 'Joins an ESXi host system to an Active Directory domain or leaves it\n\nArguments: cluster_name, esxi_hostname, ad_state, ad_password, ad_user, ad_domain\n\nThis module can be used to join or leave an ESXi host to or from an Active Directory domain.',
 'vmware_host_capability_info': "Gathers info about an ESXi host's capability information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's capability information when ESXi hostname or Cluster name is given.",
 'vmware_host_config_info': "Gathers info about an ESXi host's advance configuration information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's advance configuration information when ESXi hostname or Cluster name is given.",
 'vmware_host_config_manager': 'Manage advanced system settings of an ESXi host\n\nArguments: cluster_name, options, esxi_hostname\n\nThis module can be used to manage advanced system settings of an ESXi host when ESXi hostname or Cluster name is given.',
 'vmware_host_datastore': 'Manage a datastore on ESXi host\n\nArguments: datacenter_name, vmfs_version, nfs_path, nfs_ro, state, esxi_hostname, datastore_type, nfs_server, vmfs_device_name, datastore_name\n\nThis module can be used to mount/umount datastore on ESXi host.\nThis module only supports NFS (NFS v3 or NFS v4.1) and VMFS datastores.\nFor VMFS datastore, available device must already be connected on ESXi host.\nAll parameters and VMware object names are case sensitive.',
 'vmware_host_dns_info': "Gathers info about an ESXi host's DNS configuration information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's DNS configuration information when ESXi hostname or Cluster name is given.\nAll parameters and VMware object names are case sensitive.",
 'vmware_host_facts': 'Gathers facts about remote ESXi hostsystem\n\nArguments: esxi_hostname, show_tag\n\nThis module can be used to gathers facts like CPU, memory, datastore, network and system etc. about ESXi host system.\nPlease specify hostname or IP address of ESXi host system as C(hostname).\nIf hostname or IP address of vCenter is provided as C(hostname) and C(esxi_hostname) is not specified, then the module will throw an error.\nVSAN facts added in 2.7 version.',
 'vmware_host_feature_info': "Gathers info about an ESXi host's feature capability information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's feature capability information when ESXi hostname or Cluster name is given.",
 'vmware_host_firewall_info': "Gathers info about an ESXi host's firewall configuration information\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's firewall configuration information when ESXi hostname or Cluster name is given.",
 'vmware_host_firewall_manager': 'Manage firewall configurations about an ESXi host\n\nArguments: cluster_name, rules, esxi_hostname\n\nThis module can be used to manage firewall configurations about an ESXi host when ESXi hostname or Cluster name is given.',
 'vmware_host_hyperthreading': 'Enables/Disables Hyperthreading optimization for an ESXi host system\n\nArguments: cluster_name, state, esxi_hostname\n\nThis module can be used to enable or disable Hyperthreading optimization for ESXi host systems in given vCenter infrastructure.\nIt also checks if Hyperthreading is activated/deactivated and if the host needs to be restarted.\nThe module informs the user if Hyperthreading is enabled but inactive because the processor is vulnerable to L1 Terminal Fault (L1TF).',
 'vmware_host_ipv6': 'Enables/Disables IPv6 support for an ESXi host system\n\nArguments: cluster_name, state, esxi_hostname\n\nThis module can be used to enable or disable IPv6 support for ESXi host systems in given vCenter infrastructure.\nIt also checks if the host needs to be restarted.',
 'vmware_host_kernel_manager': 'Manage kernel module options on ESXi hosts\n\nArguments: cluster_name, kernel_module_option, esxi_hostname, kernel_module_name\n\nThis module can be used to manage kernel module options on ESXi hosts.\nAll connected ESXi hosts in scope will be configured when specified.\nIf a host is not connected at time of configuration, it will be marked as such in the output.\nKernel module options may require a reboot to take effect which is not covered here.\nYou can use M(reboot) or M(vmware_host_powerstate) module to reboot all ESXi host systems.',
 'vmware_host_lockdown': 'Manage administrator permission for the local administrative account for the ESXi host\n\nArguments: cluster_name, state, esxi_hostname\n\nThis module can be used to manage administrator permission for the local administrative account for the host when ESXi hostname is given.\nAll parameters and VMware objects values are case sensitive.\nThis module is destructive as administrator permission are managed using APIs used, please read options carefully and proceed.\nPlease specify C(hostname) as vCenter IP or hostname only, as lockdown operations are not possible from standalone ESXi server.',
 'vmware_host_ntp': 'Manage NTP server configuration of an ESXi host\n\nArguments: cluster_name, ntp_servers, state, verbose, esxi_hostname\n\nThis module can be used to configure, add or remove NTP servers from an ESXi host.\nIf C(state) is not given, the NTP servers will be configured in the exact sequence.\nUser can specify an ESXi hostname or Cluster name. In case of cluster name, all ESXi hosts are updated.',
 'vmware_host_ntp_info': 'Gathers info about NTP configuration on an ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about NTP configurations on an ESXi host.',
 'vmware_host_package_info': 'Gathers info about available packages on an ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about available packages and their status on an ESXi host.',
 'vmware_host_powermgmt_policy': 'Manages the Power Management Policy of an ESXI host system\n\nArguments: policy, cluster_name, esxi_hostname\n\nThis module can be used to manage the Power Management Policy of ESXi host systems in given vCenter infrastructure.',
 'vmware_host_powerstate': "Manages power states of host systems in vCenter\n\nArguments: cluster_name, state, force, esxi_hostname, timeout\n\nThis module can be used to manage power states of host systems in given vCenter infrastructure.\nUser can set power state to 'power-down-to-standby', 'power-up-from-standby', 'shutdown-host' and 'reboot-host'.\nState 'reboot-host', 'shutdown-host' and 'power-down-to-standby' are not supported by all the host systems.",
 'vmware_host_scanhba': "Rescan host HBA's and optionally refresh the storage system\n\nArguments: cluster_name, refresh_storage, esxi_hostname\n\nThis module can force a rescan of the hosts HBA subsystem which is needed when wanting to mount a new datastore.\nYou could use this before using M(vmware_host_datastore) to mount a new datastore to ensure your device/volume is ready.\nYou can also optionally force a Refresh of the Storage System in vCenter/ESXi Web Client.\nAll parameters and VMware object names are case sensitive.\nYou can supply an esxi_hostname or a cluster_name",
 'vmware_host_service_info': "Gathers info about an ESXi host's services\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's services.",
 'vmware_host_service_manager': 'Manage services on a given ESXi host\n\nArguments: cluster_name, service_name, state, service_policy, esxi_hostname\n\nThis module can be used to manage (start, stop, restart) services on a given ESXi host.\nIf cluster_name is provided, specified service will be managed on all ESXi host belonging to that cluster.\nIf specific esxi_hostname is provided, then specified service will be managed on given ESXi host only.',
 'vmware_host_snmp': 'Configures SNMP on an ESXi host system\n\nArguments: hw_source, log_level, snmp_port, state, community, trap_targets, send_trap, trap_filter\n\nThis module can be used to configure the embedded SNMP agent on an ESXi host.',
 'vmware_host_ssl_info': 'Gather info of ESXi host system about SSL\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information of the SSL thumbprint information for a host.',
 'vmware_host_vmhba_info': 'Gathers info about vmhbas available on the given ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about vmhbas available on the given ESXi host.\nIf C(cluster_name) is provided, then vmhba information about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmhba information about given host system will be returned.',
 'vmware_host_vmnic_info': 'Gathers info about vmnics available on the given ESXi host\n\nArguments: directpath_io, cluster_name, capabilities, sriov, esxi_hostname\n\nThis module can be used to gather information about vmnics available on the given ESXi host.\nIf C(cluster_name) is provided, then vmnic information about all hosts from given cluster will be returned.\nIf C(esxi_hostname) is provided, then vmnic information about given host system will be returned.\nAdditional details about vswitch and dvswitch with respective vmnic is also provided which is added in 2.7 version.',
 'vmware_local_role_info': 'Gather info about local roles on an ESXi host\n\nArguments: \n\nThis module can be used to gather information about local role info on an ESXi host',
 'vmware_local_role_manager': 'Manage local roles on an ESXi host\n\nArguments: force_remove, local_role_name, state, local_privilege_ids, action\n\nThis module can be used to manage local roles on an ESXi host.',
 'vmware_local_user_info': "Gather info about users on the given ESXi host\n\nArguments: \n\nThis module can be used to gather information about users present on the given ESXi host system in VMware infrastructure.\nAll variables and VMware object names are case sensitive.\nUser must hold the 'Authorization.ModifyPermissions' privilege to invoke this module.",
 'vmware_local_user_manager': 'Manage local users on an ESXi host\n\nArguments: local_user_password, local_user_description, state, local_user_name\n\nManage local users on an ESXi host',
 'vmware_maintenancemode': 'Place a host into maintenance mode\n\nArguments: esxi_hostname, state, vsan, evacuate, timeout\n\nThis module can be used for placing a ESXi host into maintenance mode.\nSupport for VSAN compliant maintenance mode when selected.',
 'vmware_migrate_vmk': 'Migrate a VMK interface from VSS to VDS\n\nArguments: current_switch_name, migrate_portgroup_name, esxi_hostname, device, migrate_switch_name, current_portgroup_name\n\nMigrate a VMK interface from VSS to VDS',
 'vmware_object_role_permission': 'Manage local roles on an ESXi host\n\nArguments: state, group, recursive, role, object_type, object_name, principal\n\nThis module can be used to manage object permissions on the given host.',
 'vmware_portgroup': 'Create a VMware portgroup\n\nArguments: traffic_shaping, switch, portgroup, cluster_name, state, hosts, teaming, security, vlan_id\n\nCreate a VMware Port Group on a VMware Standard Switch (vSS) for given ESXi host(s) or hosts of given cluster.',
 'vmware_portgroup_info': "Gathers info about an ESXi host's Port Group configuration\n\nArguments: cluster_name, policies, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's Port Group configuration when ESXi hostname or Cluster name is given.",
 'vmware_resource_pool': 'Add/remove resource pools to/from vCenter\n\nArguments: resource_pool, datacenter, cpu_reservation, mem_expandable_reservations, cpu_expandable_reservations, cluster, state, cpu_limit, mem_shares, mem_limit, mem_reservation, cpu_shares\n\nThis module can be used to add/remove a resource pool to/from vCenter',
 'vmware_resource_pool_info': 'Gathers info about resource pool information\n\nArguments: \n\nThis module can be used to gather information about all resource configuration information.',
 'vmware_tag': 'Manage VMware tags\n\nArguments: tag_name, category_id, tag_description, state\n\nThis module can be used to create / delete / update VMware tags.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 'vmware_tag_info': 'Manage VMware tag info\n\nArguments: \n\nThis module can be used to collect information about VMware tags.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.\nThis module was called C(vmware_tag_facts) before Ansible 2.9. The usage did not change.',
 'vmware_tag_manager': 'Manage association of VMware tags with VMware objects\n\nArguments: state, object_type, tag_names, object_name\n\nThis module can be used to assign / remove VMware tags from the given VMware objects.\nTag feature is introduced in vSphere 6 version, so this module is not supported in the earlier versions of vSphere.\nAll variables and VMware object names are case sensitive.',
 'vmware_target_canonical_info': 'Return canonical (NAA) from an ESXi host system\n\nArguments: cluster_name, target_id, esxi_hostname\n\nThis module can be used to gather information about canonical (NAA) from an ESXi host based on SCSI target ID.',
 'vmware_vcenter_settings': 'Configures general settings on a vCenter server\n\nArguments: timeout_settings, runtime_settings, user_directory, database, mail, logging_options, snmp_receivers\n\nThis module can be used to configure the vCenter server general settings (except the statistics).\nThe statistics can be configured with the module C(vmware_vcenter_statistics).',
 'vmware_vcenter_statistics': 'Configures statistics on a vCenter server\n\nArguments: interval_past_day, interval_past_month, interval_past_year, interval_past_week\n\nThis module can be used to configure the vCenter server statistics.\nThe remaining settings can be configured with the module C(vmware_vcenter_settings).',
 'vmware_vm_host_drs_rule': 'Creates vm/host group in a given cluster\n\nArguments: datacenter, mandatory, host_group_name, enabled, vm_group_name, affinity_rule, state, drs_rule_name, cluster_name\n\nThis module can be used to create VM-Host rules in a given cluster.',
 'vmware_vm_info': 'Return basic info pertaining to a VMware machine guest\n\nArguments: folder, show_attribute, vm_type, show_tag\n\nReturn basic information pertaining to a vSphere or ESXi virtual machine guest.\nCluster name as fact is added in version 2.7.\nThis module was called C(vmware_vm_facts) before Ansible 2.9. The usage did not change.',
 'vmware_vm_shell': 'Run commands in a VMware guest operating system\n\nArguments: datacenter, vm_password, vm_id_type, vm_shell, vm_shell_cwd, vm_shell_args, vm_username, vm_shell_env, cluster, wait_for_process, timeout, folder, vm_id\n\nModule allows user to run common system administration commands in the guest operating system.',
 'vmware_vm_storage_policy_info': 'Gather information about vSphere storage profile defined storage policy information.\n\nArguments: \n\nReturns basic information on vSphere storage profiles.\nA vSphere storage profile defines storage policy information that describes storage requirements for virtual machines and storage capabilities of storage providers.',
 'vmware_vm_vm_drs_rule': 'Configure VMware DRS Affinity rule for virtual machine in given cluster\n\nArguments: cluster_name, drs_rule_name, state, mandatory, affinity_rule, enabled, vms\n\nThis module can be used to configure VMware DRS Affinity rule for virtual machine in given cluster.',
 'vmware_vm_vss_dvs_migrate': 'Migrates a virtual machine from a standard vswitch to distributed\n\nArguments: vm_name, dvportgroup_name\n\nMigrates a virtual machine from a standard vswitch to distributed',
 'vmware_vmkernel': 'Manages a VMware VMkernel Adapter of an ESXi host.\n\nArguments: enable_replication_nfc, enable_vmotion, vswitch_name, subnet_mask, device, ip_address, enable_provisioning, portgroup_name, enable_vsan, network, mtu, enable_mgmt, state, esxi_hostname, enable_replication, dvswitch_name, enable_ft\n\nThis module can be used to manage the VMKernel adapters / VMKernel network interfaces of an ESXi host.\nThe module assumes that the host is already configured with the Port Group in case of a vSphere Standard Switch (vSS).\nThe module assumes that the host is already configured with the Distributed Port Group in case of a vSphere Distributed Switch (vDS).\nThe module automatically migrates the VMKernel adapter from vSS to vDS or vice versa if present.',
 'vmware_vmkernel_info': 'Gathers VMKernel info about an ESXi host\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather VMKernel information about an ESXi host from given ESXi hostname or cluster name.',
 'vmware_vmkernel_ip_config': 'Configure the VMkernel IP Address\n\nArguments: vmk_name, ip_address, subnet_mask\n\nConfigure the VMkernel IP Address',
 'vmware_vmotion': 'Move a virtual machine using vMotion, and/or its vmdks using storage vMotion.\n\nArguments: vm_name, use_instance_uuid, moid, vm_uuid, destination_datastore, destination_host\n\nUsing VMware vCenter, move a virtual machine using vMotion to a different host, and/or its vmdks to another datastore using storage vMotion.',
 'vmware_vsan_cluster': 'Configure VSAN clustering on an ESXi host\n\nArguments: cluster_uuid\n\nThis module can be used to configure VSAN clustering on an ESXi host',
 'vmware_vspan_session': 'Create or remove a Port Mirroring session.\n\nArguments: destination_vm, description, session_type, normal_traffic_allowed, source_vm_received, encapsulation_vlan_id, destination_port, name, source_port_received, enabled, state, mirrored_packet_length, switch, source_port_transmitted, sampling_rate, source_vm_transmitted, strip_original_vlan\n\nThis module can be used to create, delete or edit different kind of port mirroring sessions.',
 'vmware_vswitch': 'Manage a VMware Standard Switch to an ESXi host.\n\nArguments: state, esxi_hostname, nics, number_of_ports, switch, mtu\n\nThis module can be used to add, remove and update a VMware Standard Switch to an ESXi host.',
 'vmware_vswitch_info': "Gathers info about an ESXi host's vswitch configurations\n\nArguments: cluster_name, esxi_hostname\n\nThis module can be used to gather information about an ESXi host's vswitch configurations when ESXi hostname or Cluster name is given.\nThe vSphere Client shows the value for the number of ports as elastic from vSphere 5.5 and above.\nOther tools like esxcli might show the number of ports as 1536 or 5632.\nSee U(https://kb.vmware.com/s/article/2064511) for more details.",
 'voss_command': 'Run commands on remote devices running Extreme VOSS\n\nArguments: retries, commands, wait_for, match, interval\n\nSends arbitrary commands to an Extreme VSP device running VOSS, and returns the results read from the device. This module includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.\nThis module does not support running commands in configuration mode. Please use M(voss_config) to configure VOSS devices.',
 'voss_config': 'Manage Extreme VOSS configuration sections\n\nArguments: src, backup_options, after, lines, intended_config, diff_against, parents, save_when, defaults, before, running_config, replace, backup, match, diff_ignore_lines\n\nExtreme VOSS configurations use a simple flat text file syntax. This module provides an implementation for working with EXOS configuration lines in a deterministic way.',
 'voss_facts': 'Collect facts from remote devices running Extreme VOSS\n\nArguments: gather_subset\n\nCollects a base set of device facts from a remote device that is running VOSS. This module prepends all of the base network fact keys with C(ansible_net_<fact>). The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'vsphere_copy': 'Copy a file to a VMware datastore\n\nArguments: username, src, datacenter, hostname, timeout, path, datastore, port\n\nUpload files to a VMware datastore through a vCenter REST API.',
 'vsphere_file': 'Manage files on a vCenter datastore\n\nArguments: username, datacenter, host, state, timeout, path, datastore, password, validate_certs\n\nManage files on a vCenter datastore.',
 'vultr_account_info': 'Get information about the Vultr account.\n\nArguments: \n\nGet infos about account balance, charges and payments.',
 'vultr_block_storage': 'Manages block storage volumes on Vultr.\n\nArguments: region, size, state, name\n\nManage block storage volumes on Vultr.',
 'vultr_block_storage_info': 'Get information about the Vultr block storage volumes available.\n\nArguments: \n\nGet infos about block storage volumes available in Vultr.',
 'vultr_dns_domain': 'Manages DNS domains on Vultr.\n\nArguments: state, name, server_ip\n\nCreate and remove DNS domains.',
 'vultr_dns_domain_info': 'Gather information about the Vultr DNS domains available.\n\nArguments: \n\nGather information about DNS domains available in Vultr.',
 'vultr_dns_record': 'Manages DNS records on Vultr.\n\nArguments: domain, multiple, name, priority, record_type, state, ttl, data\n\nCreate, update and remove DNS records.',
 'vultr_firewall_group': 'Manages firewall groups on Vultr.\n\nArguments: state, name\n\nCreate and remove firewall groups.',
 'vultr_firewall_group_info': 'Gather information about the Vultr firewall groups available.\n\nArguments: \n\nGather information about firewall groups available in Vultr.',
 'vultr_firewall_rule': 'Manages firewall rules on Vultr.\n\nArguments: state, protocol, ip_version, start_port, cidr, end_port, group\n\nCreate and remove firewall rules.',
 'vultr_network': 'Manages networks on Vultr.\n\nArguments: region, state, cidr, name\n\nManage networks on Vultr. A network cannot be updated. It needs to be deleted and re-created.',
 'vultr_network_info': 'Gather information about the Vultr networks available.\n\nArguments: \n\nGather information about networks available in Vultr.',
 'vultr_os_info': 'Get information about the Vultr OSes available.\n\nArguments: \n\nGet infos about OSes available to boot servers.',
 'vultr_plan_info': 'Gather information about the Vultr plans available.\n\nArguments: \n\nGather information about plans available to boot servers.',
 'vultr_region_info': 'Gather information about the Vultr regions available.\n\nArguments: \n\nGather information about regions available to boot servers.',
 'vultr_server': 'Manages virtual servers on Vultr.\n\nArguments: reserved_ip_v4, force, user_data, tag, plan, ipv6_enabled, ssh_keys, private_network_enabled, name, region, hostname, firewall_group, notify_activate, state, auto_backup_enabled, snapshot, startup_script, os\n\nDeploy, start, stop, update, restart, reinstall servers.',
 'vultr_server_info': 'Gather information about the Vultr servers available.\n\nArguments: \n\nGather information about servers available.',
 'vultr_ssh_key': 'Manages ssh keys on Vultr.\n\nArguments: state, name, ssh_key\n\nCreate, update and remove ssh keys.',
 'vultr_ssh_key_info': 'Get information about the Vultr SSH keys available.\n\nArguments: \n\nGet infos about SSH keys available.',
 'vultr_startup_script': 'Manages startup scripts on Vultr.\n\nArguments: state, script_type, name, script\n\nCreate, update and remove startup scripts.',
 'vultr_startup_script_info': 'Gather information about the Vultr startup scripts available.\n\nArguments: \n\nGather information about vultr_startup_scripts available.',
 'vultr_user': 'Manages users on Vultr.\n\nArguments: state, acls, force, name, api_enabled, password, email\n\nCreate, update and remove users.',
 'vultr_user_info': 'Get information about the Vultr user available.\n\nArguments: \n\nGet infos about users available in Vultr.',
 'vyos_banner': 'Manage multiline banners on VyOS devices\n\nArguments: text, state, banner\n\nThis will configure both pre-login and post-login banners on remote devices running VyOS. It allows playbooks to add or remote banner text from the active running configuration.',
 'vyos_command': 'Run one or more commands on VyOS devices\n\nArguments: retries, commands, wait_for, match, interval\n\nThe command module allows running one or more commands on remote devices running VyOS.  This module can also be introspected to validate key parameters before returning successfully.  If the conditional statements are not met in the wait period, the task fails.\nCertain C(show) commands in VyOS produce many lines of output and use a custom pager that can cause this module to hang.  If the value of the environment variable C(ANSIBLE_VYOS_TERMINAL_LENGTH) is not set, the default number of 10000 is used.',
 'vyos_config': 'Manage VyOS configuration on remote device\n\nArguments: comment, src, backup_options, config, lines, save, backup, match\n\nThis module provides configuration file management of VyOS devices. It provides arguments for managing both the configuration file and state of the active configuration. All configuration statements are based on `set` and `delete` commands in the device configuration.',
 'vyos_facts': 'Get facts about vyos devices.\n\nArguments: gather_subset, gather_network_resources\n\nCollects facts from network devices running the vyos operating system. This module places the facts gathered in the fact tree keyed by the respective resource name.  The facts module will always collect a base set of facts from the device and can enable or disable collection of additional facts.',
 'vyos_interfaces': 'Manages interface attributes of VyOS network devices.\n\nArguments: state, config\n\nThis module manages the interface attributes on VyOS network devices.\nThis module supports managing base attributes of Ethernet, Bonding, VXLAN, Loopback and Virtual Tunnel Interfaces.',
 'vyos_l3_interfaces': 'Manages L3 interface attributes of VyOS network devices.\n\nArguments: state, config\n\nThis module manages the L3 interface attributes on VyOS network devices.',
 'vyos_lag_interfaces': 'Manages attributes of link aggregation groups on VyOS network devices.\n\nArguments: state, config\n\nThis module manages attributes of link aggregation groups on VyOS network devices.',
 'vyos_lldp_global': 'Manage link layer discovery protocol (LLDP) attributes on VyOS devices..\n\nArguments: state, config\n\nThis module manages link layer discovery protocol (LLDP) attributes on VyOS devices.',
 'vyos_lldp_interfaces': 'Manages attributes of lldp interfaces on VyOS devices.\n\nArguments: state, config\n\nThis module manages attributes of lldp interfaces on VyOS network devices.',
 'vyos_logging': 'Manage logging on network devices\n\nArguments: aggregate, state, name, level, dest, facility\n\nThis module provides declarative management of logging on Vyatta Vyos devices.',
 'vyos_ping': 'Tests reachability using ping from VyOS network devices\n\nArguments: count, source, state, ttl, dest, interval, size\n\nTests reachability using ping from a VyOS device to a remote destination.\nTested against VyOS 1.1.8 (helium)\nFor a general purpose network module, see the M(net_ping) module.\nFor Windows targets, use the M(win_ping) module instead.\nFor targets running Python, use the M(ping) module instead.',
 'vyos_static_route': 'Manage static IP routes on Vyatta VyOS network devices\n\nArguments: state, next_hop, aggregate, mask, prefix, admin_distance\n\nThis module provides declarative management of static IP routes on Vyatta VyOS network devices.',
 'vyos_system': 'Run `set system` commands on VyOS devices\n\nArguments: name_servers, domain_name, domain_search, state, host_name\n\nRuns one or more commands on remote devices running VyOS. This module can also be introspected to validate key parameters before returning successfully.',
 'vyos_user': 'Manage the collection of local users on VyOS device\n\nArguments: update_password, configured_password, name, level, purge, state, full_name, aggregate\n\nThis module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the collection of usernames in the current running config. It also supports purging usernames from the configuration that are not explicitly defined.',
 'vyos_vlan': 'Manage VLANs on VyOS network devices\n\nArguments: delay, name, interfaces, purge, associated_interfaces, state, address, aggregate, vlan_id\n\nThis module provides declarative management of VLANs on VyOS network devices.',
 'wait_for': 'Waits for a condition before continuing\n\nArguments: active_connection_states, host, connect_timeout, delay, search_regex, state, sleep, timeout, exclude_hosts, msg, path, port\n\nYou can wait for a set amount of time C(timeout), this is the default if nothing is specified or just C(timeout) is specified. This does not produce an error.\nWaiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers.\nIt is also useful when starting guests with the M(virt) module and needing to pause until they are ready.\nThis module can also be used to wait for a regex match a string to be present in a file.\nIn Ansible 1.6 and later, this module can also be used to wait for a file to be available or absent on the filesystem.\nIn Ansible 1.8 and later, this module can also be used to wait for active connections to be closed before continuing, useful if a node is being rotated out of a load balancer pool.\nFor Windows targets, use the M(win_wait_for) module instead.',
 'wait_for_connection': 'Waits until remote system is reachable/usable\n\nArguments: delay, sleep, connect_timeout, timeout\n\nWaits for a total of C(timeout) seconds.\nRetries the transport connection after a timeout of C(connect_timeout).\nTests the transport connection every C(sleep) seconds.\nThis module makes use of internal ansible transport (and configuration) and the ping/win_ping module to guarantee correct end-to-end functioning.\nThis module is also supported for Windows targets.',
 'wakeonlan': 'Send a magic Wake-on-LAN (WoL) broadcast packet\n\nArguments: broadcast, mac, port\n\nThe C(wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.',
 'webfaction_app': 'Add or remove applications on a Webfaction host\n\nArguments: name, port_open, machine, state, autostart, login_password, type, login_name, extra_info\n\nAdd or remove applications on a Webfaction host. Further documentation at U(https://github.com/quentinsf/ansible-webfaction).',
 'webfaction_db': 'Add or remove a database on Webfaction\n\nArguments: machine, state, name, login_password, password, type, login_name\n\nAdd or remove a database on a Webfaction host. Further documentation at https://github.com/quentinsf/ansible-webfaction.',
 'webfaction_domain': 'Add or remove domains and subdomains on Webfaction\n\nArguments: state, subdomains, login_name, name, login_password\n\nAdd or remove domains or subdomains on a Webfaction host. Further documentation at https://github.com/quentinsf/ansible-webfaction.',
 'webfaction_mailbox': 'Add or remove mailboxes on Webfaction\n\nArguments: mailbox_password, state, login_name, mailbox_name, login_password\n\nAdd or remove mailboxes on a Webfaction account. Further documentation at https://github.com/quentinsf/ansible-webfaction.',
 'webfaction_site': 'Add or remove a website on a Webfaction host\n\nArguments: name, host, subdomains, state, https, login_password, login_name, site_apps\n\nAdd or remove a website on a Webfaction host.  Further documentation at https://github.com/quentinsf/ansible-webfaction.',
 'win_acl': 'Set file/directory/registry permissions for a system user or group\n\nArguments: propagation, state, user, rights, path, type, inherit\n\nAdd or remove rights/permissions for a given user or group for the specified file, folder, registry key or AppPool identifies.',
 'win_acl_inheritance': "Change ACL inheritance\n\nArguments: path, state, reorganize\n\nChange ACL (Access Control List) inheritance and optionally copy inherited ACE's (Access Control Entry) to dedicated ACE's or vice versa.",
 'win_audit_policy_system': 'Used to make changes to the system wide Audit Policy\n\nArguments: category, audit_type, subcategory\n\nUsed to make changes to the system wide Audit Policy.',
 'win_audit_rule': 'Adds an audit rule to files, folders, or registry keys\n\nArguments: state, user, rights, inheritance_flags, audit_flags, path, propagation_flags\n\nUsed to apply audit rules to files, folders or registry keys.\nOnce applied, it will begin recording the user who performed the operation defined into the Security Log in the Event viewer.\nThe behavior is designed to ignore inherited rules since those cannot be adjusted without first disabling the inheritance behavior. It will still print inherited rules in the output though for debugging purposes.',
 'win_certificate_store': 'Manages the certificate store\n\nArguments: key_exportable, key_storage, file_type, store_location, store_name, state, thumbprint, path, password\n\nUsed to import/export and remove certificates and keys from the local certificate store.\nThis module is not used to create certificates and will only manage existing certs as a file or in the store.\nIt can be used to import PEM, DER, P7B, PKCS12 (PFX) certificates and export PEM, DER and PKCS12 certificates.',
 'win_chocolatey': 'Manage packages using chocolatey\n\nArguments: force, allow_prerelease, proxy_password, install_args, source_password, allow_multiple, source_username, proxy_username, skip_scripts, name, ignore_checksums, proxy_url, allow_empty_checksums, pinned, source, state, version, architecture, timeout, package_params, validate_certs, ignore_dependencies\n\nManage packages using Chocolatey.\nIf Chocolatey is missing from the system, the module will install it.',
 'win_chocolatey_config': 'Manages Chocolatey config settings\n\nArguments: state, name, value\n\nUsed to manage Chocolatey config settings as well as unset the values.',
 'win_chocolatey_facts': 'Create a facts collection for Chocolatey\n\nArguments: \n\nThis module shows information from Chocolatey, such as installed packages, configuration, feature and sources.',
 'win_chocolatey_feature': 'Manages Chocolatey features\n\nArguments: state, name\n\nUsed to enable or disable features in Chocolatey.',
 'win_chocolatey_source': 'Manages Chocolatey sources\n\nArguments: source_username, allow_self_service, admin_only, name, certificate, update_password, source_password, certificate_password, priority, source, state, bypass_proxy\n\nUsed to managed Chocolatey sources configured on the client.\nRequires Chocolatey to be already installed on the remote host.',
 'win_command': 'Executes a command on a remote Windows node\n\nArguments: creates, free_form, chdir, removes, stdin\n\nThe C(win_command) module takes the command name followed by a list of space-delimited arguments.\nThe given command will be executed on all selected nodes. It will not be processed through the shell, so variables like C($env:HOME) and operations like C("<"), C(">"), C("|"), and C(";") will not work (use the M(win_shell) module if you need these features).\nFor non-Windows targets, use the M(command) module instead.',
 'win_copy': 'Copies files to remote locations on windows hosts\n\nArguments: src, force, remote_src, dest, decrypt, content, backup, local_follow\n\nThe C(win_copy) module copies a file on the local box to remote windows locations.\nFor non-Windows targets, use the M(copy) module instead.',
 'win_credential': 'Manages Windows Credentials in the Credential Manager\n\nArguments: comment, username, name, secret, secret_format, alias, state, update_secret, attributes, type, persistence\n\nUsed to create and remove Windows Credentials in the Credential Manager.\nThis module can manage both standard username/password credentials as well as certificate credentials.',
 'win_defrag': 'Consolidate fragmented files on local volumes\n\nArguments: priority, freespace_consolidation, include_volumes, parallel, exclude_volumes\n\nLocates and consolidates fragmented files on local volumes to improve system performance.\nMore information regarding C(win_defrag) is available from: U(https://technet.microsoft.com/en-us/library/cc731650(v=ws.11).aspx)',
 'win_disk_facts': 'Show the attached disks and disk information of the target host\n\nArguments: \n\nWith the module you can retrieve and output detailed information about the attached disks of the target and its volumes and partitions if existent.',
 'win_disk_image': 'Manage ISO/VHD/VHDX mounts on Windows hosts\n\nArguments: state, image_path\n\nManages mount behavior for a specified ISO, VHD, or VHDX image on a Windows host. When C(state) is C(present), the image will be mounted under a system-assigned drive letter, which will be returned in the C(mount_path) value of the module result.\nRequires Windows 8+ or Windows Server 2012+.',
 'win_dns_client': 'Configures DNS lookup on Windows hosts\n\nArguments: adapter_names, ipv4_addresses\n\nThe C(win_dns_client) module configures the DNS client on Windows network adapters.',
 'win_dns_record': 'Manage Windows Server DNS records\n\nArguments: computer_name, state, name, zone, ttl, type, value\n\nManage DNS records within an existing Windows Server DNS zone.',
 'win_domain': 'Ensures the existence of a Windows domain\n\nArguments: database_path, domain_netbios_name, create_dns_delegation, dns_domain_name, safe_mode_password, sysvol_path, forest_mode, domain_mode\n\nEnsure that the domain named by C(dns_domain_name) exists and is reachable.\nIf the domain is not reachable, the domain is created in a new forest on the target Windows Server 2012R2+ host.\nThis module may require subsequent use of the M(win_reboot) action if changes are made.',
 'win_domain_computer': 'Manage computers in Active Directory\n\nArguments: name, domain_username, enabled, dns_hostname, sam_account_name, state, domain_password, domain_server, ou, description\n\nCreate, read, update and delete computers in Active Directory using a windows bridge computer to launch New-ADComputer, Get-ADComputer, Set-ADComputer, Remove-ADComputer and Move-ADObject powershell commands.',
 'win_domain_controller': 'Manage domain controller/member server state for a Windows host\n\nArguments: read_only, database_path, site_name, domain_admin_user, dns_domain_name, safe_mode_password, domain_admin_password, state, local_admin_password, sysvol_path\n\nEnsure that a Windows Server 2012+ host is configured as a domain controller or demoted to member server.\nThis module may require subsequent use of the M(win_reboot) action if changes are made.',
 'win_domain_group': 'Creates, modifies or removes domain groups\n\nArguments: category, protect, display_name, description, domain_username, ignore_protection, state, domain_password, organizational_unit, domain_server, managed_by, attributes, scope, name\n\nCreates, modifies or removes groups in Active Directory.\nFor local groups, use the M(win_group) module instead.',
 'win_domain_group_membership': 'Manage Windows domain group membership\n\nArguments: state, domain_password, name, members, domain_server, domain_username\n\nAllows the addition and removal of domain users and domain groups from/to a domain group.',
 'win_domain_membership': 'Manage domain/workgroup membership for a Windows host\n\nArguments: workgroup_name, domain_ou_path, state, domain_admin_user, dns_domain_name, hostname, domain_admin_password\n\nManages domain membership or workgroup membership for a Windows host. Also supports hostname changes.\nThis module may require subsequent use of the M(win_reboot) action if changes are made.',
 'win_domain_user': 'Manages Windows Active Directory user accounts\n\nArguments: upn, update_password, surname, description, firstname, company, groups_action, password_expired, street, postal_code, groups, path, password_never_expires, account_locked, state_province, city, password, name, domain_username, country, enabled, state, domain_password, domain_server, attributes, email, user_cannot_change_password\n\nManages Windows Active Directory user accounts.',
 'win_dotnet_ngen': 'Runs ngen to recompile DLLs after .NET  updates\n\nArguments: \n\nAfter .NET framework is installed/updated, Windows will probably want to recompile things to optimise for the host.\nThis happens via scheduled task, usually at some inopportune time.\nThis module allows you to run this task on your own schedule, so you incur the CPU hit at some more convenient and controlled time.\nU(https://docs.microsoft.com/en-us/dotnet/framework/tools/ngen-exe-native-image-generator#native-image-service)\nU(http://blogs.msdn.com/b/dotnet/archive/2013/08/06/wondering-why-mscorsvw-exe-has-high-cpu-usage-you-can-speed-it-up.aspx)',
 'win_dsc': 'Invokes a PowerShell DSC configuration\n\nArguments: free_form, module_version, resource_name\n\nConfigures a resource using PowerShell DSC.\nRequires PowerShell version 5.0 or newer.\nMost of the options for this module are dynamic and will vary depending on the DSC Resource specified in I(resource_name).\nSee :doc:`/user_guide/windows_dsc` for more information on how to use this module.',
 'win_environment': 'Modify environment variables on windows hosts\n\nArguments: state, name, value, level\n\nUses .net Environment to set or remove environment variables and can set at User, Machine or Process level.\nUser level environment variables will be set, but not available until the user has logged off and on again.',
 'win_eventlog': 'Manage Windows event logs\n\nArguments: parameter_file, name, overflow_action, retention_days, sources, state, message_file, maximum_size, category_file\n\nAllows the addition, clearing and removal of local Windows event logs, and the creation and removal of sources from a given event log.  Also allows the specification of settings per log and source.',
 'win_eventlog_entry': 'Write entries to Windows event logs\n\nArguments: category, source, log, raw_data, event_id, entry_type, message\n\nWrite log entries to a given event log from a specified source.',
 'win_feature': 'Installs and uninstalls Windows Features on Windows Server\n\nArguments: source, include_management_tools, include_sub_features, state, name\n\nInstalls or uninstalls Windows Roles or Features on Windows Server.\nThis module uses the Add/Remove-WindowsFeature Cmdlets on Windows 2008 R2 and Install/Uninstall-WindowsFeature Cmdlets on Windows 2012, which are not available on client os machines.',
 'win_file': 'Creates, touches or removes files or directories\n\nArguments: path, state\n\nCreates (empty) files, updates file modification stamps of existing files, and can create or remove directories.\nUnlike M(file), does not modify ownership, permissions or manipulate links.\nFor non-Windows targets, use the M(file) module instead.',
 'win_file_version': 'Get DLL or EXE file build version\n\nArguments: path\n\nGet DLL or EXE file build version.',
 'win_find': "Return a list of files based on specific criteria\n\nArguments: paths, file_type, checksum_algorithm, age, recurse, age_stamp, patterns, get_checksum, use_regex, follow, hidden, size\n\nReturn a list of files based on specified criteria.\nMultiple criteria are AND'd together.\nFor non-Windows targets, use the M(find) module instead.",
 'win_firewall': 'Enable or disable the Windows Firewall\n\nArguments: state, profiles\n\nEnable or Disable Windows Firewall profiles.',
 'win_firewall_rule': 'Windows firewall automation\n\nArguments: remoteport, direction, group, name, service, description, enabled, profiles, localip, state, program, remoteip, action, protocol, localport\n\nAllows you to create/remove/update firewall rules.',
 'win_format': 'Formats an existing volume or a new volume on an existing partition on Windows\n\nArguments: integrity_streams, full, force, compress, allocation_unit_size, label, new_label, drive_letter, path, large_frs, file_system\n\nThe M(win_format) module formats an existing volume or a new volume on an existing partition on Windows',
 'win_get_url': 'Downloads file from HTTP, HTTPS, or FTP to node\n\nArguments: force, dest, checksum_algorithm, proxy_password, client_cert_password, use_proxy, url, checksum, proxy_url, maximum_redirection, client_cert, headers, checksum_url, proxy_username, follow_redirects, method\n\nDownloads files from HTTP, HTTPS, or FTP to the remote server.\nThe remote server I(must) have direct access to the remote resource.\nFor non-Windows targets, use the M(get_url) module instead.',
 'win_group': 'Add and remove local groups\n\nArguments: state, name, description\n\nAdd and remove local groups.\nFor non-Windows targets, please use the M(group) module instead.',
 'win_group_membership': 'Manage Windows local group membership\n\nArguments: state, name, members\n\nAllows the addition and removal of local, service and domain users, and domain groups from a local group.',
 'win_hostname': 'Manages local Windows computer name\n\nArguments: name\n\nManages local Windows computer name.\nA reboot is required for the computer name to take effect.',
 'win_hosts': 'Manages hosts file entries on Windows.\n\nArguments: action, state, ip_address, canonical_name, aliases\n\nManages hosts file entries on Windows.\nMaps IPv4 or IPv6 addresses to canonical names.\nAdds, removes, or sets cname records for ip and hostname pairs.\nModifies %windir%\\\\system32\\\\drivers\\\\etc\\\\hosts.',
 'win_hotfix': 'Install and uninstalls Windows hotfixes\n\nArguments: hotfix_identifier, state, hotfix_kb, source\n\nInstall, uninstall a Windows hotfix.',
 'win_http_proxy': 'Manages proxy settings for WinHTTP\n\nArguments: source, proxy, bypass\n\nUsed to set, remove, or import proxy settings for Windows HTTP Services C(WinHTTP).\nWinHTTP is a framework used by applications or services, typically .NET applications or non-interactive services, to make web requests.',
 'win_iis_virtualdirectory': 'Configures a virtual directory in IIS\n\nArguments: application, state, name, physical_path, site\n\nCreates, Removes and configures a virtual directory in IIS.',
 'win_iis_webapplication': 'Configures IIS web applications\n\nArguments: state, application_pool, name, physical_path, site\n\nCreates, removes, and configures IIS web applications.',
 'win_iis_webapppool': 'Configure IIS Web Application Pools\n\nArguments: attributes, state, name\n\nCreates, removes and configures an IIS Web Application Pool.',
 'win_iis_webbinding': 'Configures a IIS Web site binding\n\nArguments: protocol, name, certificate_hash, ip, host_header, state, certificate_store_name, port, ssl_flags\n\nCreates, removes and configures a binding to an existing IIS Web site.',
 'win_iis_website': 'Configures a IIS Web site\n\nArguments: application_pool, name, parameters, ip, physical_path, hostname, site_id, ssl, state, port\n\nCreates, Removes and configures a IIS Web site.',
 'win_inet_proxy': 'Manages proxy settings for WinINet and Internet Explorer\n\nArguments: connection, auto_config_url, auto_detect, bypass, proxy\n\nUsed to set or remove proxy settings for Windows INet which includes Internet Explorer.\nWinINet is a framework used by interactive applications to submit web requests through.\nThe proxy settings can also be used by other applications like Firefox, Chrome, and others but there is no definitive list.',
 'win_lineinfile': 'Ensure a particular line is in a file, or replace an existing line using a back-referenced regular expression\n\nArguments: regex, insertbefore, encoding, create, newline, backrefs, state, insertafter, path, line, backup, validate\n\nThis module will search a file for a line, and ensure that it is present or absent.\nThis is primarily useful when you want to change a single line in a file only.',
 'win_mapped_drive': 'Map network drives for users\n\nArguments: username, path, state, password, letter\n\nAllows you to modify mapped network drives for individual users.\nAlso support WebDAV endpoints in the UNC form.',
 'win_msg': 'Sends a message to logged in users on Windows hosts\n\nArguments: msg, to, display_seconds, wait\n\nWraps the msg.exe command in order to send messages to Windows hosts.',
 'win_netbios': 'Manage NetBIOS over TCP/IP settings on Windows.\n\nArguments: state, adapter_names\n\nEnables or disables NetBIOS on Windows network adapters.\nCan be used to protect a system against NBT-NS poisoning and avoid NBNS broadcast storms.\nSettings can be applied system wide or per adapter.',
 'win_nssm': "Install a service using NSSM\n\nArguments: executable, display_name, name, start_mode, description, state, application, stderr_file, dependencies, working_directory, user, password, stdout_file, app_parameters, arguments\n\nInstall a Windows service using the NSSM wrapper.\nNSSM is a service helper which doesn't suck. See U(https://nssm.cc/) for more information.",
 'win_optional_feature': 'Manage optional Windows features\n\nArguments: source, state, name, include_parent\n\nInstall or uninstall optional Windows features on non-Server Windows.\nThis module uses the C(Enable-WindowsOptionalFeature) and C(Disable-WindowsOptionalFeature) cmdlets.',
 'win_owner': 'Set owner\n\nArguments: path, recurse, user\n\nSet owner of files or directories.',
 'win_package': 'Installs/uninstalls an installable package\n\nArguments: username, chdir, product_id, creates_service, creates_path, log_path, state, arguments, expected_return_code, creates_version, path, password, validate_certs\n\nInstalls or uninstalls a package in either an MSI or EXE format.\nThese packages can be sources from the local file system, network file share or a url.\nPlease read the notes section around some caveats with this module.',
 'win_pagefile': 'Query or change pagefile configuration\n\nArguments: test_path, initial_size, drive, state, system_managed, remove_all, override, maximum_size, automatic\n\nQuery current pagefile configuration.\nEnable/Disable AutomaticManagedPagefile.\nCreate new or override pagefile configuration.',
 'win_partition': 'Creates, changes and removes partitions on Windows Server\n\nArguments: partition_size, read_only, gpt_type, disk_number, partition_number, active, state, drive_letter, mbr_type, hidden, offline\n\nThe M(win_partition) module can create, modify or delete a partition on a disk',
 'win_path': 'Manage Windows path environment variables\n\nArguments: scope, state, elements, name\n\nAllows element-based ordering, addition, and removal of Windows path environment variables.',
 'win_pester': 'Run Pester tests on Windows hosts\n\nArguments: test_parameters, path, version, tags\n\nRun Pester tests on Windows hosts.\nTest files have to be available on the remote host.',
 'win_ping': 'A windows version of the classic ping module\n\nArguments: data\n\nChecks management connectivity of a windows host.\nThis is NOT ICMP ping, this is just a trivial test module.\nFor non-Windows targets, use the M(ping) module instead.\nFor Network targets, use the M(net_ping) module instead.',
 'win_power_plan': 'Changes the power plan of a Windows system\n\nArguments: name\n\nThis module will change the power plan of a Windows system to the defined string.\nWindows defaults to C(balanced) which will cause CPU throttling. In some cases it can be preferable to change the mode to C(high performance) to increase CPU performance.',
 'win_product_facts': 'Provides Windows product and license information\n\nArguments: \n\nProvides Windows product and license information.',
 'win_psexec': 'Runs commands (remotely) as another (privileged) user\n\nArguments: username, limited, session, extra_opts, password, wait, executable, chdir, noprofile, system, elevated, priority, hostnames, command, timeout, nobanner, interactive\n\nRun commands (remotely) through the PsExec service.\nRun commands as another (domain) user (with elevated privileges).',
 'win_psmodule': 'Adds or removes a Windows PowerShell module\n\nArguments: allow_clobber, name, repository, allow_prerelease, maximum_version, skip_publisher_check, state, url, required_version, minimum_version\n\nThis module helps to install Windows PowerShell modules and register custom modules repository on Windows-based systems.',
 'win_psrepository': 'Adds, removes or updates a Windows PowerShell repository.\n\nArguments: source, state, name, installation_policy\n\nThis module helps to add, remove and update Windows PowerShell repository on Windows-based systems.',
 'win_rabbitmq_plugin': 'Manage RabbitMQ plugins\n\nArguments: state, new_only, prefix, names\n\nManage RabbitMQ plugins.',
 'win_rds_cap': 'Manage Connection Authorization Policies (CAP) on a Remote Desktop Gateway server\n\nArguments: computer_groups, name, session_timeout_action, redirect_drives, redirect_serial, redirect_printers, user_groups, order, idle_timeout, state, allow_only_sdrts_servers, redirect_clipboard, session_timeout, auth_method, redirect_pnp\n\nCreates, removes and configures a Remote Desktop connection authorization policy (RD CAP).\nA RD CAP allows you to specify the users who can connect to a Remote Desktop Gateway server.',
 'win_rds_rap': 'Manage Resource Authorization Policies (RAP) on a Remote Desktop Gateway server\n\nArguments: allowed_ports, computer_group_type, state, name, computer_group, description, user_groups\n\nCreates, removes and configures a Remote Desktop resource authorization policy (RD RAP).\nA RD RAP allows you to specify the network resources (computers) that users can connect to remotely through a Remote Desktop Gateway server.',
 'win_rds_settings': 'Manage main settings of a Remote Desktop Gateway server\n\nArguments: certificate_hash, enable_only_messaging_capable_clients, ssl_bridging, max_connections\n\nConfigure general settings of a Remote Desktop Gateway server.',
 'win_reboot': 'Reboot a windows machine\n\nArguments: pre_reboot_delay, post_reboot_delay, test_command, shutdown_timeout, reboot_timeout, msg, connect_timeout\n\nReboot a Windows machine, wait for it to go down, come back up, and respond to commands.\nFor non-Windows targets, use the M(reboot) module instead.',
 'win_reg_stat': 'Get information about Windows registry keys\n\nArguments: path, name\n\nLike M(win_file), M(win_reg_stat) will return whether the key/property exists.\nIt also returns the sub keys and properties of the key specified.\nIf specifying a property name through I(property), it will return the information specific for that property.',
 'win_regedit': 'Add, change, or remove registry keys and values\n\nArguments: state, delete_key, name, path, type, hive, data\n\nAdd, modify or remove registry keys and values.\nMore information about the windows registry from Wikipedia U(https://en.wikipedia.org/wiki/Windows_Registry).',
 'win_region': 'Set the region and format settings\n\nArguments: unicode_language, copy_settings, location, format\n\nSet the location settings of a Windows Server.\nSet the format settings of a Windows Server.\nSet the unicode language settings of a Windows Server.\nCopy across these settings to the default profile.',
 'win_regmerge': 'Merges the contents of a registry file into the Windows registry\n\nArguments: path, compare_key\n\nWraps the reg.exe command to import the contents of a registry file.\nSuitable for use with registry files created using M(win_template).\nWindows registry files have a specific format and must be constructed correctly with carriage return and line feed line endings otherwise they will not be merged.\nExported registry files often start with a Byte Order Mark which must be removed if the file is to templated using M(win_template).\nRegistry file format is described at U(https://support.microsoft.com/en-us/kb/310516)\nSee also M(win_template), M(win_regedit)',
 'win_robocopy': 'Synchronizes the contents of two directories using Robocopy\n\nArguments: dest, src, recurse, purge, flags\n\nSynchronizes the contents of files/directories from a source to destination.\nUnder the hood this just calls out to RoboCopy, since that should be available on most modern Windows systems.',
 'win_route': 'Add or remove a static route\n\nArguments: metric, destination, gateway, state\n\nAdd or remove a static route.',
 'win_say': 'Text to speech module for Windows to speak messages and optionally play sounds\n\nArguments: end_sound_path, msg, start_sound_path, voice, msg_file, speech_speed\n\nUses .NET libraries to convert text to speech and optionally play .wav sounds.  Audio Service needs to be running and some kind of speakers or headphones need to be attached to the windows target(s) for the speech to be audible.',
 'win_scheduled_task': 'Manage scheduled tasks\n\nArguments: run_only_if_network_available, update_password, execution_time_limit, actions, group, wake_to_run, run_only_if_idle, display_name, author, restart_count, compatibility, priority, source, state, version, allow_demand_start, logon_type, hidden, username, stop_if_going_on_batteries, disallow_start_if_on_batteries, description, delete_expired_task_after, restart_interval, start_when_available, date, path, password, run_level, multiple_instances, name, triggers, enabled, allow_hard_terminate\n\nCreates/modified or removes Windows scheduled tasks.',
 'win_scheduled_task_stat': 'Get information about Windows Scheduled Tasks\n\nArguments: path, name\n\nWill return whether the folder and task exists.\nReturns the names of tasks in the folder specified.\nUse M(win_scheduled_task) to configure a scheduled task.',
 'win_security_policy': 'Change local security policy settings\n\nArguments: section, key, value\n\nAllows you to set the local security policies that are configured by SecEdit.exe.',
 'win_service': 'Manage and query Windows services\n\nArguments: username, display_name, desktop_interact, force_dependent_services, dependency_action, description, start_mode, state, dependencies, path, password, name\n\nManage and query Windows services.\nFor non-Windows targets, use the M(service) module instead.',
 'win_share': 'Manage Windows shares\n\nArguments: deny, full, encrypt, name, read, list, state, caching_mode, path, change, description\n\nAdd, modify or remove Windows share and set share permissions.',
 'win_shell': 'Execute shell commands on target hosts\n\nArguments: creates, executable, chdir, stdin, removes, free_form, no_profile\n\nThe C(win_shell) module takes the command name followed by a list of space-delimited arguments. It is similar to the M(win_command) module, but runs the command via a shell (defaults to PowerShell) on the target host.\nFor non-Windows targets, use the M(shell) module instead.',
 'win_shortcut': 'Manage shortcuts on Windows\n\nArguments: windowstyle, src, description, run_as_admin, dest, directory, state, arguments, hotkey, icon\n\nCreate, manage and delete Windows shortcuts',
 'win_snmp': 'Configures the Windows SNMP service\n\nArguments: action, permitted_managers, community_strings\n\nThis module configures the Windows SNMP service.',
 'win_stat': 'Get information about Windows files\n\nArguments: checksum_algorithm, path, get_md5, get_checksum, follow\n\nReturns information about a Windows file.\nFor non-Windows targets, use the M(stat) module instead.',
 'win_tempfile': 'Creates temporary files and directories\n\nArguments: path, state, prefix, suffix\n\nCreates temporary files and directories.\nFor non-Windows targets, please use the M(tempfile) module instead.',
 'win_template': 'Template a file out to a remote server\n\nArguments: force, newline_sequence, backup\n\nTemplate a file out to a remote server',
 'win_timezone': 'Sets Windows machine timezone\n\nArguments: timezone\n\nSets machine time to the specified timezone.',
 'win_toast': 'Sends Toast windows notification to logged in users on Windows 10 or later hosts\n\nArguments: popup, group, expire, title, msg, tag\n\nSends alerts which appear in the Action Center area of the windows desktop.',
 'win_unzip': 'Unzips compressed files and archives on the Windows node\n\nArguments: dest, src, delete_archive, recurse, creates\n\nUnzips compressed files and archives.\nSupports .zip files natively.\nSupports other formats supported by the Powershell Community Extensions (PSCX) module (basically everything 7zip supports).\nFor non-Windows targets, use the M(unarchive) module instead.',
 'win_updates': 'Download and install Windows updates\n\nArguments: reboot_timeout, log_path, whitelist, category_names, reboot, use_scheduled_task, blacklist, state, server_selection\n\nSearches, downloads, and installs Windows updates synchronously by automating the Windows Update client.',
 'win_uri': 'Interacts with webservices\n\nArguments: body, dest, status_code, removes, proxy_password, client_cert_password, content_type, url_password, use_proxy, url, proxy_url, maximum_redirection, method, creates, proxy_username, url_username, follow_redirects, return_content, client_cert\n\nInteracts with FTP, HTTP and HTTPS web services.\nSupports Digest, Basic and WSSE HTTP authentication mechanisms.\nFor non-Windows targets, use the M(uri) module instead.',
 'win_user': 'Manages local Windows user accounts\n\nArguments: update_password, password, name, description, groups_action, password_expired, state, groups, account_disabled, fullname, password_never_expires, account_locked, user_cannot_change_password\n\nManages local Windows user accounts.\nFor non-Windows targets, use the M(user) module instead.',
 'win_user_profile': 'Manages the Windows user profiles.\n\nArguments: username, state, remove_multiple, name\n\nUsed to create or remove user profiles on a Windows host.\nThis can be used to create a profile before a user logs on or delete a profile when removing a user account.\nA profile can be created for both a local or domain account.',
 'win_user_right': 'Manage Windows User Rights\n\nArguments: action, name, users\n\nAdd, remove or set User Rights for a group or users or groups.\nYou can set user rights for both local and domain accounts.',
 'win_wait_for': 'Waits for a condition before continuing\n\nArguments: regex, host, port, delay, state, sleep, timeout, exclude_hosts, path, connect_timeout\n\nYou can wait for a set amount of time C(timeout), this is the default if nothing is specified.\nWaiting for a port to become available is useful for when services are not immediately available after their init scripts return which is true of certain Java application servers.\nYou can wait for a file to exist or not exist on the filesystem.\nThis module can also be used to wait for a regex match string to be present in a file.\nYou can wait for active connections to be closed before continuing on a local port.',
 'win_wait_for_process': 'Waits for a process to exist or not exist before continuing.\n\nArguments: process_name_pattern, process_name_exact, post_wait_delay, process_min_count, pid, state, pre_wait_delay, sleep, timeout, owner\n\nWaiting for a process to start or stop.\nThis is useful when Windows services behave poorly and do not enumerate external dependencies in their manifest.',
 'win_wakeonlan': 'Send a magic Wake-on-LAN (WoL) broadcast packet\n\nArguments: broadcast, mac, port\n\nThe C(win_wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.\nFor non-Windows targets, use the M(wakeonlan) module instead.',
 'win_webpicmd': "Installs packages using Web Platform Installer command-line\n\nArguments: name\n\nInstalls packages using Web Platform Installer command-line (U(http://www.iis.net/learn/install/web-platform-installer/web-platform-installer-v4-command-line-webpicmdexe-rtw-release)).\nMust be installed and present in PATH (see M(win_chocolatey) module; 'webpicmd' is the package name, and you must install 'lessmsi' first too)?\nInstall IIS first (see M(win_feature) module).",
 'win_whoami': 'Get information about the current user and process\n\nArguments: \n\nDesigned to return the same information as the C(whoami /all) command.\nAlso includes information missing from C(whoami) such as logon metadata like logon rights, id, type.',
 'win_xml': 'Manages XML file content on Windows hosts\n\nArguments: count, xpath, backup, fragment, attribute, state, path, type\n\nManages XML nodes, attributes and text, using xpath to select which xml nodes need to be managed.\nXML fragments, formatted as strings, are used to specify the desired state of a part or parts of XML files on remote Windows servers.\nFor non-Windows targets, use the M(xml) module instead.',
 'xattr': 'Manage user defined extended attributes\n\nArguments: state, key, path, follow, namespace, value\n\nManages filesystem user defined extended attributes.\nRequires that extended attributes are enabled on the target filesystem and that the setfattr/getfattr utilities are present.',
 'xbps': 'Manage packages with XBPS\n\nArguments: recurse, state, upgrade, update_cache, name\n\nManage packages with the XBPS package manager.',
 'xenserver_facts': 'get facts reported on xenserver\n\nArguments: \n\nReads data out of XenAPI, can be used instead of multiple xe commands.',
 'xenserver_guest': 'Manages virtual machines running on Citrix Hypervisor/XenServer host or pool\n\nArguments: uuid, force, name_desc, hardware, cdrom, home_server, networks, wait_for_ip_address, template_uuid, state_change_timeout, custom_params, name, disks, state, is_template, template, linked_clone, folder\n\nThis module can be used to create new virtual machines from templates or other virtual machines, modify various virtual machine components like network and disk, rename a virtual machine and remove a virtual machine with associated components.\n',
 'xenserver_guest_info': 'Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool\n\nArguments: name, uuid\n\nThis module can be used to gather essential VM facts.\n',
 'xenserver_guest_powerstate': 'Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool\n\nArguments: uuid, state_change_timeout, state, name, wait_for_ip_address\n\nThis module can be used to power on, power off, restart or suspend virtual machine and gracefully reboot or shutdown guest OS of virtual machine.\n',
 'xfconf': 'Edit XFCE4 Configurations\n\nArguments: state, property, value_type, channel, value\n\nThis module allows for the manipulation of Xfce 4 Configuration via xfconf-query.  Please see the xfconf-query(1) man pages for more details.',
 'xfs_quota': 'Manage quotas on XFS filesystems\n\nArguments: rtbsoft, name, type, ihard, bhard, state, bsoft, isoft, mountpoint, rtbhard\n\nConfigure quotas on XFS filesystems.\nBefore using this module /etc/projects and /etc/projid need to be configured.',
 'xml': 'Manage bits and pieces of XML files or strings\n\nArguments: xpath, set_children, attribute, pretty_print, print_match, namespaces, insertafter, path, count, xmlstring, insertbefore, strip_cdata_tags, input_type, add_children, value, content, state, backup\n\nA CRUD-like interface to managing bits of XML files.',
 'yarn': 'Manage node.js packages with Yarn\n\nArguments: executable, name, global, ignore_scripts, state, production, registry, version, path\n\nManage node.js packages with the Yarn package manager (https://yarnpkg.com/)',
 'yum': 'Manages packages with the I(yum) package manager\n\nArguments: install_weak_deps, autoremove, lock_timeout, download_dir, enable_plugin, update_cache, disable_excludes, exclude, update_only, installroot, allow_downgrade, name, download_only, bugfix, list, disable_gpg_check, conf_file, use_backend, state, disablerepo, releasever, disable_plugin, enablerepo, skip_broken, security, validate_certs\n\nInstalls, upgrade, downgrades, removes, and lists packages and groups with the I(yum) package manager.\nThis module only works on Python 2. If you require Python 3 support see the M(dnf) module.',
 'yum_repository': 'Add or remove YUM repositories\n\nArguments: ip_resolve, enabled, proxy_password, bandwidth, cost, file, mirrorlist_expire, exclude, keepalive, repo_gpgcheck, sslverify, failovermethod, deltarpm_metadata_percentage, gpgkey, http_caching, priority, state, mirrorlist, gpgcheck, include, proxy_username, username, metadata_expire, description, retries, sslclientcert, baseurl, gpgcakey, s3_enabled, includepkgs, enablegroups, password, ui_repoid_vars, protect, ssl_check_cert_permissions, throttle, name, deltarpm_percentage, sslclientkey, metalink, reposdir, skip_if_unavailable, keepcache, sslcacert, timeout, async, metadata_expire_filter, proxy\n\nAdd or remove YUM repositories in RPM-based Linux distributions.\nIf you wish to update an existing repository definition use M(ini_file) instead.',
 'zabbix_action': 'Create/Delete/Update Zabbix actions\n\nArguments: status, operations, esc_period, default_message, acknowledge_default_subject, recovery_default_subject, default_subject, formula, recovery_operations, event_source, name, recovery_default_message, pause_in_maintenance, acknowledge_operations, eval_type, state, acknowledge_default_message, conditions\n\nThis module allows you to create, modify and delete Zabbix actions.',
 'zabbix_group': 'Create/delete Zabbix host groups\n\nArguments: state, host_groups\n\nCreate host groups if they do not exist.\nDelete existing host groups if they exist.',
 'zabbix_group_info': 'Gather information about Zabbix hostgroup\n\nArguments: hostgroup_name\n\nThis module allows you to search for Zabbix hostgroup entries.\nThis module was called C(zabbix_group_facts) before Ansible 2.9. The usage did not change.',
 'zabbix_host': 'Create/update/delete Zabbix hosts\n\nArguments: status, force, description, ca_cert, interfaces, tls_accept, ipmi_username, ipmi_authtype, proxy, host_groups, inventory_zabbix, inventory_mode, tls_psk_identity, tls_psk, ipmi_privilege, tls_connect, ipmi_password, visible_name, state, host_name, tls_subject, link_templates\n\nThis module allows you to create, modify and delete Zabbix host entries and associated group and template data.',
 'zabbix_host_info': 'Gather information about Zabbix host\n\nArguments: remove_duplicate, exact_match, host_name, host_ip, host_inventory\n\nThis module allows you to search for Zabbix host entries.\nThis module was called C(zabbix_host_facts) before Ansible 2.9. The usage did not change.',
 'zabbix_hostmacro': 'Create/update/delete Zabbix host macros\n\nArguments: macro_name, macro_value, state, force, host_name\n\nmanages Zabbix host macros, it can create, update or delete them.',
 'zabbix_maintenance': 'Create Zabbix maintenance windows\n\nArguments: state, name, host_groups, collect_data, minutes, host_names, desc\n\nThis module will let you create Zabbix maintenance windows.',
 'zabbix_map': 'Create/update/delete Zabbix maps\n\nArguments: label_type, name, margin, expand_problem, height, width, state, default_image, highlight, data\n\nThis module allows you to create, modify and delete Zabbix map entries, using Graphviz binaries and text description written in DOT language. Nodes of the graph will become map elements and edges will become links between map elements. See U(https://en.wikipedia.org/wiki/DOT_(graph_description_language)) and U(https://www.graphviz.org/) for details. Inspired by U(http://blog.zabbix.com/maps-for-the-lazy/).\nThe following extra node attributes are supported: C(zbx_host) contains name of the host in Zabbix. Use this if desired type of map element is C(host). C(zbx_group) contains name of the host group in Zabbix. Use this if desired type of map element is C(host group). C(zbx_map) contains name of the map in Zabbix. Use this if desired type of map element is C(map). C(zbx_label) contains label of map element. C(zbx_image) contains name of the image used to display the element in default state. C(zbx_image_disabled) contains name of the image used to display disabled map element. C(zbx_image_maintenance) contains name of the image used to display map element in maintenance. C(zbx_image_problem) contains name of the image used to display map element with problems. C(zbx_url) contains map element URL in C(name:url) format. More than one URL could be specified by adding a postfix (e.g., C(zbx_url1), C(zbx_url2)).\nThe following extra link attributes are supported: C(zbx_draw_style) contains link line draw style. Possible values: C(line), C(bold), C(dotted), C(dashed). C(zbx_trigger) contains name of the trigger used as a link indicator in C(host_name:trigger_name) format. More than one trigger could be specified by adding a postfix (e.g., C(zbx_trigger1), C(zbx_trigger2)). C(zbx_trigger_color) contains indicator color specified either as CSS3 name or as a hexadecimal code starting with C(#). C(zbx_trigger_draw_style) contains indicator draw style. Possible values are the same as for C(zbx_draw_style).',
 'zabbix_mediatype': 'Create/Update/Delete Zabbix media types\n\nArguments: status, username, smtp_authentication, gsm_modem, attempt_interval, script_name, max_sessions, smtp_security, password, smtp_server_port, name, smtp_email, smtp_helo, smtp_verify_peer, smtp_server, state, message_text_limit, smtp_verify_host, script_params, type, max_attempts\n\nThis module allows you to create, modify and delete Zabbix media types.',
 'zabbix_proxy': 'Create/delete/get/update Zabbix proxies\n\nArguments: status, tls_psk, description, ca_cert, tls_connect, tls_accept, proxy_name, state, interface, tls_subject, tls_psk_identity\n\nThis module allows you to create, modify, get and delete Zabbix proxy entries.',
 'zabbix_screen': 'Create/update/delete Zabbix screens\n\nArguments: screens\n\nThis module allows you to create, modify and delete Zabbix screens and associated graph data.',
 'zabbix_template': 'Create/update/delete/dump Zabbix template\n\nArguments: clear_templates, template_name, template_json, macros, state, dump_format, template_xml, template_groups, link_templates\n\nThis module allows you to create, modify, delete and dump Zabbix templates.\nMultiple templates can be created or modified at once if passing JSON or XML to module.',
 'zfs': 'Manage zfs\n\nArguments: origin, state, extra_zfs_properties, name\n\nManages ZFS file systems, volumes, clones and snapshots',
 'zfs_delegate_admin': 'Manage ZFS delegated administration (user admin privileges)\n\nArguments: everyone, name, descendents, state, groups, users, permissions, local, recursive\n\nManages ZFS file system delegated administration permissions, which allow unprivileged users to perform ZFS operations normally restricted to the superuser.\nSee the C(zfs allow) section of C(zfs(1M)) for detailed explanations of options.\nThis module attempts to adhere to the behavior of the command line tool as much as possible.',
 'zfs_facts': 'Gather facts about ZFS datasets.\n\nArguments: parsable, depth, name, type, recurse, properties\n\nGather facts from ZFS dataset properties.',
 'znode': 'Create, delete, retrieve, and update znodes using ZooKeeper\n\nArguments: state, hosts, name, timeout, op, value, recursive\n\nCreate, delete, retrieve, and update znodes using ZooKeeper.',
 'zpool_facts': 'Gather facts about ZFS pools.\n\nArguments: parsable, name, properties\n\nGather facts from ZFS pool properties.',
 'zypper': 'Manage packages on SUSE and openSUSE\n\nArguments: extra_args_precommand, force, name, disable_gpg_check, extra_args, state, oldpackage, update_cache, disable_recommends, type\n\nManage packages on SUSE and openSUSE using the zypper and rpm tools.',
 'zypper_repository': 'Add and remove Zypper repositories\n\nArguments: repo, name, auto_import_keys, enabled, disable_gpg_check, priority, state, autorefresh, overwrite_multiple, runrefresh, description\n\nAdd or remove Zypper repositories on SUSE and openSUSE'}
